import { Observable } from 'rxjs';
import { GLPK } from 'glpk.js';
import { PetriNet } from '../../../../models/pn/model/petri-net';
import { PetriNetRegionTransformerService } from '../petri-net-region-transformer.service';
import { Region } from './region';
import { RegionsConfiguration } from './regions-configuration';
export declare class RegionIlpSolver {
    private _regionTransformer;
    private _solver$;
    private static readonly k;
    private static readonly K;
    private readonly _constraintCounter;
    private readonly _variableCounter;
    private _allVariables;
    private _placeVariables;
    constructor(_regionTransformer: PetriNetRegionTransformerService, _solver$: Observable<GLPK>);
    computeRegions(nets: Array<PetriNet>, config: RegionsConfiguration): Observable<Region>;
    private combineInputNets;
    private setUpInitialILP;
    private applyConstraints;
    private createInitialConstraints;
    private addConstraintsToILP;
    private collectTransitionByLabel;
    private createVariablesFromPlaceIds;
    private combineCoefficients;
    private helperVariableName;
    private xAbsoluteOfSum;
    private xWhenAEqualsB;
    private yWhenAGreaterEqualB;
    private xWhenAGreaterEqualB;
    private xWhenALessEqualB;
    private xWhenAGreaterB;
    private xWhenALessB;
    private xAandB;
    private xAorB;
    private xNotA;
    private createOrCopyVariable;
    private variable;
    private equal;
    private greaterEqualThan;
    private lessEqualThan;
    private sumEqualsZero;
    private sumGreaterThan;
    private constrain;
    private constraintName;
    private solveILP;
    private formatVariableList;
}
