import { Observable } from 'rxjs';
import { GLPK, LP } from 'glpk.js';
import { ConstraintsWithNewVariables } from '../../models/glpk/constraints-with-new-variables';
import { Variable } from '../../models/glpk/variable';
import { ProblemSolution } from '../../models/glpk/problem-solution';
export declare abstract class IlpSolver {
    protected _solver$: Observable<GLPK>;
    protected static readonly k: number;
    protected static readonly K: number;
    private readonly _constraintCounter;
    private readonly _variableCounter;
    protected _allVariables: Set<string>;
    protected constructor(_solver$: Observable<GLPK>);
    protected applyConstraints(ilp: LP, constraints: ConstraintsWithNewVariables): void;
    protected combineCoefficients(variables: Array<Variable>): Array<Variable>;
    protected createVariablesFromPlaceIds(placeIds: Array<string>, coefficient: number): Array<Variable>;
    protected helperVariableName(prefix?: string): string;
    protected xAbsoluteOfSum(x: string, sum: Array<Variable>): ConstraintsWithNewVariables;
    protected xWhenAEqualsB(x: string, a: string | Array<string> | Array<Variable>, b: string | number): ConstraintsWithNewVariables;
    protected yWhenAGreaterEqualB(a: string, b: number): ConstraintsWithNewVariables;
    protected xWhenAGreaterEqualB(x: string, a: string | Array<string> | Array<Variable>, b: string | number): ConstraintsWithNewVariables;
    protected xWhenALessEqualB(x: string, a: string | Array<string> | Array<Variable>, b: string | number): ConstraintsWithNewVariables;
    protected xWhenAGreaterB(x: string, a: string | Array<string> | Array<Variable> | number, b: string | Array<string> | Array<Variable> | number): ConstraintsWithNewVariables;
    protected xWhenALessB(x: string, a: string | Array<string> | Array<Variable>, b: string | number): ConstraintsWithNewVariables;
    protected xAandB(x: string, a: string, b: string): ConstraintsWithNewVariables;
    protected xAorB(x: string, a: string, b: string): ConstraintsWithNewVariables;
    protected xNotA(x: string, a: string): ConstraintsWithNewVariables;
    private createOrCopyVariable;
    protected variable(name: string, coefficient?: number): Variable;
    protected equal(variables: Variable | Array<Variable>, value: number): ConstraintsWithNewVariables;
    protected greaterEqualThan(variables: Variable | Array<Variable>, lowerBound: number): ConstraintsWithNewVariables;
    protected lessEqualThan(variables: Variable | Array<Variable>, upperBound: number): ConstraintsWithNewVariables;
    protected sumEqualsZero(...variables: Array<Variable>): ConstraintsWithNewVariables;
    protected sumGreaterThan(variables: Array<Variable>, lowerBound: number): ConstraintsWithNewVariables;
    private constrain;
    private constraintName;
    protected solveILP(ilp: LP): Observable<ProblemSolution>;
    private formatVariableList;
}
