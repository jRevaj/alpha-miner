import { Place } from './place';
import { Transition } from './transition';
import { Arc } from './arc';
import { Observable, Subject } from 'rxjs';
import { NetUnionResult } from './net-union-result';
import { Marking } from './marking';
export declare class PetriNet {
    private _places;
    private _transitions;
    private _arcs;
    private _frequency;
    private _inputPlaces;
    private _outputPlaces;
    private _kill$;
    private _redraw$;
    private _placeCounter;
    private _transitionCounter;
    private _arcCounter;
    constructor();
    static createFromArcSubset(net: PetriNet, arcs: Array<Arc>): PetriNet;
    static netUnion(a: PetriNet, b: PetriNet): NetUnionResult;
    static fireTransitionInMarking(net: PetriNet, transitionId: string, marking: Marking): Marking;
    static getAllEnabledTransitions(net: PetriNet, marking: Marking): Array<Transition>;
    static isTransitionEnabledInMarking(net: PetriNet, transitionId: string, marking: Marking): boolean;
    private static determineInOut;
    getTransition(id: string): Transition | undefined;
    getTransitions(): Array<Transition>;
    getTransitionCount(): number;
    addTransition(transition: Transition): void;
    removeTransition(transition: Transition | string): void;
    getPlace(id: string): Place | undefined;
    getPlaces(): Array<Place>;
    getPlaceCount(): number;
    addPlace(place: Place): void;
    removePlace(place: Place | string): void;
    getArc(id: string): Arc | undefined;
    getArcs(): Array<Arc>;
    getArcCount(): number;
    addArc(arc: Arc): void;
    addArc(source: Transition, destination: Place, weight?: number): void;
    addArc(source: Place, destination: Transition, weight?: number): void;
    removeArc(arc: Arc | string): void;
    get frequency(): number | undefined;
    set frequency(value: number | undefined);
    get inputPlaces(): Set<string>;
    get outputPlaces(): Set<string>;
    getInitialMarking(): Marking;
    isEmpty(): boolean;
    clone(): PetriNet;
    destroy(): void;
    bindEvents(mouseMoved$: Subject<MouseEvent>, mouseUp$: Subject<MouseEvent>): void;
    redrawRequest$(): Observable<void>;
}
