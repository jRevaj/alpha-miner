import { Event } from './event';
export class PartialOrder {
    constructor() {
        this._events = new Map();
        this._initialEvents = new Set();
        this._finalEvents = new Set();
    }
    get initialEvents() {
        return this._initialEvents;
    }
    get finalEvents() {
        return this._finalEvents;
    }
    get events() {
        return Array.from(this._events.values());
    }
    getEvent(id) {
        return this._events.get(id);
    }
    addEvent(event) {
        if (this._events.has(event.id)) {
            throw new Error(`An event with id '${event.id}' already exists in this partial order!`);
        }
        this._events.set(event.id, event);
    }
    determineInitialAndFinalEvents() {
        this._initialEvents.clear();
        this._finalEvents.clear();
        for (const e of this._events.values()) {
            if (e.previousEvents.size === 0) {
                this._initialEvents.add(e);
            }
            if (e.nextEvents.size === 0) {
                this._finalEvents.add(e);
            }
        }
    }
    clone() {
        const result = new PartialOrder();
        for (const e of this._events.values()) {
            result.addEvent(new Event(e.id, e.label));
        }
        for (const e of this._events.values()) {
            const cloneE = result.getEvent(e.id);
            for (const nextE of e.nextEvents) {
                cloneE.addNextEvent(result.getEvent(nextE.id));
            }
        }
        result.determineInitialAndFinalEvents();
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGlhbC1vcmRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvbXBvbmVudHMvc3JjL2xpYi9tb2RlbHMvcG8vbW9kZWwvcGFydGlhbC1vcmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRTlCLE1BQU0sT0FBTyxZQUFZO0lBS3JCO1FBQ0ksSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLEdBQUcsRUFBaUIsQ0FBQztRQUN4QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksR0FBRyxFQUFTLENBQUM7UUFDdkMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLEdBQUcsRUFBUyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxJQUFJLGFBQWE7UUFDYixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDL0IsQ0FBQztJQUVELElBQUksV0FBVztRQUNYLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ04sT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRU0sUUFBUSxDQUFDLEVBQVU7UUFDdEIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRU0sUUFBUSxDQUFDLEtBQVk7UUFDeEIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsS0FBSyxDQUFDLEVBQUUseUNBQXlDLENBQUMsQ0FBQztTQUMzRjtRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVNLDhCQUE4QjtRQUNqQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDMUIsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyxDQUFDLGNBQWMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFO2dCQUM3QixJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM5QjtZQUNELElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFO2dCQUN6QixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM1QjtTQUNKO0lBQ0wsQ0FBQztJQUVNLEtBQUs7UUFDUixNQUFNLE1BQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2xDLEtBQUssTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNuQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDN0M7UUFDRCxLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDbkMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFVLENBQUM7WUFDOUMsS0FBSyxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsVUFBVSxFQUFFO2dCQUM5QixNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBVSxDQUFDLENBQUM7YUFDM0Q7U0FDSjtRQUNELE1BQU0sQ0FBQyw4QkFBOEIsRUFBRSxDQUFDO1FBQ3hDLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RXZlbnR9IGZyb20gJy4vZXZlbnQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBhcnRpYWxPcmRlciB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9ldmVudHM6IE1hcDxzdHJpbmcsIEV2ZW50PjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2luaXRpYWxFdmVudHM6IFNldDxFdmVudD47XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9maW5hbEV2ZW50czogU2V0PEV2ZW50PjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl9ldmVudHMgPSBuZXcgTWFwPHN0cmluZywgRXZlbnQ+KCk7XHJcbiAgICAgICAgdGhpcy5faW5pdGlhbEV2ZW50cyA9IG5ldyBTZXQ8RXZlbnQ+KCk7XHJcbiAgICAgICAgdGhpcy5fZmluYWxFdmVudHMgPSBuZXcgU2V0PEV2ZW50PigpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBpbml0aWFsRXZlbnRzKCk6IFNldDxFdmVudD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbml0aWFsRXZlbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBmaW5hbEV2ZW50cygpOiBTZXQ8RXZlbnQ+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZmluYWxFdmVudHM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGV2ZW50cygpOiBBcnJheTxFdmVudD4ge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuX2V2ZW50cy52YWx1ZXMoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEV2ZW50KGlkOiBzdHJpbmcpOiBFdmVudCB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50cy5nZXQoaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRFdmVudChldmVudDogRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5fZXZlbnRzLmhhcyhldmVudC5pZCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBbiBldmVudCB3aXRoIGlkICcke2V2ZW50LmlkfScgYWxyZWFkeSBleGlzdHMgaW4gdGhpcyBwYXJ0aWFsIG9yZGVyIWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9ldmVudHMuc2V0KGV2ZW50LmlkLCBldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRldGVybWluZUluaXRpYWxBbmRGaW5hbEV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLl9pbml0aWFsRXZlbnRzLmNsZWFyKCk7XHJcbiAgICAgICAgdGhpcy5fZmluYWxFdmVudHMuY2xlYXIoKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5fZXZlbnRzLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgIGlmIChlLnByZXZpb3VzRXZlbnRzLnNpemUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2luaXRpYWxFdmVudHMuYWRkKGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlLm5leHRFdmVudHMuc2l6ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmluYWxFdmVudHMuYWRkKGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbG9uZSgpOiBQYXJ0aWFsT3JkZXIge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBQYXJ0aWFsT3JkZXIoKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5fZXZlbnRzLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5hZGRFdmVudChuZXcgRXZlbnQoZS5pZCwgZS5sYWJlbCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5fZXZlbnRzLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNsb25lRSA9IHJlc3VsdC5nZXRFdmVudChlLmlkKSBhcyBFdmVudDtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBuZXh0RSBvZiBlLm5leHRFdmVudHMpIHtcclxuICAgICAgICAgICAgICAgIGNsb25lRS5hZGROZXh0RXZlbnQocmVzdWx0LmdldEV2ZW50KG5leHRFLmlkKSBhcyBFdmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzdWx0LmRldGVybWluZUluaXRpYWxBbmRGaW5hbEV2ZW50cygpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbn1cclxuIl19