import { Injectable } from '@angular/core';
import { Trace } from '../model/trace';
import { LogEvent } from '../model/logEvent';
import * as i0 from "@angular/core";
export class XesLogParserService {
    constructor() {
    }
    parse(text) {
        const parser = new DOMParser();
        const xml = parser.parseFromString(text, "text/xml");
        return this.parseTraces(xml.getElementsByTagName('trace'));
    }
    parseTraces(traceElements) {
        const result = [];
        for (let i = 0; i < traceElements.length; i++) {
            result.push(this.parseTrace(traceElements.item(i)));
        }
        return result;
    }
    parseTrace(element) {
        const trace = this.createTrace(element.querySelectorAll('trace > string'));
        const events = element.getElementsByTagName("event");
        for (let i = 0; i < events.length; i++) {
            trace.appendEvent(this.parseEvent(events.item(i)));
        }
        return trace;
    }
    createTrace(traceAttributes) {
        const trace = new Trace();
        const attributes = this.parseKeyValue(traceAttributes);
        this.setIfPresent('concept:name', attributes, name => {
            trace.name = name;
        });
        this.setIfPresent('description', attributes, description => {
            trace.description = description;
        });
        for (const key of attributes.keys()) {
            console.debug(`unknown xml attribute key '${key}'`, traceAttributes);
        }
        return trace;
    }
    parseEvent(element) {
        const stringAttributes = this.parseKeyValue(element.getElementsByTagName('string'));
        const name = this.getAndRemove('concept:name', stringAttributes);
        if (name === undefined) {
            console.debug(element);
            throw new Error(`Event name is not defined!`);
        }
        const event = new LogEvent(name);
        this.setIfPresent('org:resource', stringAttributes, resource => {
            event.resource = resource;
        });
        this.setIfPresent('lifecycle:transition', stringAttributes, lifecycle => {
            event.lifecycle = lifecycle;
        });
        for (const [key, value] of stringAttributes.entries()) {
            event.setAttribute(key, value);
        }
        const dateAttributes = this.parseKeyValue(element.getElementsByTagName('date'));
        this.setIfPresent('time:timestamp', dateAttributes, timestamp => {
            event.timestamp = new Date(timestamp);
        });
        for (const [key, value] of dateAttributes.entries()) {
            event.setAttribute(key, value);
        }
        return event;
    }
    parseKeyValue(attributes) {
        const result = new Map();
        for (let i = 0; i < attributes.length; i++) {
            const element = attributes.item(i);
            const elementAttributes = element.attributes;
            const valueAttribute = elementAttributes.getNamedItem('value');
            if (valueAttribute === null) {
                console.debug(`xml element has no attribute 'value'`, element);
                continue;
            }
            const value = valueAttribute.value;
            const keyAttribute = elementAttributes.getNamedItem('key');
            if (keyAttribute === null) {
                console.debug(`xml element has no attribute 'key'`, element);
                continue;
            }
            const key = keyAttribute.value;
            result.set(key, value);
        }
        return result;
    }
    getAndRemove(key, map) {
        const result = map.get(key);
        map.delete(key);
        return result;
    }
    setIfPresent(key, map, setter) {
        const value = this.getAndRemove(key, map);
        if (value !== undefined) {
            setter(value);
        }
    }
}
XesLogParserService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: XesLogParserService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
XesLogParserService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: XesLogParserService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: XesLogParserService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,