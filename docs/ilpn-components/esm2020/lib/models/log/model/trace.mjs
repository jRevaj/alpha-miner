export class Trace {
    constructor() {
        this.events = [];
    }
    get eventNames() {
        return this.events.map(e => e.name);
    }
    appendEvent(event) {
        this.events.push(event);
    }
    get(i) {
        return this.events[i].name;
    }
    set(i, value) {
        this.events[i].name = value;
    }
    length() {
        return this.events.length;
    }
    clone() {
        const clone = new Trace();
        clone.name = this.name;
        clone.description = this.description;
        clone.events = [...this.events];
        return clone;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb21wb25lbnRzL3NyYy9saWIvbW9kZWxzL2xvZy9tb2RlbC90cmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLE9BQU8sS0FBSztJQU1kO1FBSk8sV0FBTSxHQUFvQixFQUFFLENBQUM7SUFLcEMsQ0FBQztJQUVELElBQUksVUFBVTtRQUNWLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVNLFdBQVcsQ0FBQyxLQUFlO1FBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCxHQUFHLENBQUMsQ0FBUztRQUNULE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDL0IsQ0FBQztJQUVELEdBQUcsQ0FBQyxDQUFTLEVBQUUsS0FBYTtRQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUVELE1BQU07UUFDRixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzlCLENBQUM7SUFFRCxLQUFLO1FBQ0QsTUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUMxQixLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDdkIsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3JDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoQyxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xvZ0V2ZW50fSBmcm9tICcuL2xvZ0V2ZW50JztcclxuaW1wb3J0IHtFZGl0YWJsZVN0cmluZ1NlcXVlbmNlfSBmcm9tICcuLi8uLi8uLi91dGlsaXR5L3N0cmluZy1zZXF1ZW5jZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgVHJhY2UgaW1wbGVtZW50cyBFZGl0YWJsZVN0cmluZ1NlcXVlbmNlIHtcclxuXHJcbiAgICBwdWJsaWMgZXZlbnRzOiBBcnJheTxMb2dFdmVudD4gPSBbXTtcclxuICAgIHB1YmxpYyBuYW1lPzogc3RyaW5nO1xyXG4gICAgcHVibGljIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBldmVudE5hbWVzKCk6IEFycmF5PHN0cmluZz4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50cy5tYXAoZSA9PiBlLm5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhcHBlbmRFdmVudChldmVudDogTG9nRXZlbnQpIHtcclxuICAgICAgICB0aGlzLmV2ZW50cy5wdXNoKGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQoaTogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ldmVudHNbaV0ubmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXQoaTogbnVtYmVyLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5ldmVudHNbaV0ubmFtZSA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGxlbmd0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV2ZW50cy5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKTogVHJhY2Uge1xyXG4gICAgICAgIGNvbnN0IGNsb25lID0gbmV3IFRyYWNlKCk7XHJcbiAgICAgICAgY2xvbmUubmFtZSA9IHRoaXMubmFtZTtcclxuICAgICAgICBjbG9uZS5kZXNjcmlwdGlvbiA9IHRoaXMuZGVzY3JpcHRpb247XHJcbiAgICAgICAgY2xvbmUuZXZlbnRzID0gWy4uLnRoaXMuZXZlbnRzXTtcclxuICAgICAgICByZXR1cm4gY2xvbmU7XHJcbiAgICB9XHJcbn1cclxuIl19