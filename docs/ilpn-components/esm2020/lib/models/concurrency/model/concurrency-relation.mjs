import { Relabeler } from '../../../utility/relabeler';
import { OccurenceMatrixType } from '../../../algorithms/log/concurrency-oracle/occurrence-matrix';
export class ConcurrencyRelation {
    constructor(relabeler) {
        this._uniqueConcurrencyMatrix = {};
        this._wildcardConcurrencyMatrix = {};
        this._mixedConcurrencyMatrix = {};
        this._wildCardLabels = new Set();
        this._relabeler = relabeler.clone();
    }
    static noConcurrency() {
        return new ConcurrencyRelation(new Relabeler());
    }
    static fromOccurrenceMatrix(matrix, relabeler) {
        const result = new ConcurrencyRelation(relabeler);
        const keys = Array.from(matrix.keys);
        for (let i = 0; i < keys.length; i++) {
            const k1 = keys[i];
            for (let j = i + 1; j < keys.length; j++) {
                const k2 = keys[j];
                if (matrix.get(k1, k2) && matrix.get(k2, k1)) {
                    switch (matrix.type) {
                        case OccurenceMatrixType.UNIQUE:
                            result.setUniqueConcurrent(k1, k2, matrix.getOccurrenceFrequency(k1, k2), matrix.getOccurrenceFrequency(k2, k1));
                            break;
                        case OccurenceMatrixType.WILDCARD:
                            result.setWildcardConcurrent(k1, k2, matrix.getOccurrenceFrequency(k1, k2), matrix.getOccurrenceFrequency(k2, k1));
                            break;
                    }
                }
            }
        }
        return result;
    }
    isConcurrent(labelA, labelB) {
        const unique = this.read(this._uniqueConcurrencyMatrix, labelA, labelB);
        if (unique) {
            return true;
        }
        const wildcardA = this.getWildcard(labelA);
        const wildcardB = this.getWildcard(labelB);
        if (!wildcardA && !wildcardB) {
            return false;
        }
        else if (wildcardA && wildcardB) {
            return this.read(this._wildcardConcurrencyMatrix, wildcardA, wildcardB);
        }
        else if (wildcardA && !wildcardB) {
            return this.read(this._mixedConcurrencyMatrix, wildcardA, labelB);
        }
        else {
            return this.read(this._mixedConcurrencyMatrix, wildcardB, labelA);
        }
    }
    setUniqueConcurrent(uniqueLabelA, uniqueLabelB, value = true, frequencyBA) {
        if (typeof value === 'boolean') {
            this.set(this._uniqueConcurrencyMatrix, uniqueLabelA, uniqueLabelB, value);
            this.set(this._uniqueConcurrencyMatrix, uniqueLabelB, uniqueLabelA, value);
        }
        else {
            this.set(this._uniqueConcurrencyMatrix, uniqueLabelA, uniqueLabelB, value);
            this.set(this._uniqueConcurrencyMatrix, uniqueLabelB, uniqueLabelA, frequencyBA);
        }
    }
    setWildcardConcurrent(wildcardLabelA, wildcardLabelB, value = true, frequencyBA) {
        if (typeof value === 'boolean') {
            this.set(this._wildcardConcurrencyMatrix, wildcardLabelA, wildcardLabelB, value);
            this.set(this._wildcardConcurrencyMatrix, wildcardLabelB, wildcardLabelA, value);
        }
        else {
            this.set(this._wildcardConcurrencyMatrix, wildcardLabelA, wildcardLabelB, value);
            this.set(this._wildcardConcurrencyMatrix, wildcardLabelB, wildcardLabelA, frequencyBA);
        }
        this._wildCardLabels.add(wildcardLabelA);
        this._wildCardLabels.add(wildcardLabelB);
    }
    setMixedConcurrent(wildcardLabel, uniqueLabel, concurrency = true) {
        this.set(this._mixedConcurrencyMatrix, wildcardLabel, uniqueLabel, concurrency);
        this._wildCardLabels.add(wildcardLabel);
    }
    set(matrix, uniqueLabelA, uniqueLabelB, value = true) {
        const row = matrix[uniqueLabelA];
        if (row === undefined) {
            matrix[uniqueLabelA] = { [uniqueLabelB]: value };
            return;
        }
        row[uniqueLabelB] = value;
    }
    read(matrix, row, column) {
        const matrixRow = matrix[row];
        if (matrixRow === undefined) {
            return false;
        }
        return !!matrixRow[column];
    }
    getWildcard(label) {
        const undone = this.relabeler.undoLabel(label);
        if (this._wildCardLabels.has(undone)) {
            return undone;
        }
        return undefined;
    }
    get relabeler() {
        return this._relabeler;
    }
    cloneConcurrencyMatrices() {
        return {
            unique: this.cloneMatrix(this._uniqueConcurrencyMatrix),
            wildcard: this.cloneMatrix(this._wildcardConcurrencyMatrix),
            mixed: this.cloneMatrix(this._mixedConcurrencyMatrix)
        };
    }
    cloneMatrix(matrix) {
        const result = {};
        for (const row of Object.keys(matrix)) {
            for (const column of Object.keys(matrix[row])) {
                if (!matrix[row][column]) {
                    continue;
                }
                this.set(result, row, column, matrix[row][column]);
            }
        }
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,