import { Injectable } from '@angular/core';
import { AbstractParser } from '../../../utility/abstract-parser';
import * as i0 from "@angular/core";
export class ConcurrencySerialisationService {
    constructor() {
    }
    serialise(concurrency) {
        let result = `${AbstractParser.TYPE_BLOCK} concurrency\n`;
        const relabeler = concurrency.relabeler;
        const cachedUniqueLabels = new Map();
        const matrices = concurrency.cloneConcurrencyMatrices();
        this.iterateConcurrentEntries(matrices.unique, true, (labelA, labelB, fab, fba) => {
            const originalA = this.getOriginalLabel(labelA, cachedUniqueLabels, relabeler);
            const originalB = this.getOriginalLabel(labelB, cachedUniqueLabels, relabeler);
            result += this.formatConcurrencyEntry(this.formatUniqueLabel(originalA), this.formatUniqueLabel(originalB), fab, fba);
        });
        this.iterateConcurrentEntries(matrices.wildcard, true, (labelA, labelB, fab, fba) => {
            // TODO unmapping of wildcard labels might be needed
            result += this.formatConcurrencyEntry(labelA, labelB, fab, fba);
        });
        this.iterateConcurrentEntries(matrices.mixed, false, (wildcardLabel, uniqueLabel) => {
            // TODO unmapping of wildcard labels might be needed
            const uniqueOriginal = this.getOriginalLabel(uniqueLabel, cachedUniqueLabels, relabeler);
            result += this.formatConcurrencyEntry(wildcardLabel, this.formatUniqueLabel(uniqueOriginal));
        });
        return result;
    }
    iterateConcurrentEntries(matrix, symmetric, consumer) {
        if (!symmetric) {
            for (const labelA of Object.keys(matrix)) {
                for (const labelB of Object.keys(matrix[labelA])) {
                    this.processMatrixEntry(matrix, labelA, labelB, consumer);
                }
            }
        }
        else {
            const keys = Object.keys(matrix);
            for (let i = 0; i < keys.length; i++) {
                const labelA = keys[i];
                for (let j = i + 1; j < keys.length; j++) {
                    const labelB = keys[j];
                    this.processMatrixEntry(matrix, labelA, labelB, consumer);
                }
            }
        }
    }
    processMatrixEntry(matrix, labelA, labelB, consumer) {
        if (!matrix[labelA][labelB]) {
            return;
        }
        if (typeof matrix[labelA][labelB] === 'boolean') {
            consumer(labelA, labelB);
        }
        else {
            consumer(labelA, labelB, matrix[labelA][labelB], matrix[labelB][labelA]);
        }
    }
    getOriginalLabel(label, cachedUniqueLabels, relabeler) {
        const m = cachedUniqueLabels.get(label);
        if (m !== undefined) {
            return m;
        }
        const original = relabeler.getLabelMapping().get(label);
        if (original === undefined) {
            console.debug(relabeler);
            console.debug(label);
            throw new Error('Unique concurrency matrix contains an entry unknown to the relabeling function!');
        }
        const order = relabeler.getLabelOrder().get(original).findIndex(l => l === label);
        if (order === -1) {
            console.debug(relabeler);
            console.debug(label);
            throw new Error('Unique concurrency matrix contains an entry outside of the relabeling order of the relabeling function!');
        }
        cachedUniqueLabels.set(label, { original, order });
        return cachedUniqueLabels.get(label);
    }
    formatConcurrencyEntry(formattedLabelA, formattedLabelB, frequencyAB, frequencyBA) {
        if (frequencyAB === undefined && frequencyBA === undefined) {
            return `${formattedLabelA}${ConcurrencySerialisationService.PARALLEL_SYMBOL}${formattedLabelB}\n`;
        }
        else {
            return `${formattedLabelA}${ConcurrencySerialisationService.PARALLEL_SYMBOL}${formattedLabelB} #${frequencyAB} ${frequencyBA}\n`;
        }
    }
    formatUniqueLabel(label) {
        return `${label.original}[${label.order + 1}]`;
    }
}
ConcurrencySerialisationService.PARALLEL_SYMBOL = '∥';
ConcurrencySerialisationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ConcurrencySerialisationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ConcurrencySerialisationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ConcurrencySerialisationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: ConcurrencySerialisationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,