import { arraify } from '../../utility/arraify';
export class ConstraintsWithNewVariables {
    constructor(constraints, binaryVariables, integerVariables) {
        this._constraints = Array.isArray(constraints) ? constraints : [constraints];
        if (binaryVariables !== undefined) {
            this._binaryVariables = arraify(binaryVariables);
        }
        else {
            this._binaryVariables = [];
        }
        if (integerVariables !== undefined) {
            this._integerVariables = arraify(integerVariables);
        }
        else {
            this._integerVariables = [];
        }
    }
    get binaryVariables() {
        return this._binaryVariables;
    }
    get integerVariables() {
        return this._integerVariables;
    }
    get constraints() {
        return this._constraints;
    }
    static combine(...constraints) {
        return new ConstraintsWithNewVariables(constraints.reduce((a, v) => {
            a.push(...v.constraints);
            return a;
        }, []), constraints.reduce((a, v) => {
            a.push(...v.binaryVariables);
            return a;
        }, []), constraints.reduce((a, v) => {
            a.push(...v.integerVariables);
            return a;
        }, []));
    }
    static combineAndIntroduceVariables(newBinaryVariables, newIntegerVariables, ...constraints) {
        return ConstraintsWithNewVariables.combine(new ConstraintsWithNewVariables([], newBinaryVariables, newIntegerVariables), ...constraints);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RyYWludHMtd2l0aC1uZXctdmFyaWFibGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29tcG9uZW50cy9zcmMvbGliL21vZGVscy9nbHBrL2NvbnN0cmFpbnRzLXdpdGgtbmV3LXZhcmlhYmxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFHOUMsTUFBTSxPQUFPLDJCQUEyQjtJQU1wQyxZQUFZLFdBQXlDLEVBQ3pDLGVBQXdDLEVBQ3hDLGdCQUF5QztRQUNqRCxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM3RSxJQUFJLGVBQWUsS0FBSyxTQUFTLEVBQUU7WUFDL0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUNwRDthQUFNO1lBQ0gsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztTQUM5QjtRQUNELElBQUksZ0JBQWdCLEtBQUssU0FBUyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUN0RDthQUFNO1lBQ0gsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztTQUMvQjtJQUNMLENBQUM7SUFFRCxJQUFJLGVBQWU7UUFDZixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUNqQyxDQUFDO0lBRUQsSUFBSSxnQkFBZ0I7UUFDaEIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQUksV0FBVztRQUNYLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBRU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLFdBQStDO1FBQ3BFLE9BQU8sSUFBSSwyQkFBMkIsQ0FDbEMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1lBQ3hCLE9BQU8sQ0FBQyxDQUFDO1FBQ2IsQ0FBQyxFQUFFLEVBQXNCLENBQUMsRUFDMUIsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFBO1lBQzVCLE9BQU8sQ0FBQyxDQUFDO1FBQ2IsQ0FBQyxFQUFFLEVBQW1CLENBQUMsRUFDdkIsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUE7WUFDN0IsT0FBTyxDQUFDLENBQUM7UUFDYixDQUFDLEVBQUUsRUFBbUIsQ0FBQyxDQUMxQixDQUFDO0lBQ04sQ0FBQztJQUVNLE1BQU0sQ0FBQyw0QkFBNEIsQ0FBQyxrQkFBMkMsRUFDM0MsbUJBQTRDLEVBQzVDLEdBQUcsV0FBK0M7UUFDekYsT0FBTywyQkFBMkIsQ0FBQyxPQUFPLENBQ3RDLElBQUksMkJBQTJCLENBQUMsRUFBRSxFQUFFLGtCQUFrQixFQUFFLG1CQUFtQixDQUFDLEVBQzVFLEdBQUcsV0FBVyxDQUNqQixDQUFBO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdWJqZWN0VG99IGZyb20gJy4vc3ViamVjdC10byc7XHJcbmltcG9ydCB7YXJyYWlmeX0gZnJvbSAnLi4vLi4vdXRpbGl0eS9hcnJhaWZ5JztcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgQ29uc3RyYWludHNXaXRoTmV3VmFyaWFibGVzIHtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9iaW5hcnlWYXJpYWJsZXM6IEFycmF5PHN0cmluZz47XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9pbnRlZ2VyVmFyaWFibGVzOiBBcnJheTxzdHJpbmc+O1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY29uc3RyYWludHM6IEFycmF5PFN1YmplY3RUbz47XHJcblxyXG4gICAgY29uc3RydWN0b3IoY29uc3RyYWludHM6IFN1YmplY3RUbyB8IEFycmF5PFN1YmplY3RUbz4sXHJcbiAgICAgICAgICAgICAgICBiaW5hcnlWYXJpYWJsZXM/OiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+LFxyXG4gICAgICAgICAgICAgICAgaW50ZWdlclZhcmlhYmxlcz86IHN0cmluZyB8IEFycmF5PHN0cmluZz4pIHtcclxuICAgICAgICB0aGlzLl9jb25zdHJhaW50cyA9IEFycmF5LmlzQXJyYXkoY29uc3RyYWludHMpID8gY29uc3RyYWludHMgOiBbY29uc3RyYWludHNdO1xyXG4gICAgICAgIGlmIChiaW5hcnlWYXJpYWJsZXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9iaW5hcnlWYXJpYWJsZXMgPSBhcnJhaWZ5KGJpbmFyeVZhcmlhYmxlcyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fYmluYXJ5VmFyaWFibGVzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpbnRlZ2VyVmFyaWFibGVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5faW50ZWdlclZhcmlhYmxlcyA9IGFycmFpZnkoaW50ZWdlclZhcmlhYmxlcyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5faW50ZWdlclZhcmlhYmxlcyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQgYmluYXJ5VmFyaWFibGVzKCk6IEFycmF5PHN0cmluZz4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5hcnlWYXJpYWJsZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGludGVnZXJWYXJpYWJsZXMoKTogQXJyYXk8c3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludGVnZXJWYXJpYWJsZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGNvbnN0cmFpbnRzKCk6IEFycmF5PFN1YmplY3RUbz4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb25zdHJhaW50cztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGNvbWJpbmUoLi4uY29uc3RyYWludHM6IEFycmF5PENvbnN0cmFpbnRzV2l0aE5ld1ZhcmlhYmxlcz4pOiBDb25zdHJhaW50c1dpdGhOZXdWYXJpYWJsZXMge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ29uc3RyYWludHNXaXRoTmV3VmFyaWFibGVzKFxyXG4gICAgICAgICAgICBjb25zdHJhaW50cy5yZWR1Y2UoKGEsIHYpID0+IHtcclxuICAgICAgICAgICAgICAgIGEucHVzaCguLi52LmNvbnN0cmFpbnRzKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICAgICAgIH0sIFtdIGFzIEFycmF5PFN1YmplY3RUbz4pLFxyXG4gICAgICAgICAgICBjb25zdHJhaW50cy5yZWR1Y2UoKGEsIHYpID0+IHtcclxuICAgICAgICAgICAgICAgIGEucHVzaCguLi52LmJpbmFyeVZhcmlhYmxlcylcclxuICAgICAgICAgICAgICAgIHJldHVybiBhO1xyXG4gICAgICAgICAgICB9LCBbXSBhcyBBcnJheTxzdHJpbmc+KSxcclxuICAgICAgICAgICAgY29uc3RyYWludHMucmVkdWNlKChhLCB2KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhLnB1c2goLi4udi5pbnRlZ2VyVmFyaWFibGVzKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICAgICAgIH0sIFtdIGFzIEFycmF5PHN0cmluZz4pXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGNvbWJpbmVBbmRJbnRyb2R1Y2VWYXJpYWJsZXMobmV3QmluYXJ5VmFyaWFibGVzPzogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJbnRlZ2VyVmFyaWFibGVzPzogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5jb25zdHJhaW50czogQXJyYXk8Q29uc3RyYWludHNXaXRoTmV3VmFyaWFibGVzPik6IENvbnN0cmFpbnRzV2l0aE5ld1ZhcmlhYmxlcyB7XHJcbiAgICAgICAgcmV0dXJuIENvbnN0cmFpbnRzV2l0aE5ld1ZhcmlhYmxlcy5jb21iaW5lKFxyXG4gICAgICAgICAgICBuZXcgQ29uc3RyYWludHNXaXRoTmV3VmFyaWFibGVzKFtdLCBuZXdCaW5hcnlWYXJpYWJsZXMsIG5ld0ludGVnZXJWYXJpYWJsZXMpLFxyXG4gICAgICAgICAgICAuLi5jb25zdHJhaW50c1xyXG4gICAgICAgIClcclxuICAgIH1cclxufVxyXG4iXX0=