import { Place } from './place';
import { Transition } from './transition';
import { Arc } from './arc';
import { Subject } from 'rxjs';
import { createUniqueString, IncrementingCounter } from '../../../utility/incrementing-counter';
import { getById } from '../../../utility/get-by-id';
import { Marking } from './marking';
export class PetriNet {
    constructor() {
        this._placeCounter = new IncrementingCounter();
        this._transitionCounter = new IncrementingCounter();
        this._arcCounter = new IncrementingCounter();
        this._places = new Map();
        this._transitions = new Map();
        this._arcs = new Map();
        this._kill$ = new Subject();
        this._redraw$ = new Subject();
        this._inputPlaces = new Set();
        this._outputPlaces = new Set();
    }
    static createFromArcSubset(net, arcs) {
        const result = new PetriNet();
        net.getPlaces().forEach(p => {
            result.addPlace(new Place(p.marking, p.x, p.y, p.id));
        });
        net.getTransitions().forEach(t => {
            result.addTransition(new Transition(t.label, t.x, t.y, t.id));
        });
        arcs.forEach(a => {
            let source;
            let destination;
            if (a.source instanceof Place) {
                source = result.getPlace(a.sourceId);
                destination = result.getTransition(a.destinationId);
            }
            else {
                source = result.getTransition(a.sourceId);
                destination = result.getPlace(a.destinationId);
            }
            result.addArc(new Arc(a.getId(), source, destination, a.weight));
        });
        return result;
    }
    static netUnion(a, b) {
        const result = a.clone();
        const counter = new IncrementingCounter();
        const placeMap = new Map();
        const transitionMap = new Map();
        b.getPlaces().forEach(p => {
            let mappedId = p.getId();
            while (result.getPlace(mappedId) !== undefined) {
                mappedId = p.getId() + counter.next();
            }
            placeMap.set(p.getId(), mappedId);
            result.addPlace(new Place(p.marking, p.x, p.y, mappedId));
        });
        b.getTransitions().forEach(t => {
            let mappedId = t.getId();
            while (result.getTransition(mappedId) !== undefined) {
                mappedId = t.getId() + counter.next();
            }
            transitionMap.set(t.getId(), mappedId);
            result.addTransition(new Transition(t.label, t.x, t.y, mappedId));
        });
        b.getArcs().forEach(arc => {
            let arcId = arc.getId();
            while (result.getArc(arcId) !== undefined) {
                arcId = arc.getId() + counter.next();
            }
            if (arc.source instanceof Place) {
                result.addArc(new Arc(arcId, result.getPlace(placeMap.get(arc.sourceId)), result.getTransition(transitionMap.get(arc.destinationId)), arc.weight));
            }
            else {
                result.addArc(new Arc(arcId, result.getTransition(transitionMap.get(arc.sourceId)), result.getPlace(placeMap.get(arc.destinationId)), arc.weight));
            }
        });
        const inputPlacesB = new Set(result._inputPlaces);
        const outputPlacesB = new Set(result._outputPlaces);
        a.inputPlaces.forEach(p => {
            inputPlacesB.delete(p);
        });
        a.outputPlaces.forEach(p => {
            outputPlacesB.delete(p);
        });
        return { net: result, inputPlacesB, outputPlacesB };
    }
    static fireTransitionInMarking(net, transitionId, marking) {
        const transition = net.getTransition(transitionId);
        if (transition === undefined) {
            throw new Error(`The given net does not contain a transition with id '${transitionId}'`);
        }
        const newMarking = new Marking(marking);
        for (const inArc of transition.ingoingArcs) {
            const m = marking.get(inArc.sourceId);
            if (m === undefined) {
                throw new Error(`The transition with id '${transitionId}' has an incoming arc from a place with id '${inArc.sourceId}' but no such place is defined in the provided marking!`);
            }
            if (m - inArc.weight < 0) {
                throw new Error(`The transition with id '${transitionId}' is not enabled in the provided marking! The place with id '${inArc.sourceId}' contains ${m} tokens, but the arc weight is ${inArc.weight}.`);
            }
            newMarking.set(inArc.sourceId, m - inArc.weight);
        }
        for (const outArc of transition.outgoingArcs) {
            const m = marking.get(outArc.destinationId);
            if (m === undefined) {
                throw new Error(`The transition with id '${transitionId}' has an outgoing arc to a place with id '${outArc.destinationId}' but no such place is defined in the provided marking!`);
            }
            newMarking.set(outArc.destinationId, m + outArc.weight);
        }
        return newMarking;
    }
    static getAllEnabledTransitions(net, marking) {
        return net.getTransitions().filter(t => PetriNet.isTransitionEnabledInMarking(net, t.id, marking));
    }
    static isTransitionEnabledInMarking(net, transitionId, marking) {
        const transition = net.getTransition(transitionId);
        if (transition === undefined) {
            throw new Error(`The given net does not contain a transition with id '${transitionId}'`);
        }
        for (const inArc of transition.ingoingArcs) {
            const m = marking.get(inArc.sourceId);
            if (m === undefined) {
                throw new Error(`The transition with id '${transitionId}' has an incoming arc from a place with id '${inArc.sourceId}' but no such place is defined in the provided marking!`);
            }
            if (m - inArc.weight < 0) {
                return false;
            }
        }
        return true;
    }
    static determineInOut(p, input, output) {
        if (p.ingoingArcs.length === 0) {
            input.add(p.getId());
        }
        if (p.outgoingArcs.length === 0) {
            output.add(p.getId());
        }
    }
    getTransition(id) {
        return this._transitions.get(id);
    }
    getTransitions() {
        return Array.from(this._transitions.values());
    }
    getTransitionCount() {
        return this._transitions.size;
    }
    addTransition(transition) {
        if (transition.id === undefined) {
            transition.id = createUniqueString('t', this._transitions, this._transitionCounter);
        }
        this._transitions.set(transition.id, transition);
    }
    removeTransition(transition) {
        const t = getById(this._transitions, transition);
        if (t === undefined) {
            return;
        }
        transition = t;
        this._transitions.delete(transition.getId());
        transition.outgoingArcs.forEach(a => {
            this.removeArc(a);
        });
        transition.ingoingArcs.forEach(a => {
            this.removeArc(a);
        });
    }
    getPlace(id) {
        return this._places.get(id);
    }
    getPlaces() {
        return Array.from(this._places.values());
    }
    getPlaceCount() {
        return this._places.size;
    }
    addPlace(place) {
        if (place.id === undefined) {
            place.id = createUniqueString('p', this._places, this._placeCounter);
        }
        this._places.set(place.id, place);
        this._inputPlaces.add(place.id);
        this._outputPlaces.add(place.id);
    }
    removePlace(place) {
        const p = getById(this._places, place);
        if (p === undefined) {
            return;
        }
        place = p;
        this._places.delete(place.getId());
        place.outgoingArcs.forEach(a => {
            this.removeArc(a);
        });
        place.ingoingArcs.forEach(a => {
            this.removeArc(a);
        });
        this._inputPlaces.delete(place.getId());
        this._outputPlaces.delete(place.getId());
    }
    getArc(id) {
        return this._arcs.get(id);
    }
    getArcs() {
        return Array.from(this._arcs.values());
    }
    getArcCount() {
        return this._arcs.size;
    }
    addArc(arcOrSource, destination, weight = 1) {
        if (arcOrSource instanceof Arc) {
            this._arcs.set(arcOrSource.getId(), arcOrSource);
            if (arcOrSource.source instanceof Place) {
                this._outputPlaces.delete(arcOrSource.sourceId);
            }
            else if (arcOrSource.destination instanceof Place) {
                this._inputPlaces.delete(arcOrSource.destinationId);
            }
        }
        else {
            this.addArc(new Arc(createUniqueString('a', this._arcs, this._arcCounter), arcOrSource, destination, weight));
        }
    }
    removeArc(arc) {
        const a = getById(this._arcs, arc);
        if (a === undefined) {
            return;
        }
        arc = a;
        this._arcs.delete(arc.getId());
        arc.source.removeArc(arc);
        arc.destination.removeArc(arc);
        if (arc.source instanceof Place && arc.source.outgoingArcs.length === 0) {
            this._outputPlaces.add(arc.sourceId);
        }
        else if (arc.destination instanceof Place && arc.destination.ingoingArcs.length === 0) {
            this._inputPlaces.add(arc.destinationId);
        }
    }
    get frequency() {
        return this._frequency;
    }
    set frequency(value) {
        this._frequency = value;
    }
    get inputPlaces() {
        return this._inputPlaces;
    }
    get outputPlaces() {
        return this._outputPlaces;
    }
    getInputPlaces() {
        return this.getPlacesById(this._inputPlaces);
    }
    getOutputPlaces() {
        return this.getPlacesById(this._outputPlaces);
    }
    getInitialMarking() {
        const m = new Marking({});
        this.getPlaces().forEach(p => {
            m.set(p.id, p.marking);
        });
        return m;
    }
    isEmpty() {
        return this._places.size === 0 && this._transitions.size === 0;
    }
    clone() {
        return PetriNet.createFromArcSubset(this, this.getArcs());
    }
    destroy() {
        if (!this._kill$.closed) {
            this._kill$.next();
            this._kill$.complete();
        }
        this._redraw$.complete();
    }
    bindEvents(mouseMoved$, mouseUp$) {
        this._places.forEach((v, k) => v.bindEvents(mouseMoved$, mouseUp$, this._kill$.asObservable(), this._redraw$));
        this._transitions.forEach((v, k) => v.bindEvents(mouseMoved$, mouseUp$, this._kill$.asObservable(), this._redraw$));
        this._arcs.forEach((v, k) => v.bindEvents(mouseMoved$, mouseUp$, this._kill$.asObservable(), this._redraw$));
    }
    redrawRequest$() {
        return this._redraw$.asObservable();
    }
    getPlacesById(ids) {
        const r = [];
        for (const id of ids) {
            const p = this.getPlace(id);
            if (p === undefined) {
                throw new Error(`Place with id '${id}' is not present in the net!`);
            }
            r.push(p);
        }
        return r;
    }
}
//# sourceMappingURL=data:application/json;base64,