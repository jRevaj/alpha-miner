import { takeUntil } from 'rxjs';
import { Identifiable } from '../../../utility/get-by-id';
export class IdPoint extends Identifiable {
    constructor(x, y, id) {
        super(id);
        this._dragging = false;
        this._x = x;
        this._y = y;
        this._preDragPosition = { x, y };
    }
    get x() {
        return this._x;
    }
    set x(value) {
        this._x = value;
    }
    get y() {
        return this._y;
    }
    set y(value) {
        this._y = value;
    }
    get center() {
        return { x: this.x, y: this.y };
    }
    bindEvents(mouseMoved$, mouseUp$, kill$, redraw$) {
        mouseMoved$.asObservable().pipe(takeUntil(kill$)).subscribe(e => this.processMouseMoved(e));
        mouseUp$.asObservable().pipe(takeUntil(kill$)).subscribe(() => this.processMouseUp());
        this._redraw$ = redraw$;
    }
    processMouseDown(event) {
        if (this._element === undefined) {
            return;
        }
        event.stopPropagation();
        this._dragging = true;
        this._preDragPosition = { x: this.x, y: this.y };
        this._svgOffset = this.svgOffset();
        this._lastPoint = { x: event.x, y: event.y };
    }
    processMouseUp() {
        if (this._element === undefined || !this._dragging) {
            return;
        }
        this._dragging = false;
        this._lastPoint = undefined;
        this.x = this._preDragPosition.x;
        this.y = this._preDragPosition.y;
        this.updateSVG();
        this.redraw();
    }
    processMouseMoved(event) {
        if (!this._dragging || this._element === undefined || this._lastPoint === undefined) {
            return;
        }
        this.y += event.y - this._lastPoint.y;
        this._lastPoint.x = event.x;
        this._lastPoint.y = event.y;
        this.updateSVG();
        if (this._layerNodes === undefined || this._layerIndex === undefined) {
            this.redraw();
            return;
        }
        const step = Math.sign(this.y - this._preDragPosition.y);
        if (step === 0) {
            this.redraw();
            return;
        }
        const neighbourIndex = this._layerIndex + step;
        if (neighbourIndex < 0 || neighbourIndex >= this._layerNodes.length) {
            this.redraw();
            return;
        }
        if ((step < 0 && this.y < this._layerNodes[neighbourIndex].y)
            || (step > 0 && this.y > this._layerNodes[neighbourIndex].y)) {
            this.swap(neighbourIndex);
        }
        this.redraw();
    }
    registerElement(element) {
        this._element = element;
        this._element.onmousedown = (event) => {
            this.processMouseDown(event);
        };
    }
    registerLayer(layer, index) {
        this._layerNodes = layer;
        this._layerIndex = index;
    }
    svgX() {
        return 'x';
    }
    svgY() {
        return 'y';
    }
    updateSVG(offset) {
        if (this._element === undefined || (this._svgOffset === undefined && offset === undefined)) {
            return;
        }
        const off = offset ?? this._svgOffset;
        this._element.setAttribute(this.svgX(), '' + (this.x + off.x));
        this._element.setAttribute(this.svgY(), '' + (this.y + off.y));
    }
    svgOffset() {
        if (this._element === undefined) {
            throw new Error('Element not set. SVG offset cannot be computed!');
        }
        return {
            x: parseInt(this._element.getAttribute(this.svgX()) ?? '0') - this.x,
            y: parseInt(this._element.getAttribute(this.svgY()) ?? '0') - this.y
        };
    }
    swap(newIndex) {
        if (this._layerNodes === undefined || this._layerIndex === undefined) {
            return;
        }
        const neighbour = this._layerNodes[newIndex];
        const neighbourPos = { x: neighbour.x, y: neighbour.y };
        const offset = neighbour.svgOffset();
        neighbour.x = this._preDragPosition.x;
        neighbour.y = this._preDragPosition.y;
        this._preDragPosition = neighbourPos;
        this._layerNodes[this._layerIndex] = neighbour;
        this._layerNodes[newIndex] = this;
        neighbour._layerIndex = this._layerIndex;
        this._layerIndex = newIndex;
        neighbour.updateSVG(offset);
    }
    redraw() {
        if (this._redraw$ !== undefined) {
            this._redraw$.next();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,