export class Marking {
    constructor(marking) {
        this._marking = Object.assign({}, marking instanceof Marking ? marking._marking : marking);
    }
    get(placeId) {
        return this._marking[placeId];
    }
    set(placeId, tokens) {
        this._marking[placeId] = tokens;
    }
    equals(marking) {
        const [myKeys, otherKeys] = this.getComparisonKeys(marking);
        if (myKeys.length !== otherKeys.size) {
            return false;
        }
        for (const key of myKeys) {
            if (this.get(key) !== marking.get(key)) {
                return false;
            }
            otherKeys.delete(key);
        }
        return otherKeys.size === 0;
    }
    isGreaterThan(marking) {
        const [myKeys, otherKeys] = this.getComparisonKeys(marking);
        if (myKeys.length !== otherKeys.size) {
            return false;
        }
        let isGreater = false;
        for (const key of myKeys) {
            const thisM = this.get(key);
            const otherM = marking.get(key);
            if (thisM === undefined || otherM === undefined) {
                return false;
            }
            if (thisM < otherM) {
                return false;
            }
            else if (thisM > otherM) {
                isGreater = true;
            }
            otherKeys.delete(key);
        }
        return otherKeys.size === 0 && isGreater;
    }
    introduceOmegas(smallerMarking) {
        if (!this.isGreaterThan(smallerMarking)) {
            return;
        }
        const myKeys = Object.keys(this._marking);
        for (const key of myKeys) {
            if (this.get(key) > smallerMarking.get(key)) {
                this.set(key, Number.POSITIVE_INFINITY);
            }
        }
    }
    getKeys() {
        return Object.keys(this._marking);
    }
    getComparisonKeys(marking) {
        const myKeys = this.getKeys();
        const otherKeys = new Set(marking.getKeys());
        return [myKeys, otherKeys];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvbXBvbmVudHMvc3JjL2xpYi9tb2RlbHMvcG4vbW9kZWwvbWFya2luZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sT0FBTztJQUdoQixZQUFZLE9BQTBDO1FBQ2xELElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsT0FBTyxZQUFZLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0YsQ0FBQztJQUVNLEdBQUcsQ0FBQyxPQUFlO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRU0sR0FBRyxDQUFDLE9BQWUsRUFBRSxNQUFjO1FBQ3RDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsTUFBTSxDQUFDO0lBQ3BDLENBQUM7SUFFTSxNQUFNLENBQUMsT0FBZ0I7UUFDMUIsTUFBTSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFNUQsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLFNBQVMsQ0FBQyxJQUFJLEVBQUU7WUFDbEMsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxLQUFLLE1BQU0sR0FBRyxJQUFJLE1BQU0sRUFBRTtZQUN0QixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDcEMsT0FBTyxLQUFLLENBQUM7YUFDaEI7WUFDRCxTQUFTLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3pCO1FBRUQsT0FBTyxTQUFTLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRU0sYUFBYSxDQUFDLE9BQWdCO1FBQ2pDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTVELElBQUksTUFBTSxDQUFDLE1BQU0sS0FBSyxTQUFTLENBQUMsSUFBSSxFQUFFO1lBQ2xDLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsSUFBSSxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFO1lBQ3RCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDNUIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNoQyxJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtnQkFDN0MsT0FBTyxLQUFLLENBQUM7YUFDaEI7WUFDRCxJQUFJLEtBQUssR0FBRyxNQUFNLEVBQUU7Z0JBQ2hCLE9BQU8sS0FBSyxDQUFDO2FBQ2hCO2lCQUFNLElBQUksS0FBSyxHQUFHLE1BQU0sRUFBRTtnQkFDdkIsU0FBUyxHQUFHLElBQUksQ0FBQzthQUNwQjtZQUNELFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDekI7UUFFRCxPQUFPLFNBQVMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxJQUFJLFNBQVMsQ0FBQztJQUM3QyxDQUFDO0lBRU0sZUFBZSxDQUFDLGNBQXVCO1FBQzFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQ3JDLE9BQU87U0FDVjtRQUNELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFDLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFO1lBQ3RCLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUUsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBRSxFQUFFO2dCQUMzQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQzthQUMzQztTQUNKO0lBQ0wsQ0FBQztJQUVNLE9BQU87UUFDVixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxPQUFnQjtRQUN0QyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDOUIsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDN0MsT0FBTyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMvQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgTWFya2luZyB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9tYXJraW5nOiB7IFtwbGFjZUlkOiBzdHJpbmddOiBudW1iZXIgfTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihtYXJraW5nOiB7IFtwOiBzdHJpbmddOiBudW1iZXIgfSB8IE1hcmtpbmcpIHtcclxuICAgICAgICB0aGlzLl9tYXJraW5nID0gT2JqZWN0LmFzc2lnbih7fSwgbWFya2luZyBpbnN0YW5jZW9mIE1hcmtpbmcgPyBtYXJraW5nLl9tYXJraW5nIDogbWFya2luZyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldChwbGFjZUlkOiBzdHJpbmcpOiBudW1iZXIgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXJraW5nW3BsYWNlSWRdO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXQocGxhY2VJZDogc3RyaW5nLCB0b2tlbnM6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuX21hcmtpbmdbcGxhY2VJZF0gPSB0b2tlbnM7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGVxdWFscyhtYXJraW5nOiBNYXJraW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgW215S2V5cywgb3RoZXJLZXlzXSA9IHRoaXMuZ2V0Q29tcGFyaXNvbktleXMobWFya2luZyk7XHJcblxyXG4gICAgICAgIGlmIChteUtleXMubGVuZ3RoICE9PSBvdGhlcktleXMuc2l6ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBteUtleXMpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZ2V0KGtleSkgIT09IG1hcmtpbmcuZ2V0KGtleSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvdGhlcktleXMuZGVsZXRlKGtleSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb3RoZXJLZXlzLnNpemUgPT09IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzR3JlYXRlclRoYW4obWFya2luZzogTWFya2luZyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IFtteUtleXMsIG90aGVyS2V5c10gPSB0aGlzLmdldENvbXBhcmlzb25LZXlzKG1hcmtpbmcpO1xyXG5cclxuICAgICAgICBpZiAobXlLZXlzLmxlbmd0aCAhPT0gb3RoZXJLZXlzLnNpemUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGlzR3JlYXRlciA9IGZhbHNlO1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIG15S2V5cykge1xyXG4gICAgICAgICAgICBjb25zdCB0aGlzTSA9IHRoaXMuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG90aGVyTSA9IG1hcmtpbmcuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzTSA9PT0gdW5kZWZpbmVkIHx8IG90aGVyTSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXNNIDwgb3RoZXJNKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpc00gPiBvdGhlck0pIHtcclxuICAgICAgICAgICAgICAgIGlzR3JlYXRlciA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3RoZXJLZXlzLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG90aGVyS2V5cy5zaXplID09PSAwICYmIGlzR3JlYXRlcjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaW50cm9kdWNlT21lZ2FzKHNtYWxsZXJNYXJraW5nOiBNYXJraW5nKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzR3JlYXRlclRoYW4oc21hbGxlck1hcmtpbmcpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbXlLZXlzID0gT2JqZWN0LmtleXModGhpcy5fbWFya2luZyk7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgbXlLZXlzKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdldChrZXkpISA+IHNtYWxsZXJNYXJraW5nLmdldChrZXkpISkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRLZXlzKCk6IEFycmF5PHN0cmluZz4ge1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl9tYXJraW5nKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldENvbXBhcmlzb25LZXlzKG1hcmtpbmc6IE1hcmtpbmcpOiBbQXJyYXk8c3RyaW5nPiwgU2V0PHN0cmluZz5dIHtcclxuICAgICAgICBjb25zdCBteUtleXMgPSB0aGlzLmdldEtleXMoKTtcclxuICAgICAgICBjb25zdCBvdGhlcktleXMgPSBuZXcgU2V0KG1hcmtpbmcuZ2V0S2V5cygpKTtcclxuICAgICAgICByZXR1cm4gW215S2V5cywgb3RoZXJLZXlzXTtcclxuICAgIH1cclxufVxyXG4iXX0=