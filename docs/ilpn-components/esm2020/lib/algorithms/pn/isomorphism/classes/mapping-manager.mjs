import { MappingCounter } from './mapping-counter';
export class MappingManager {
    constructor(possibleMappings) {
        this._mappingCounters = [];
        for (const [id, mappableIds] of possibleMappings.entries()) {
            this._mappingCounters.push(new MappingCounter(id, mappableIds.size - 1));
        }
        this._mappingOrder = new Map(this._mappingCounters.map(choice => [choice.mappedId, Array.from(possibleMappings.get(choice.mappedId))]));
    }
    getCurrentMapping() {
        return new Map(this._mappingCounters.map(choice => [choice.mappedId, this._mappingOrder.get(choice.mappedId)[choice.current()]]));
    }
    /**
     * Increments the current mapping to the next possibility.
     *
     * @returns `true` if the final mapping was passed. `false` otherwise.
     */
    moveToNextMapping() {
        let incrementedIndex = 0;
        while (incrementedIndex < this._mappingCounters.length) {
            const carry = this._mappingCounters[incrementedIndex].isLastOption();
            this._mappingCounters[incrementedIndex].next();
            if (carry) {
                incrementedIndex++;
            }
            else {
                break;
            }
        }
        return incrementedIndex === this._mappingCounters.length;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwcGluZy1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29tcG9uZW50cy9zcmMvbGliL2FsZ29yaXRobXMvcG4vaXNvbW9ycGhpc20vY2xhc3Nlcy9tYXBwaW5nLW1hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBRWpELE1BQU0sT0FBTyxjQUFjO0lBS3ZCLFlBQVksZ0JBQXdDO1FBQ2hELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7UUFDM0IsS0FBSyxNQUFNLENBQUMsRUFBRSxFQUFFLFdBQVcsQ0FBQyxJQUFJLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3hELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxjQUFjLENBQUMsRUFBRSxFQUFFLFdBQVcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUMzRTtRQUVELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxHQUFHLENBQXdCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkssQ0FBQztJQUVNLGlCQUFpQjtRQUNwQixPQUFPLElBQUksR0FBRyxDQUFpQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2SixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLGlCQUFpQjtRQUNwQixJQUFJLGdCQUFnQixHQUFHLENBQUMsQ0FBQztRQUN6QixPQUFPLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUU7WUFDcEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDckUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDL0MsSUFBSSxLQUFLLEVBQUU7Z0JBQ1AsZ0JBQWdCLEVBQUUsQ0FBQzthQUN0QjtpQkFBTTtnQkFDSCxNQUFNO2FBQ1Q7U0FDSjtRQUNELE9BQU8sZ0JBQWdCLEtBQUssSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztJQUM3RCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01hcFNldH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbGl0eS9tYXAtc2V0JztcclxuaW1wb3J0IHtNYXBwaW5nQ291bnRlcn0gZnJvbSAnLi9tYXBwaW5nLWNvdW50ZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1hcHBpbmdNYW5hZ2VyIHtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9tYXBwaW5nQ291bnRlcnM6IEFycmF5PE1hcHBpbmdDb3VudGVyPjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX21hcHBpbmdPcmRlcjogTWFwPHN0cmluZywgQXJyYXk8c3RyaW5nPj47XHJcblxyXG4gICAgY29uc3RydWN0b3IocG9zc2libGVNYXBwaW5nczogTWFwU2V0PHN0cmluZywgc3RyaW5nPikge1xyXG4gICAgICAgIHRoaXMuX21hcHBpbmdDb3VudGVycyA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgW2lkLCBtYXBwYWJsZUlkc10gb2YgcG9zc2libGVNYXBwaW5ncy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fbWFwcGluZ0NvdW50ZXJzLnB1c2gobmV3IE1hcHBpbmdDb3VudGVyKGlkLCBtYXBwYWJsZUlkcy5zaXplIC0gMSkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9tYXBwaW5nT3JkZXIgPSBuZXcgTWFwPHN0cmluZywgQXJyYXk8c3RyaW5nPj4odGhpcy5fbWFwcGluZ0NvdW50ZXJzLm1hcChjaG9pY2UgPT4gW2Nob2ljZS5tYXBwZWRJZCwgQXJyYXkuZnJvbShwb3NzaWJsZU1hcHBpbmdzLmdldChjaG9pY2UubWFwcGVkSWQpKV0pKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q3VycmVudE1hcHBpbmcoKTogTWFwPHN0cmluZywgc3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBNYXA8c3RyaW5nLCBzdHJpbmc+KHRoaXMuX21hcHBpbmdDb3VudGVycy5tYXAoY2hvaWNlID0+IFtjaG9pY2UubWFwcGVkSWQsIHRoaXMuX21hcHBpbmdPcmRlci5nZXQoY2hvaWNlLm1hcHBlZElkKSFbY2hvaWNlLmN1cnJlbnQoKV1dKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbmNyZW1lbnRzIHRoZSBjdXJyZW50IG1hcHBpbmcgdG8gdGhlIG5leHQgcG9zc2liaWxpdHkuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBmaW5hbCBtYXBwaW5nIHdhcyBwYXNzZWQuIGBmYWxzZWAgb3RoZXJ3aXNlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbW92ZVRvTmV4dE1hcHBpbmcoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IGluY3JlbWVudGVkSW5kZXggPSAwO1xyXG4gICAgICAgIHdoaWxlIChpbmNyZW1lbnRlZEluZGV4IDwgdGhpcy5fbWFwcGluZ0NvdW50ZXJzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCBjYXJyeSA9IHRoaXMuX21hcHBpbmdDb3VudGVyc1tpbmNyZW1lbnRlZEluZGV4XS5pc0xhc3RPcHRpb24oKTtcclxuICAgICAgICAgICAgdGhpcy5fbWFwcGluZ0NvdW50ZXJzW2luY3JlbWVudGVkSW5kZXhdLm5leHQoKTtcclxuICAgICAgICAgICAgaWYgKGNhcnJ5KSB7XHJcbiAgICAgICAgICAgICAgICBpbmNyZW1lbnRlZEluZGV4Kys7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW5jcmVtZW50ZWRJbmRleCA9PT0gdGhpcy5fbWFwcGluZ0NvdW50ZXJzLmxlbmd0aDtcclxuICAgIH1cclxufVxyXG4iXX0=