import { ArcWeightIlpSolver } from '../../../../utility/glpk/ArcWeightIlpSolver';
import { concatMap, from, toArray } from 'rxjs';
import { TraceMultisetEquivalentStateTraverser } from '../../../../utility/multiset/trace-multiset-equivalent-state-traverser';
import { mapMultiset } from '../../../../utility/multiset/multiset';
import { Goal } from '../../../../models/glpk/glpk-constants';
import { VariableName } from '../../../../utility/glpk/model/variable-name';
import { DirectlyFollowsExtractor } from '../../../../utility/directly-follows-extractor';
export class IlpMinerIlpSolver extends ArcWeightIlpSolver {
    constructor(solver$) {
        super(solver$);
    }
    findSolutions(log) {
        const baseIlpConstraints = [];
        const directlyFollowsExtractor = new DirectlyFollowsExtractor();
        const traverser = new TraceMultisetEquivalentStateTraverser();
        traverser.traverseMultisetEquivalentStates(log, (prefix, step) => {
            baseIlpConstraints.push(...this.firingRule(prefix, step));
        }, (prefix, step) => {
            if (prefix.length === 0) {
                return;
            }
            directlyFollowsExtractor.add(step, prefix[prefix.length - 1]);
        });
        const oneWayDirectlyFollowsPairs = directlyFollowsExtractor.oneWayDirectlyFollows();
        const baseIlp = this.setUpBaseIlp();
        const problems = oneWayDirectlyFollowsPairs.map(pair => ({
            baseIlpConstraints,
            baseIlp,
            pair
        }));
        return from(problems).pipe(concatMap(problem => {
            return this.solveILP(this.populateIlp(problem.baseIlp, problem.baseIlpConstraints, problem.pair));
        }), toArray());
    }
    firingRule(prefix, step) {
        let foundStep = false;
        const variables = mapMultiset(prefix, (name, cardinality) => {
            const result = [this.variable(this.transitionVariableName(name, VariableName.OUTGOING_ARC_WEIGHT_PREFIX), cardinality)];
            let c = cardinality;
            if (name === step) {
                c += 1;
                foundStep = true;
            }
            result.push(this.variable(this.transitionVariableName(name, VariableName.INGOING_ARC_WEIGHT_PREFIX), -c));
            return result;
        }).reduce((accumulator, value) => accumulator.concat(value), []);
        if (!foundStep) {
            variables.push(this.variable(this.transitionVariableName(step, VariableName.INGOING_ARC_WEIGHT_PREFIX), -1));
        }
        variables.push(this.variable(VariableName.INITIAL_MARKING));
        return this.greaterEqualThan(variables, 0).constraints;
    }
    setUpBaseIlp() {
        const allVariables = Array.from(this._allVariables).concat(VariableName.INITIAL_MARKING);
        return {
            name: 'ilp',
            objective: {
                name: 'goal',
                direction: Goal.MINIMUM,
                vars: allVariables.map(v => {
                    let coef;
                    if (v.startsWith(VariableName.INITIAL_MARKING)) {
                        coef = 30;
                    }
                    else if (v.startsWith(VariableName.OUTGOING_ARC_WEIGHT_PREFIX)) {
                        coef = 10;
                    }
                    else {
                        coef = -1;
                    }
                    return this.variable(v, coef);
                })
            },
            subjectTo: [],
            // TODO enable arc weights with a config setting?
            binaries: allVariables
        };
    }
    populateIlp(baseIlp, baseConstraints, causalPair) {
        const result = Object.assign({}, baseIlp);
        result.subjectTo = [...baseConstraints];
        result.subjectTo = result.subjectTo.concat(this.greaterEqualThan(this.variable(this.transitionVariableName(causalPair[0], VariableName.OUTGOING_ARC_WEIGHT_PREFIX)), 1).constraints);
        result.subjectTo = result.subjectTo.concat(this.greaterEqualThan(this.variable(this.transitionVariableName(causalPair[1], VariableName.INGOING_ARC_WEIGHT_PREFIX)), 1).constraints);
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,