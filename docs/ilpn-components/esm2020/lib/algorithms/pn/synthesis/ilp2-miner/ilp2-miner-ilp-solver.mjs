import { ArcWeightIlpSolver } from '../../../../utility/glpk/ArcWeightIlpSolver';
import { concatMap, from, toArray } from 'rxjs';
import { VariableName } from '../../../../utility/glpk/model/variable-name';
import { DirectlyFollowsExtractor } from '../../../../utility/directly-follows-extractor';
import { Goal } from '../../../../models/glpk/glpk-constants';
export class Ilp2MinerIlpSolver extends ArcWeightIlpSolver {
    constructor(solver$) {
        super(solver$);
        this._directlyFollowsExtractor = new DirectlyFollowsExtractor();
        this._poVariableNames = new Set();
    }
    findSolutions(pos) {
        const baseIlpConstraints = [];
        if (Array.isArray(pos)) {
            // creates tokenflow system with unique variables for each partial order
            for (let i = 0; i < pos.length; i++) {
                const events = pos[i].events;
                for (const e of events) {
                    baseIlpConstraints.push(...this.firingRule(e, i));
                    baseIlpConstraints.push(...this.tokenFlow(e, i));
                }
                baseIlpConstraints.push(...this.initialMarking(events, i));
            }
        }
        else {
            // uses the combined branching process to reduce the number of unique variables
            const events = pos.getTransitions();
            for (const e of events) {
                baseIlpConstraints.push(...this.branchingProcessFiringRule(e));
                baseIlpConstraints.push(...this.branchingProcessTokenFlow(e));
            }
        }
        const baseIlp = this.setUpBaseIlp();
        const problems = this._directlyFollowsExtractor.oneWayDirectlyFollows().map(pair => ({
            baseIlpConstraints,
            baseIlp,
            pair
        }));
        return from(problems).pipe(concatMap(problem => {
            return this.solveILP(this.populateIlp(problem.baseIlp, problem.baseIlpConstraints, problem.pair));
        }), toArray());
    }
    firingRule(event, i) {
        const variables = [this.variable(this.getPoEventId(event.id, i))];
        for (const pre of event.previousEvents) {
            variables.push(this.variable(this.getPoArcId(pre.id, event.id, i)));
            this._directlyFollowsExtractor.add(event.label, pre.label);
        }
        variables.push(this.variable(this.transitionVariableName(event.label, VariableName.INGOING_ARC_WEIGHT_PREFIX), -1));
        return this.greaterEqualThan(variables, 0).constraints;
    }
    tokenFlow(event, i) {
        const variables = [this.variable(this.getPoEventId(event.id, i))];
        for (const pre of event.previousEvents) {
            variables.push(this.variable(this.getPoArcId(pre.id, event.id, i)));
        }
        for (const post of event.nextEvents) {
            variables.push(this.variable(this.getPoArcId(event.id, post.id, i), -1));
        }
        if (event.nextEvents.size === 0) {
            variables.push(this.variable(this.getPoArcId(event.id, Ilp2MinerIlpSolver.FINAL_MARKING, i), -1));
        }
        variables.push(this.variable(this.transitionVariableName(event.label, VariableName.INGOING_ARC_WEIGHT_PREFIX), -1));
        variables.push(this.variable(this.transitionVariableName(event.label, VariableName.OUTGOING_ARC_WEIGHT_PREFIX)));
        return this.equal(variables, 0).constraints;
    }
    initialMarking(events, i) {
        const variables = events.map(e => this.variable(this.getPoEventId(e.id, i), -1));
        variables.push(this.variable(VariableName.INITIAL_MARKING));
        return this.equal(variables, 0).constraints;
    }
    getPoEventId(id, i) {
        const d = `${i}${Ilp2MinerIlpSolver.PO_ARC_SEPARATOR}${id}`;
        this._poVariableNames.add(d);
        return d;
    }
    getPoArcId(sourceId, destinationId, i) {
        const id = `${i}${Ilp2MinerIlpSolver.PO_ARC_SEPARATOR}${sourceId}${Ilp2MinerIlpSolver.PO_ARC_SEPARATOR}${destinationId}`;
        this._poVariableNames.add(id);
        return id;
    }
    branchingProcessFiringRule(event) {
        const variables = event.ingoingArcs.map(a => {
            const p = a.source;
            for (const aa of p.ingoingArcs) {
                let source = aa.source;
                this._directlyFollowsExtractor.add(event.label, source.label);
            }
            return this.variable(this.getPlaceVariable(p));
        });
        variables.push(this.variable(this.transitionVariableName(event.label, VariableName.INGOING_ARC_WEIGHT_PREFIX), -1));
        return this.greaterEqualThan(variables, 0).constraints;
    }
    branchingProcessTokenFlow(event) {
        const variables = event.ingoingArcs.map(a => this.variable(this.getPlaceVariable(a.source)));
        variables.push(this.variable(this.transitionVariableName(event.label, VariableName.INGOING_ARC_WEIGHT_PREFIX), -1));
        variables.push(this.variable(this.transitionVariableName(event.label, VariableName.OUTGOING_ARC_WEIGHT_PREFIX)));
        variables.push(...event.outgoingArcs.map(a => this.variable(this.getPlaceVariable(a.destination), -1)));
        return this.equal(variables, 0).constraints;
    }
    getPlaceVariable(place) {
        if (place.ingoingArcs.length === 0) {
            return VariableName.INITIAL_MARKING;
        }
        this._poVariableNames.add(place.id);
        return place.id;
    }
    setUpBaseIlp() {
        const goalVariables = Array.from(this._allVariables).concat(VariableName.INITIAL_MARKING);
        return {
            name: 'ilp',
            objective: {
                name: 'goal',
                direction: Goal.MINIMUM,
                // vars: goalVariables.map(v => {
                //     let coef;
                //     if (v.startsWith(VariableName.INITIAL_MARKING)) {
                //         coef = 30;
                //     } else if (v.startsWith(VariableName.OUTGOING_ARC_WEIGHT_PREFIX)) {
                //         coef = 10;
                //     } else {
                //         coef = -1;
                //     }
                //     return this.variable(v, coef);
                // })
                vars: Array.from(this._poVariableNames).map(v => {
                    return this.variable(v, 1);
                })
            },
            subjectTo: [],
            // TODO enable arc weights with a config setting?
            binaries: goalVariables,
            generals: Array.from(this._poVariableNames)
        };
    }
    populateIlp(baseIlp, baseConstraints, causalPair) {
        const result = Object.assign({}, baseIlp);
        result.subjectTo = [...baseConstraints];
        result.subjectTo = result.subjectTo.concat(this.greaterEqualThan(this.variable(this.transitionVariableName(causalPair[0], VariableName.OUTGOING_ARC_WEIGHT_PREFIX)), 1).constraints);
        result.subjectTo = result.subjectTo.concat(this.greaterEqualThan(this.variable(this.transitionVariableName(causalPair[1], VariableName.INGOING_ARC_WEIGHT_PREFIX)), 1).constraints);
        return result;
    }
}
Ilp2MinerIlpSolver.PO_ARC_SEPARATOR = '#';
Ilp2MinerIlpSolver.FINAL_MARKING = 'mf';
//# sourceMappingURL=data:application/json;base64,