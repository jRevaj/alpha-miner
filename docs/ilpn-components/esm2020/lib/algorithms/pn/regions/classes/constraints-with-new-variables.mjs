export class ConstraintsWithNewVariables {
    constructor(constraints, binaryVariables, integerVariables) {
        this._constraints = Array.isArray(constraints) ? constraints : [constraints];
        if (binaryVariables !== undefined) {
            this._binaryVariables = Array.isArray(binaryVariables) ? binaryVariables : [binaryVariables];
        }
        else {
            this._binaryVariables = [];
        }
        if (integerVariables !== undefined) {
            this._integerVariables = Array.isArray(integerVariables) ? integerVariables : [integerVariables];
        }
        else {
            this._integerVariables = [];
        }
    }
    get binaryVariables() {
        return this._binaryVariables;
    }
    get integerVariables() {
        return this._integerVariables;
    }
    get constraints() {
        return this._constraints;
    }
    static combine(...constraints) {
        return new ConstraintsWithNewVariables(constraints.reduce((a, v) => {
            a.push(...v.constraints);
            return a;
        }, []), constraints.reduce((a, v) => {
            a.push(...v.binaryVariables);
            return a;
        }, []), constraints.reduce((a, v) => {
            a.push(...v.integerVariables);
            return a;
        }, []));
    }
    static combineAndIntroduceVariables(newBinaryVariables, newIntegerVariables, ...constraints) {
        return ConstraintsWithNewVariables.combine(new ConstraintsWithNewVariables([], newBinaryVariables, newIntegerVariables), ...constraints);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RyYWludHMtd2l0aC1uZXctdmFyaWFibGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29tcG9uZW50cy9zcmMvbGliL2FsZ29yaXRobXMvcG4vcmVnaW9ucy9jbGFzc2VzL2NvbnN0cmFpbnRzLXdpdGgtbmV3LXZhcmlhYmxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxNQUFNLE9BQU8sMkJBQTJCO0lBTXBDLFlBQVksV0FBeUMsRUFDekMsZUFBd0MsRUFDeEMsZ0JBQXlDO1FBQ2pELElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzdFLElBQUksZUFBZSxLQUFLLFNBQVMsRUFBRTtZQUMvQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQ2hHO2FBQU07WUFDSCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO1NBQzlCO1FBQ0QsSUFBSSxnQkFBZ0IsS0FBSyxTQUFTLEVBQUU7WUFDaEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUNwRzthQUFNO1lBQ0gsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztTQUMvQjtJQUNMLENBQUM7SUFFRCxJQUFJLGVBQWU7UUFDZixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUNqQyxDQUFDO0lBRUQsSUFBSSxnQkFBZ0I7UUFDaEIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQUksV0FBVztRQUNYLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBRU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLFdBQStDO1FBQ3BFLE9BQU8sSUFBSSwyQkFBMkIsQ0FDbEMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1lBQ3hCLE9BQU8sQ0FBQyxDQUFDO1FBQ2IsQ0FBQyxFQUFFLEVBQXNCLENBQUMsRUFDMUIsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFBO1lBQzVCLE9BQU8sQ0FBQyxDQUFDO1FBQ2IsQ0FBQyxFQUFFLEVBQW1CLENBQUMsRUFDdkIsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUE7WUFDN0IsT0FBTyxDQUFDLENBQUM7UUFDYixDQUFDLEVBQUUsRUFBbUIsQ0FBQyxDQUMxQixDQUFDO0lBQ04sQ0FBQztJQUVNLE1BQU0sQ0FBQyw0QkFBNEIsQ0FBQyxrQkFBMkMsRUFDM0MsbUJBQTRDLEVBQzVDLEdBQUcsV0FBK0M7UUFDekYsT0FBTywyQkFBMkIsQ0FBQyxPQUFPLENBQ3RDLElBQUksMkJBQTJCLENBQUMsRUFBRSxFQUFFLGtCQUFrQixFQUFFLG1CQUFtQixDQUFDLEVBQzVFLEdBQUcsV0FBVyxDQUNqQixDQUFBO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdWJqZWN0VG99IGZyb20gJy4uLy4uLy4uLy4uL21vZGVscy9nbHBrL3N1YmplY3QtdG8nO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBDb25zdHJhaW50c1dpdGhOZXdWYXJpYWJsZXMge1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2JpbmFyeVZhcmlhYmxlczogQXJyYXk8c3RyaW5nPjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2ludGVnZXJWYXJpYWJsZXM6IEFycmF5PHN0cmluZz47XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9jb25zdHJhaW50czogQXJyYXk8U3ViamVjdFRvPjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25zdHJhaW50czogU3ViamVjdFRvIHwgQXJyYXk8U3ViamVjdFRvPixcclxuICAgICAgICAgICAgICAgIGJpbmFyeVZhcmlhYmxlcz86IHN0cmluZyB8IEFycmF5PHN0cmluZz4sXHJcbiAgICAgICAgICAgICAgICBpbnRlZ2VyVmFyaWFibGVzPzogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPikge1xyXG4gICAgICAgIHRoaXMuX2NvbnN0cmFpbnRzID0gQXJyYXkuaXNBcnJheShjb25zdHJhaW50cykgPyBjb25zdHJhaW50cyA6IFtjb25zdHJhaW50c107XHJcbiAgICAgICAgaWYgKGJpbmFyeVZhcmlhYmxlcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2JpbmFyeVZhcmlhYmxlcyA9IEFycmF5LmlzQXJyYXkoYmluYXJ5VmFyaWFibGVzKSA/IGJpbmFyeVZhcmlhYmxlcyA6IFtiaW5hcnlWYXJpYWJsZXNdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2JpbmFyeVZhcmlhYmxlcyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaW50ZWdlclZhcmlhYmxlcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ludGVnZXJWYXJpYWJsZXMgPSBBcnJheS5pc0FycmF5KGludGVnZXJWYXJpYWJsZXMpID8gaW50ZWdlclZhcmlhYmxlcyA6IFtpbnRlZ2VyVmFyaWFibGVzXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9pbnRlZ2VyVmFyaWFibGVzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBiaW5hcnlWYXJpYWJsZXMoKTogQXJyYXk8c3RyaW5nPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmFyeVZhcmlhYmxlcztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgaW50ZWdlclZhcmlhYmxlcygpOiBBcnJheTxzdHJpbmc+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW50ZWdlclZhcmlhYmxlcztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY29uc3RyYWludHMoKTogQXJyYXk8U3ViamVjdFRvPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnN0cmFpbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgY29tYmluZSguLi5jb25zdHJhaW50czogQXJyYXk8Q29uc3RyYWludHNXaXRoTmV3VmFyaWFibGVzPik6IENvbnN0cmFpbnRzV2l0aE5ld1ZhcmlhYmxlcyB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJhaW50c1dpdGhOZXdWYXJpYWJsZXMoXHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnRzLnJlZHVjZSgoYSwgdikgPT4ge1xyXG4gICAgICAgICAgICAgICAgYS5wdXNoKC4uLnYuY29uc3RyYWludHMpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcclxuICAgICAgICAgICAgfSwgW10gYXMgQXJyYXk8U3ViamVjdFRvPiksXHJcbiAgICAgICAgICAgIGNvbnN0cmFpbnRzLnJlZHVjZSgoYSwgdikgPT4ge1xyXG4gICAgICAgICAgICAgICAgYS5wdXNoKC4uLnYuYmluYXJ5VmFyaWFibGVzKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICAgICAgIH0sIFtdIGFzIEFycmF5PHN0cmluZz4pLFxyXG4gICAgICAgICAgICBjb25zdHJhaW50cy5yZWR1Y2UoKGEsIHYpID0+IHtcclxuICAgICAgICAgICAgICAgIGEucHVzaCguLi52LmludGVnZXJWYXJpYWJsZXMpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYTtcclxuICAgICAgICAgICAgfSwgW10gYXMgQXJyYXk8c3RyaW5nPilcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgY29tYmluZUFuZEludHJvZHVjZVZhcmlhYmxlcyhuZXdCaW5hcnlWYXJpYWJsZXM/OiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0ludGVnZXJWYXJpYWJsZXM/OiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmNvbnN0cmFpbnRzOiBBcnJheTxDb25zdHJhaW50c1dpdGhOZXdWYXJpYWJsZXM+KTogQ29uc3RyYWludHNXaXRoTmV3VmFyaWFibGVzIHtcclxuICAgICAgICByZXR1cm4gQ29uc3RyYWludHNXaXRoTmV3VmFyaWFibGVzLmNvbWJpbmUoXHJcbiAgICAgICAgICAgIG5ldyBDb25zdHJhaW50c1dpdGhOZXdWYXJpYWJsZXMoW10sIG5ld0JpbmFyeVZhcmlhYmxlcywgbmV3SW50ZWdlclZhcmlhYmxlcyksXHJcbiAgICAgICAgICAgIC4uLmNvbnN0cmFpbnRzXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59XHJcbiJdfQ==