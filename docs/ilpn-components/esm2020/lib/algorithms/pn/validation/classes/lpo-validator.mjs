import { Event } from '../../../../models/po/model/event';
export class LpoValidator {
    constructor(petriNet, lpo) {
        this._petriNet = petriNet;
        this._lpo = lpo.clone();
        this.modifyLPO();
    }
    modifyLPO() {
        for (const e of this._lpo.events) {
            for (const t of this._petriNet.getTransitions()) {
                if (e.label === t.label) {
                    if (e.transition !== undefined) {
                        throw new Error(`The algorithm does not support label-splitted nets`);
                    }
                    e.transition = t;
                }
            }
            if (e.transition === undefined) {
                throw new Error(`The net does not contain a transition with the label '${e.label}' of the event '${e.id}'`);
            }
        }
        const initial = new Event('initial marking', undefined);
        const final = new Event('final marking', undefined);
        for (const e of this._lpo.initialEvents) {
            initial.addNextEvent(e);
        }
        for (const e of this._lpo.finalEvents) {
            e.addNextEvent(final);
        }
        this._lpo.addEvent(initial);
        this._lpo.addEvent(final);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibHBvLXZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvbXBvbmVudHMvc3JjL2xpYi9hbGdvcml0aG1zL3BuL3ZhbGlkYXRpb24vY2xhc3Nlcy9scG8tdmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUd4RCxNQUFNLE9BQWdCLFlBQVk7SUFLOUIsWUFBc0IsUUFBa0IsRUFBRSxHQUFpQjtRQUN2RCxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUMxQixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVTLFNBQVM7UUFDZixLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQzlCLEtBQUssTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsRUFBRTtnQkFDN0MsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUU7b0JBQ3JCLElBQUksQ0FBQyxDQUFDLFVBQVUsS0FBSyxTQUFTLEVBQUU7d0JBQzVCLE1BQU0sSUFBSSxLQUFLLENBQUMsb0RBQW9ELENBQUMsQ0FBQztxQkFDekU7b0JBQ0QsQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7aUJBQ3BCO2FBQ0o7WUFDRCxJQUFJLENBQUMsQ0FBQyxVQUFVLEtBQUssU0FBUyxFQUFFO2dCQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLHlEQUF5RCxDQUFDLENBQUMsS0FBSyxtQkFBbUIsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDL0c7U0FDSjtRQUVELE1BQU0sT0FBTyxHQUFHLElBQUksS0FBSyxDQUFDLGlCQUFpQixFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLGVBQWUsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNwRCxLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3JDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDM0I7UUFDRCxLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ25DLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekI7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDO0NBSUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BldHJpTmV0fSBmcm9tICcuLi8uLi8uLi8uLi9tb2RlbHMvcG4vbW9kZWwvcGV0cmktbmV0JztcclxuaW1wb3J0IHtQYXJ0aWFsT3JkZXJ9IGZyb20gJy4uLy4uLy4uLy4uL21vZGVscy9wby9tb2RlbC9wYXJ0aWFsLW9yZGVyJztcclxuaW1wb3J0IHtFdmVudH0gZnJvbSAnLi4vLi4vLi4vLi4vbW9kZWxzL3BvL21vZGVsL2V2ZW50JztcclxuaW1wb3J0IHtWYWxpZGF0aW9uUmVzdWx0fSBmcm9tICcuL3ZhbGlkYXRpb24tcmVzdWx0JztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBMcG9WYWxpZGF0b3Ige1xyXG5cclxuICAgIHByb3RlY3RlZCByZWFkb25seSBfcGV0cmlOZXQ6IFBldHJpTmV0O1xyXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IF9scG86IFBhcnRpYWxPcmRlcjtcclxuXHJcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocGV0cmlOZXQ6IFBldHJpTmV0LCBscG86IFBhcnRpYWxPcmRlcikge1xyXG4gICAgICAgIHRoaXMuX3BldHJpTmV0ID0gcGV0cmlOZXQ7XHJcbiAgICAgICAgdGhpcy5fbHBvID0gbHBvLmNsb25lKCk7XHJcbiAgICAgICAgdGhpcy5tb2RpZnlMUE8oKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgbW9kaWZ5TFBPKCkge1xyXG4gICAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLl9scG8uZXZlbnRzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLl9wZXRyaU5ldC5nZXRUcmFuc2l0aW9ucygpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5sYWJlbCA9PT0gdC5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnRyYW5zaXRpb24gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBhbGdvcml0aG0gZG9lcyBub3Qgc3VwcG9ydCBsYWJlbC1zcGxpdHRlZCBuZXRzYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGUudHJhbnNpdGlvbiA9IHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGUudHJhbnNpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBuZXQgZG9lcyBub3QgY29udGFpbiBhIHRyYW5zaXRpb24gd2l0aCB0aGUgbGFiZWwgJyR7ZS5sYWJlbH0nIG9mIHRoZSBldmVudCAnJHtlLmlkfSdgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgaW5pdGlhbCA9IG5ldyBFdmVudCgnaW5pdGlhbCBtYXJraW5nJywgdW5kZWZpbmVkKTtcclxuICAgICAgICBjb25zdCBmaW5hbCA9IG5ldyBFdmVudCgnZmluYWwgbWFya2luZycsIHVuZGVmaW5lZCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBlIG9mIHRoaXMuX2xwby5pbml0aWFsRXZlbnRzKSB7XHJcbiAgICAgICAgICAgIGluaXRpYWwuYWRkTmV4dEV2ZW50KGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5fbHBvLmZpbmFsRXZlbnRzKSB7XHJcbiAgICAgICAgICAgIGUuYWRkTmV4dEV2ZW50KGZpbmFsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbHBvLmFkZEV2ZW50KGluaXRpYWwpO1xyXG4gICAgICAgIHRoaXMuX2xwby5hZGRFdmVudChmaW5hbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFic3RyYWN0IHZhbGlkYXRlKCk6IEFycmF5PFZhbGlkYXRpb25SZXN1bHQ+O1xyXG5cclxufVxyXG4iXX0=