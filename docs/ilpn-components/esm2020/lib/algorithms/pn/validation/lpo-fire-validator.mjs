import { ValidationPhase, ValidationResult } from './classes/validation-result';
import { LpoFlowValidator } from './lpo-flow-validator';
export class LpoFireValidator extends LpoFlowValidator {
    constructor(petriNet, lpo) {
        super(petriNet, lpo);
        this._places = this._petriNet.getPlaces();
    }
    modifyLPO() {
        super.modifyLPO();
        this._lpo.determineInitialAndFinalEvents();
    }
    validate() {
        const totalOrder = this.buildTotalOrdering();
        totalOrder.forEach(e => e.initializeLocalMarking(this._places.length));
        // build start event
        const initialEvent = totalOrder[0];
        for (let i = 0; i < this._places.length; i++) {
            initialEvent.localMarking[i] = this._places[i].marking;
        }
        const validPlaces = this.newBoolArray(true);
        const complexPlaces = this.newBoolArray(false);
        const notValidPlaces = this.newBoolArray(false);
        // TODO timing
        let queue = [...totalOrder];
        this.fireForwards(queue, validPlaces, complexPlaces);
        // not valid places
        const finalEvent = [...this._lpo.finalEvents][0];
        for (let i = 0; i < this._places.length; i++) {
            notValidPlaces[i] = finalEvent.localMarking[i] < 0;
        }
        // Don't fire all backwards!
        queue = [finalEvent];
        for (let i = totalOrder.length - 2; i >= 0; i--) {
            totalOrder[i].initializeLocalMarking(this._places.length);
            queue.push(totalOrder[i]);
        }
        const backwardsValidPlaces = this.newBoolArray(true);
        const backwardsComplexPlaces = this.newBoolArray(false);
        // TODO timing 2
        // Is the final marking > 0 ?
        for (let i = 0; i < this._places.length; i++) {
            if (finalEvent.localMarking[i] < 0) {
                backwardsValidPlaces[i] = false;
            }
        }
        this.fireBackwards(queue, backwardsValidPlaces, backwardsComplexPlaces);
        // Rest with flow
        const flow = this.newBoolArray(false);
        for (let i = 0; i < this._places.length; i++) {
            if (!validPlaces[i] && complexPlaces[i] && !notValidPlaces[i] && !backwardsValidPlaces[i]) {
                flow[i] = this.checkFlowForPlace(this._places[i], this._lpo.events);
            }
        }
        // TODO timing 3
        // TODO stats?
        return this._places.map((p, i) => {
            if (validPlaces[i]) {
                return new ValidationResult(true, ValidationPhase.FORWARDS);
            }
            else if (backwardsValidPlaces[i]) {
                return new ValidationResult(true, ValidationPhase.BACKWARDS);
            }
            else if (flow[i]) {
                return new ValidationResult(true, ValidationPhase.FLOW);
            }
            else if (notValidPlaces[i]) {
                return new ValidationResult(false, ValidationPhase.FORWARDS);
            }
            else {
                return new ValidationResult(false, ValidationPhase.FLOW);
            }
        });
    }
    buildTotalOrdering() {
        const ordering = [...this._lpo.initialEvents];
        const contained = new Set(this._lpo.initialEvents);
        const examineLater = [...this._lpo.events];
        while (examineLater.length > 0) {
            const e = examineLater.shift();
            if (contained.has(e)) {
                continue;
            }
            let add = true;
            for (const pre of e.previousEvents) {
                if (!contained.has(pre)) {
                    add = false;
                    break;
                }
            }
            if (add) {
                ordering.push(e);
                contained.add(e);
            }
            else {
                examineLater.push(e);
            }
        }
        return ordering;
    }
    fireForwards(queue, validPlaces, complexPlaces) {
        this.fire(queue, validPlaces, complexPlaces, (t) => t.ingoingArcs, (a) => a.source, (t) => t.outgoingArcs, (a) => a.destination, (e) => e.nextEvents);
    }
    fireBackwards(queue, validPlaces, complexPlaces) {
        this.fire(queue, validPlaces, complexPlaces, (t) => t.outgoingArcs, (a) => a.destination, (t) => t.ingoingArcs, (a) => a.source, (e) => e.previousEvents);
    }
    fire(firingOrder, validPlaces, complexPlaces, preArcs, prePlace, postArcs, postPlace, nextEvents) {
        while (firingOrder.length > 0) {
            const e = firingOrder.shift();
            // can fire?
            if (e.transition !== undefined) {
                // fire
                for (const arc of preArcs(e.transition)) {
                    const pIndex = this.getPIndex(prePlace(arc));
                    e.localMarking[pIndex] = e.localMarking[pIndex] - arc.weight;
                    if (e.localMarking[pIndex] < 0) {
                        validPlaces[pIndex] = false;
                    }
                }
                for (const arc of postArcs(e.transition)) {
                    const pIndex = this.getPIndex(postPlace(arc));
                    e.localMarking[pIndex] = e.localMarking[pIndex] + arc.weight;
                }
            }
            // push to first later and check for complex places
            if (nextEvents(e).size > 0) {
                for (let i = 0; i < this._places.length; i++) {
                    if (nextEvents(e).size > 1 && e.localMarking[i] > 0) {
                        complexPlaces[i] = true;
                    }
                    const firstLater = [...nextEvents(e)][0];
                    firstLater.localMarking[i] = firstLater.localMarking[i] + e.localMarking[i];
                }
            }
        }
    }
    getPIndex(p) {
        return this._places.findIndex(pp => pp === p);
    }
    newBoolArray(fill) {
        return new Array(this._places.length).fill(fill);
    }
}
//# sourceMappingURL=data:application/json;base64,