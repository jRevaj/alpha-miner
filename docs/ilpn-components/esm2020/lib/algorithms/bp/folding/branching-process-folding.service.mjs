import { Injectable } from '@angular/core';
import { PetriNet } from '../../../models/pn/model/petri-net';
import { Place } from '../../../models/pn/model/place';
import { Transition } from '../../../models/pn/model/transition';
import { FoldingStatus } from './model/folding-status';
import { LogSymbol } from '../../log/log-symbol';
import * as i0 from "@angular/core";
export class BranchingProcessFoldingService {
    constructor() {
    }
    foldPartialOrders(pos) {
        if (pos.length === 0) {
            return new PetriNet();
        }
        const result = pos[0].clone();
        this.addStartEvent(result);
        for (let i = 1; i < pos.length; i++) {
            this.addPoToBranchingProcess(pos[i], result);
        }
        return result;
    }
    addStartEvent(po) {
        const start = new Transition(LogSymbol.START);
        po.addTransition(start);
        for (const p of po.getInputPlaces()) {
            po.addArc(start, p);
        }
        const initial = new Place();
        po.addPlace(initial);
        po.addArc(initial, start);
    }
    addPoToBranchingProcess(po, result) {
        po = po.clone();
        this.addStartEvent(po);
        const conflictQueue = [{
                target: result.getInputPlaces()[0],
                conflict: po.getInputPlaces()[0]
            }];
        conflictResolution: while (conflictQueue.length > 0) {
            const problem = conflictQueue.shift();
            if (problem.conflict.foldingStatus === FoldingStatus.FOLDED) {
                continue;
            }
            if (problem.conflict.foldingStatus === FoldingStatus.CONFLICT) {
                conflictQueue.push(...this.addConflict(problem, result));
                continue;
            }
            const followingEvent = problem.conflict.outgoingArcs[0]?.destination;
            if (followingEvent === undefined) {
                // the conflicting place has no following event => there is no conflict to resolve
                continue;
            }
            if (followingEvent.ingoingArcs.length > 1) {
                for (const a of followingEvent.ingoingArcs) {
                    const p = a.source;
                    if (p === problem.conflict) {
                        continue;
                    }
                    if (p.foldingStatus === FoldingStatus.CONFLICT) {
                        conflictQueue.push(problem);
                        problem.conflict.foldingStatus = FoldingStatus.CONFLICT;
                        continue conflictResolution;
                    }
                    if (p.foldingStatus === undefined) {
                        problem.conflict.foldingStatus = FoldingStatus.PENDING;
                        conflictQueue.push(problem);
                        continue conflictResolution;
                    }
                }
            }
            conflictQueue.push(...this.fold(problem.conflict, problem.target, followingEvent, po, result));
        }
        return result;
    }
    fold(conflict, target, followingEvent, po, result) {
        let folding;
        for (const a of target.outgoingArcs) {
            const foldedEvent = a.destination;
            if (foldedEvent.label !== followingEvent.label) {
                continue;
            }
            folding = this.attemptEventFolding(followingEvent, foldedEvent);
            if (folding !== undefined) {
                break;
            }
        }
        if (folding !== undefined) {
            // the conflict can be resolved and the target place can be folded => move the conflict to the following places
            conflict.foldingStatus = FoldingStatus.FOLDED;
            conflict.foldedPair = target;
            if (followingEvent.ingoingArcs.length > 1) {
                for (const a of followingEvent.ingoingArcs) {
                    const p = a.source;
                    if (p === conflict) {
                        continue;
                    }
                    if (p.foldingStatus !== FoldingStatus.FOLDED) {
                        return [];
                    }
                }
            }
            const r = [];
            for (const [conflictId, targetId] of folding.entries()) {
                r.push({
                    target: result.getPlace(targetId),
                    conflict: po.getPlace(conflictId)
                });
            }
            return r;
        }
        else {
            // the conflict cannot be resolved => add conflict to the folded net
            conflict.foldingStatus = FoldingStatus.CONFLICT;
            return [{ conflict, target }];
        }
    }
    attemptEventFolding(following, folded) {
        if (folded.outgoingArcs.length !== following.outgoingArcs.length) {
            return undefined;
        }
        const mapping = new Map();
        const mapped = new Set();
        const unmapped = following.outgoingArcs.map(a => a.destination);
        while (unmapped.length > 0) {
            const p = unmapped.shift();
            if (p.outgoingArcs.length === 0) {
                if (unmapped.length !== 0) {
                    unmapped.push(p);
                    continue;
                }
                else {
                    for (const af of folded.outgoingArcs) {
                        const pf = af.destination;
                        if (mapped.has(pf.id)) {
                            continue;
                        }
                        mapping.set(p.id, pf.id);
                        break;
                    }
                    break;
                }
            }
            const followLabel = p.outgoingArcs[0].destination.label;
            mappingFor: for (const af of folded.outgoingArcs) {
                const pf = af.destination;
                if (mapped.has(pf.id)) {
                    continue;
                }
                for (const ap of pf.outgoingArcs) {
                    if (ap.destination.label === followLabel) {
                        mapping.set(p.id, pf.id);
                        mapped.add(pf.id);
                        break mappingFor;
                    }
                }
            }
            if (!mapping.has(p.id)) {
                return undefined;
            }
        }
        return mapping;
    }
    addConflict(problem, folded) {
        if (problem.conflict.outgoingArcs.length === 0) {
            return [];
        }
        const original = problem.conflict.outgoingArcs[0].destination;
        let following = original.foldedPair;
        if (following === undefined) {
            following = new Transition(original.label);
            folded.addTransition(following);
        }
        folded.addArc(problem.target, following);
        if (original.foldedPair === undefined) {
            const newConflicts = [];
            for (const out of original.outgoingArcs) {
                const p = new Place();
                folded.addPlace(p);
                folded.addArc(following, p);
                newConflicts.push({ conflict: out.destination, target: p });
            }
            original.foldedPair = following;
            return newConflicts;
        }
        return [];
    }
}
BranchingProcessFoldingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: BranchingProcessFoldingService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
BranchingProcessFoldingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: BranchingProcessFoldingService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: BranchingProcessFoldingService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,