export class MaxFlowPreflowN3 {
    constructor(n) {
        this.n = n;
        this.cap = [];
        for (let i = 0; i < n; i++) {
            this.cap.push(new Array(n).fill(0));
        }
    }
    setCap(i, j, cap) {
        this.cap[i][j] = cap;
    }
    setUnbounded(i, j) {
        this.setCap(i, j, 20000);
    }
    getCap(i, j) {
        return this.cap[i][j];
    }
    maxFlow(s, t) {
        const h = new Array(this.n).fill(0);
        h[s] = this.n - 1;
        const maxh = new Array(this.n).fill(0);
        const f = [];
        for (let i = 0; i < this.n; i++) {
            f.push(new Array(this.n).fill(0));
        }
        const e = new Array(this.n).fill(0);
        for (let i = 0; i < this.n; i++) {
            f[s][i] = this.cap[s][i];
            f[i][s] = -f[s][i];
            e[i] = this.cap[s][i];
        }
        for (let sz = 0;;) {
            if (sz === 0) {
                for (let i = 0; i < this.n; i++) {
                    if (i !== s && i !== t && e[i] > 0) {
                        if (sz !== 0 && h[i] > h[maxh[0]]) {
                            sz = 0;
                        }
                        maxh[sz++] = i;
                    }
                }
            }
            if (sz === 0) {
                break;
            }
            while (sz !== 0) {
                let i = maxh[sz - 1];
                let pushed = false;
                for (let j = 0; j < this.n && e[i] !== 0; j++) {
                    if (h[i] === h[j] + 1 && this.cap[i][j] - f[i][j] > 0) {
                        const df = Math.min(this.cap[i][j] - f[i][j], e[i]);
                        f[i][j] += df;
                        f[j][i] -= df;
                        e[i] -= df;
                        e[j] += df;
                        if (e[i] === 0) {
                            sz--;
                        }
                        pushed = true;
                    }
                }
                if (!pushed) {
                    h[i] = 20000;
                    for (let j = 0; j < this.n; j++) {
                        if (h[i] > h[j] + 1 && this.cap[i][j] - f[i][j] > 0) {
                            h[i] = h[j] + 1;
                        }
                    }
                    if (h[i] > h[maxh[0]]) {
                        sz = 0;
                        break;
                    }
                }
            }
        }
        let flow = 0;
        for (let i = 0; i < this.n; i++) {
            flow += f[s][i];
        }
        return flow;
    }
}
//# sourceMappingURL=data:application/json;base64,