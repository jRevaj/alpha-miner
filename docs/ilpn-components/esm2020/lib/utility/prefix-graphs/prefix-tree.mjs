import { PrefixGraphNode } from './prefix-graph-node';
export class PrefixTree {
    constructor(rootContent) {
        this._root = new PrefixGraphNode(rootContent);
    }
    insert(path, newNodeContent, updateNodeContent, stepReaction = () => { }, newStepNode = () => undefined) {
        let currentNode = this._root;
        const prefix = [];
        for (let i = 0; i < path.length(); i++) {
            const step = path.get(i);
            stepReaction(step, currentNode.content, currentNode);
            let child = currentNode.getChild(step);
            if (child === undefined) {
                currentNode = currentNode.addChild(step, newStepNode(step, [...prefix], currentNode.content));
            }
            else {
                currentNode = child;
            }
            prefix.push(step);
        }
        if (currentNode.content !== undefined) {
            updateNodeContent(currentNode.content, currentNode);
        }
        else {
            currentNode.content = newNodeContent(currentNode);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlZml4LXRyZWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb21wb25lbnRzL3NyYy9saWIvdXRpbGl0eS9wcmVmaXgtZ3JhcGhzL3ByZWZpeC10cmVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUdwRCxNQUFNLE9BQU8sVUFBVTtJQUluQixZQUFZLFdBQWU7UUFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLGVBQWUsQ0FBSSxXQUFXLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRU0sTUFBTSxDQUFDLElBQW9CLEVBQ3BCLGNBQWtFLEVBQ2xFLGlCQUFxRSxFQUNyRSxlQUE2RyxHQUFHLEVBQUUsR0FBRSxDQUFDLEVBQ3JILGNBQW1HLEdBQUcsRUFBRSxDQUFDLFNBQVM7UUFDNUgsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM3QixNQUFNLE1BQU0sR0FBa0IsRUFBRSxDQUFDO1FBQ2pDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDcEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixZQUFZLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFDckQsSUFBSSxLQUFLLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2QyxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7Z0JBQ3JCLFdBQVcsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsRUFBRSxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUNqRztpQkFBTTtnQkFDSCxXQUFXLEdBQUcsS0FBSyxDQUFDO2FBQ3ZCO1lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNyQjtRQUNELElBQUksV0FBVyxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDbkMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztTQUN2RDthQUFNO1lBQ0gsV0FBVyxDQUFDLE9BQU8sR0FBRyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDckQ7SUFDTCxDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N0cmluZ1NlcXVlbmNlfSBmcm9tICcuLi9zdHJpbmctc2VxdWVuY2UnO1xyXG5pbXBvcnQge1ByZWZpeEdyYXBoTm9kZX0gZnJvbSAnLi9wcmVmaXgtZ3JhcGgtbm9kZSc7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFByZWZpeFRyZWU8VD4ge1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3Jvb3Q6IFByZWZpeEdyYXBoTm9kZTxUPjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihyb290Q29udGVudD86IFQpIHtcclxuICAgICAgICB0aGlzLl9yb290ID0gbmV3IFByZWZpeEdyYXBoTm9kZTxUPihyb290Q29udGVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGluc2VydChwYXRoOiBTdHJpbmdTZXF1ZW5jZSxcclxuICAgICAgICAgICAgICAgICAgbmV3Tm9kZUNvbnRlbnQ6ICh0cmVlV3JhcHBlcjogUHJlZml4R3JhcGhOb2RlPFQ+KSA9PiBUIHwgdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgICB1cGRhdGVOb2RlQ29udGVudDogKG5vZGU6IFQsIHRyZWVXcmFwcGVyOiBQcmVmaXhHcmFwaE5vZGU8VD4pID0+IHZvaWQsXHJcbiAgICAgICAgICAgICAgICAgIHN0ZXBSZWFjdGlvbjogKHN0ZXA6IHN0cmluZywgcHJldmlvdXNOb2RlOiBUIHwgdW5kZWZpbmVkLCBwcmV2aW91c1RyZWVXcmFwcGVyOiBQcmVmaXhHcmFwaE5vZGU8VD4pID0+IHZvaWQgPSAoKSA9PiB7fSxcclxuICAgICAgICAgICAgICAgICAgbmV3U3RlcE5vZGU6IChzdGVwOiBzdHJpbmcsIHByZWZpeDogQXJyYXk8c3RyaW5nPiwgcHJldmlvdXNOb2RlOiBUIHwgdW5kZWZpbmVkKSA9PiBUIHwgdW5kZWZpbmVkID0gKCkgPT4gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnROb2RlID0gdGhpcy5fcm9vdDtcclxuICAgICAgICBjb25zdCBwcmVmaXg6IEFycmF5PHN0cmluZz4gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdGgubGVuZ3RoKCk7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBzdGVwID0gcGF0aC5nZXQoaSk7XHJcbiAgICAgICAgICAgIHN0ZXBSZWFjdGlvbihzdGVwLCBjdXJyZW50Tm9kZS5jb250ZW50LCBjdXJyZW50Tm9kZSk7XHJcbiAgICAgICAgICAgIGxldCBjaGlsZCA9IGN1cnJlbnROb2RlLmdldENoaWxkKHN0ZXApO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5hZGRDaGlsZChzdGVwLCBuZXdTdGVwTm9kZShzdGVwLCBbLi4ucHJlZml4XSwgY3VycmVudE5vZGUuY29udGVudCkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudE5vZGUgPSBjaGlsZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwcmVmaXgucHVzaChzdGVwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGN1cnJlbnROb2RlLmNvbnRlbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB1cGRhdGVOb2RlQ29udGVudChjdXJyZW50Tm9kZS5jb250ZW50LCBjdXJyZW50Tm9kZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY3VycmVudE5vZGUuY29udGVudCA9IG5ld05vZGVDb250ZW50KGN1cnJlbnROb2RlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==