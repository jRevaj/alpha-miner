import { PrefixGraphNode } from './prefix-graph-node';
import { MultisetEquivalent } from '../multiset/multiset-equivalent';
import { MultisetMap } from '../multiset/multiset-map';
import { addToMultiset, cloneMultiset } from '../multiset/multiset';
class MultisetEquivalentWrapper extends MultisetEquivalent {
    constructor(wrapped) {
        super(wrapped.multiset);
        this.wrapped = wrapped;
    }
    merge(ms) {
        this.wrapped.merge(ms);
    }
}
export class PrefixMultisetStateGraph {
    constructor(rootContent) {
        this._root = new PrefixGraphNode(rootContent);
        this._stateMap = new MultisetMap();
    }
    insert(path, newStepNode, newEdgeReaction = () => { }, finalNodeReaction = () => { }, stepReaction = () => { }) {
        let currentNode = this._root;
        const prefix = [];
        for (let i = 0; i < path.length(); i++) {
            const step = path.get(i);
            stepReaction(prefix, step);
            let child = currentNode.getChild(step);
            if (child !== undefined) {
                currentNode = child;
                prefix.push(step);
                continue;
            }
            const nextMultiset = this.stepState(currentNode.content.multiset, step);
            let nextState = this._stateMap.get(nextMultiset);
            if (nextState === undefined) {
                nextState = new MultisetEquivalentWrapper(newStepNode(step, nextMultiset, currentNode.content));
                this._stateMap.put(nextState);
            }
            newEdgeReaction(step, currentNode.content);
            let nextNode = nextState.node;
            if (nextNode === undefined) {
                nextNode = currentNode.addChild(step, nextState.wrapped);
                nextState.node = nextNode;
            }
            else {
                currentNode.addChild(step, nextNode);
            }
            currentNode = nextNode;
            prefix.push(step);
        }
        finalNodeReaction(currentNode.content);
    }
    stepState(currentState, step) {
        const clone = cloneMultiset(currentState);
        addToMultiset(clone, step);
        return clone;
    }
    getGraphStates() {
        return this._stateMap.values().map(w => w.wrapped);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlZml4LW11bHRpc2V0LXN0YXRlLWdyYXBoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29tcG9uZW50cy9zcmMvbGliL3V0aWxpdHkvcHJlZml4LWdyYXBocy9wcmVmaXgtbXVsdGlzZXQtc3RhdGUtZ3JhcGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ3BELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBRW5FLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNyRCxPQUFPLEVBQUMsYUFBYSxFQUFFLGFBQWEsRUFBVyxNQUFNLHNCQUFzQixDQUFDO0FBRzVFLE1BQU0seUJBQTZCLFNBQVEsa0JBQWtCO0lBS3pELFlBQVksT0FBK0I7UUFDdkMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUMzQixDQUFDO0lBRUQsS0FBSyxDQUFDLEVBQXNCO1FBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNCLENBQUM7Q0FFSjtBQUVELE1BQU0sT0FBTyx3QkFBd0I7SUFLakMsWUFBWSxXQUFtQztRQUMzQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksZUFBZSxDQUF5QixXQUFXLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksV0FBVyxFQUFxRCxDQUFDO0lBQzFGLENBQUM7SUFFTSxNQUFNLENBQUMsSUFBb0IsRUFDcEIsV0FBaUgsRUFDakgsa0JBQWdGLEdBQUcsRUFBRSxHQUFFLENBQUMsRUFDeEYsb0JBQTRELEdBQUcsRUFBRSxHQUFFLENBQUMsRUFDcEUsZUFBOEQsR0FBRyxFQUFFLEdBQUUsQ0FBQztRQUNoRixJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzdCLE1BQU0sTUFBTSxHQUFrQixFQUFFLENBQUM7UUFDakMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNwQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDM0IsSUFBSSxLQUFLLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2QyxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7Z0JBQ3JCLFdBQVcsR0FBRyxLQUFLLENBQUM7Z0JBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2xCLFNBQVM7YUFDWjtZQUNELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLE9BQVEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDekUsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDakQsSUFBSSxTQUFTLEtBQUssU0FBUyxFQUFFO2dCQUN6QixTQUFTLEdBQUcsSUFBSSx5QkFBeUIsQ0FBeUIsV0FBVyxDQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsV0FBVyxDQUFDLE9BQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pILElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ2pDO1lBQ0QsZUFBZSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsT0FBUSxDQUFDLENBQUM7WUFDNUMsSUFBSSxRQUFRLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztZQUM5QixJQUFJLFFBQVEsS0FBSyxTQUFTLEVBQUU7Z0JBQ3hCLFFBQVEsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3pELFNBQVMsQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO2FBQzdCO2lCQUFNO2dCQUNILFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2FBQ3hDO1lBQ0QsV0FBVyxHQUFHLFFBQVEsQ0FBQztZQUN2QixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3JCO1FBQ0QsaUJBQWlCLENBQUMsV0FBVyxDQUFDLE9BQVEsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTyxTQUFTLENBQUMsWUFBc0IsRUFBRSxJQUFZO1FBQ2xELE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMxQyxhQUFhLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzNCLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFTSxjQUFjO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkQsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQcmVmaXhHcmFwaE5vZGV9IGZyb20gJy4vcHJlZml4LWdyYXBoLW5vZGUnO1xyXG5pbXBvcnQge011bHRpc2V0RXF1aXZhbGVudH0gZnJvbSAnLi4vbXVsdGlzZXQvbXVsdGlzZXQtZXF1aXZhbGVudCc7XHJcbmltcG9ydCB7U3RyaW5nU2VxdWVuY2V9IGZyb20gJy4uL3N0cmluZy1zZXF1ZW5jZSc7XHJcbmltcG9ydCB7TXVsdGlzZXRNYXB9IGZyb20gJy4uL211bHRpc2V0L211bHRpc2V0LW1hcCc7XHJcbmltcG9ydCB7YWRkVG9NdWx0aXNldCwgY2xvbmVNdWx0aXNldCwgTXVsdGlzZXR9IGZyb20gJy4uL211bHRpc2V0L211bHRpc2V0JztcclxuXHJcblxyXG5jbGFzcyBNdWx0aXNldEVxdWl2YWxlbnRXcmFwcGVyPFQ+IGV4dGVuZHMgTXVsdGlzZXRFcXVpdmFsZW50IHtcclxuXHJcbiAgICBwdWJsaWMgd3JhcHBlZDogVCAmIE11bHRpc2V0RXF1aXZhbGVudDtcclxuICAgIHB1YmxpYyBub2RlPzogUHJlZml4R3JhcGhOb2RlPFQgJiBNdWx0aXNldEVxdWl2YWxlbnQ+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHdyYXBwZWQ6IFQgJiBNdWx0aXNldEVxdWl2YWxlbnQpIHtcclxuICAgICAgICBzdXBlcih3cmFwcGVkLm11bHRpc2V0KTtcclxuICAgICAgICB0aGlzLndyYXBwZWQgPSB3cmFwcGVkO1xyXG4gICAgfVxyXG5cclxuICAgIG1lcmdlKG1zOiBNdWx0aXNldEVxdWl2YWxlbnQpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLndyYXBwZWQubWVyZ2UobXMpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFByZWZpeE11bHRpc2V0U3RhdGVHcmFwaDxUPiB7XHJcblxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfcm9vdDogUHJlZml4R3JhcGhOb2RlPFQgJiBNdWx0aXNldEVxdWl2YWxlbnQ+O1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfc3RhdGVNYXA6IE11bHRpc2V0TWFwPE11bHRpc2V0RXF1aXZhbGVudFdyYXBwZXI8VCAmIE11bHRpc2V0RXF1aXZhbGVudD4+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJvb3RDb250ZW50OiBUICYgTXVsdGlzZXRFcXVpdmFsZW50KSB7XHJcbiAgICAgICAgdGhpcy5fcm9vdCA9IG5ldyBQcmVmaXhHcmFwaE5vZGU8VCAmIE11bHRpc2V0RXF1aXZhbGVudD4ocm9vdENvbnRlbnQpO1xyXG4gICAgICAgIHRoaXMuX3N0YXRlTWFwID0gbmV3IE11bHRpc2V0TWFwPE11bHRpc2V0RXF1aXZhbGVudFdyYXBwZXI8VCAmIE11bHRpc2V0RXF1aXZhbGVudD4+KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGluc2VydChwYXRoOiBTdHJpbmdTZXF1ZW5jZSxcclxuICAgICAgICAgICAgICAgICAgbmV3U3RlcE5vZGU6IChzdGVwOiBzdHJpbmcsIG5ld1N0YXRlOiBNdWx0aXNldCwgcHJldmlvdXNOb2RlOiBUICYgTXVsdGlzZXRFcXVpdmFsZW50KSA9PiAoVCAmIE11bHRpc2V0RXF1aXZhbGVudCksXHJcbiAgICAgICAgICAgICAgICAgIG5ld0VkZ2VSZWFjdGlvbjogKHN0ZXA6IHN0cmluZywgcHJldmlvdXNOb2RlOiBUICYgTXVsdGlzZXRFcXVpdmFsZW50KSA9PiB2b2lkID0gKCkgPT4ge30sXHJcbiAgICAgICAgICAgICAgICAgIGZpbmFsTm9kZVJlYWN0aW9uOiAobm9kZTogVCAmIE11bHRpc2V0RXF1aXZhbGVudCkgPT4gdm9pZCA9ICgpID0+IHt9LFxyXG4gICAgICAgICAgICAgICAgICBzdGVwUmVhY3Rpb246IChwcmVmaXg6IEFycmF5PHN0cmluZz4sIHN0ZXA6IHN0cmluZykgPT4gdm9pZCA9ICgpID0+IHt9KSB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnROb2RlID0gdGhpcy5fcm9vdDtcclxuICAgICAgICBjb25zdCBwcmVmaXg6IEFycmF5PHN0cmluZz4gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdGgubGVuZ3RoKCk7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBzdGVwID0gcGF0aC5nZXQoaSk7XHJcbiAgICAgICAgICAgIHN0ZXBSZWFjdGlvbihwcmVmaXgsIHN0ZXApO1xyXG4gICAgICAgICAgICBsZXQgY2hpbGQgPSBjdXJyZW50Tm9kZS5nZXRDaGlsZChzdGVwKTtcclxuICAgICAgICAgICAgaWYgKGNoaWxkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlID0gY2hpbGQ7XHJcbiAgICAgICAgICAgICAgICBwcmVmaXgucHVzaChzdGVwKTtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG5leHRNdWx0aXNldCA9IHRoaXMuc3RlcFN0YXRlKGN1cnJlbnROb2RlLmNvbnRlbnQhLm11bHRpc2V0LCBzdGVwKTtcclxuICAgICAgICAgICAgbGV0IG5leHRTdGF0ZSA9IHRoaXMuX3N0YXRlTWFwLmdldChuZXh0TXVsdGlzZXQpO1xyXG4gICAgICAgICAgICBpZiAobmV4dFN0YXRlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIG5leHRTdGF0ZSA9IG5ldyBNdWx0aXNldEVxdWl2YWxlbnRXcmFwcGVyPFQgJiBNdWx0aXNldEVxdWl2YWxlbnQ+KG5ld1N0ZXBOb2RlKHN0ZXAsIG5leHRNdWx0aXNldCwgY3VycmVudE5vZGUuY29udGVudCEpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlTWFwLnB1dChuZXh0U3RhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG5ld0VkZ2VSZWFjdGlvbihzdGVwLCBjdXJyZW50Tm9kZS5jb250ZW50ISk7XHJcbiAgICAgICAgICAgIGxldCBuZXh0Tm9kZSA9IG5leHRTdGF0ZS5ub2RlO1xyXG4gICAgICAgICAgICBpZiAobmV4dE5vZGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBjdXJyZW50Tm9kZS5hZGRDaGlsZChzdGVwLCBuZXh0U3RhdGUud3JhcHBlZCk7XHJcbiAgICAgICAgICAgICAgICBuZXh0U3RhdGUubm9kZSA9IG5leHROb2RlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudE5vZGUuYWRkQ2hpbGQoc3RlcCwgbmV4dE5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN1cnJlbnROb2RlID0gbmV4dE5vZGU7XHJcbiAgICAgICAgICAgIHByZWZpeC5wdXNoKHN0ZXApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbE5vZGVSZWFjdGlvbihjdXJyZW50Tm9kZS5jb250ZW50ISk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGVwU3RhdGUoY3VycmVudFN0YXRlOiBNdWx0aXNldCwgc3RlcDogc3RyaW5nKTogTXVsdGlzZXQge1xyXG4gICAgICAgIGNvbnN0IGNsb25lID0gY2xvbmVNdWx0aXNldChjdXJyZW50U3RhdGUpO1xyXG4gICAgICAgIGFkZFRvTXVsdGlzZXQoY2xvbmUsIHN0ZXApO1xyXG4gICAgICAgIHJldHVybiBjbG9uZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0R3JhcGhTdGF0ZXMoKTogQXJyYXk8VCAmIE11bHRpc2V0RXF1aXZhbGVudD4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZU1hcC52YWx1ZXMoKS5tYXAodyA9PiB3LndyYXBwZWQpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==