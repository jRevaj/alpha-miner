export class AbstractParser {
    constructor(allowedTypes) {
        this._allowedTypes = Array.isArray(allowedTypes) ? allowedTypes : [allowedTypes];
    }
    parse(text) {
        const lines = text.split('\n');
        if (!lines[0].startsWith(AbstractParser.TYPE_BLOCK)) {
            console.debug('file does not specify type in first line');
            return;
        }
        if (!this._allowedTypes.includes(lines[0].trimEnd().slice(AbstractParser.TYPE_BLOCK.length + 1))) {
            console.debug('bad file type');
            return;
        }
        lines.shift();
        return this.processFileLines(lines);
    }
    ;
}
AbstractParser.TYPE_BLOCK = '.type';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtcGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29tcG9uZW50cy9zcmMvbGliL3V0aWxpdHkvYWJzdHJhY3QtcGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBZ0IsY0FBYztJQU1oQyxZQUFzQixZQUFvQztRQUN0RCxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBRU0sS0FBSyxDQUFDLElBQVk7UUFDckIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDakQsT0FBTyxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO1lBQzFELE9BQU87U0FDVjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDOUYsT0FBTyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQTtZQUM5QixPQUFPO1NBQ1Y7UUFFRCxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDZCxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBQUEsQ0FBQzs7QUFyQnFCLHlCQUFVLEdBQUcsT0FBTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0UGFyc2VyPFQ+IHtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFRZUEVfQkxPQ0sgPSAnLnR5cGUnO1xyXG5cclxuICAgIHByb3RlY3RlZCByZWFkb25seSBfYWxsb3dlZFR5cGVzOiBBcnJheTxzdHJpbmc+O1xyXG5cclxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihhbGxvd2VkVHlwZXM6IEFycmF5PHN0cmluZz4gfCBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9hbGxvd2VkVHlwZXMgPSBBcnJheS5pc0FycmF5KGFsbG93ZWRUeXBlcykgPyBhbGxvd2VkVHlwZXMgOiBbYWxsb3dlZFR5cGVzXTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcGFyc2UodGV4dDogc3RyaW5nKTogVCB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgY29uc3QgbGluZXMgPSB0ZXh0LnNwbGl0KCdcXG4nKTtcclxuICAgICAgICBpZiAoIWxpbmVzWzBdLnN0YXJ0c1dpdGgoQWJzdHJhY3RQYXJzZXIuVFlQRV9CTE9DSykpIHtcclxuICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnZmlsZSBkb2VzIG5vdCBzcGVjaWZ5IHR5cGUgaW4gZmlyc3QgbGluZScpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5fYWxsb3dlZFR5cGVzLmluY2x1ZGVzKGxpbmVzWzBdLnRyaW1FbmQoKS5zbGljZShBYnN0cmFjdFBhcnNlci5UWVBFX0JMT0NLLmxlbmd0aCArIDEpKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdiYWQgZmlsZSB0eXBlJylcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGluZXMuc2hpZnQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzRmlsZUxpbmVzKGxpbmVzKTtcclxuICAgIH07XHJcblxyXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IHByb2Nlc3NGaWxlTGluZXMobGluZXM6IEFycmF5PHN0cmluZz4pOiBUIHwgdW5kZWZpbmVkO1xyXG59XHJcbiJdfQ==