import * as objectHash from 'object-hash';
export class MultisetMap {
    constructor() {
        this._map = new Map();
    }
    put(value) {
        const hash = this.hashKey(value.multiset);
        const mapped = this._map.get(hash);
        if (mapped === undefined) {
            this._map.set(hash, [value]);
        }
        else {
            const equivalent = mapped.find(ms => ms.equals(value.multiset));
            if (equivalent === undefined) {
                mapped.push(value);
            }
            else {
                equivalent.merge(value);
            }
        }
    }
    get(key) {
        const mapped = this._map.get(this.hashKey(key));
        if (mapped === undefined) {
            return undefined;
        }
        return mapped.find(ms => ms.equals(key));
    }
    hashKey(key) {
        return objectHash.sha1(key);
    }
    values() {
        return Array.from(this._map.values()).flat();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlzZXQtbWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29tcG9uZW50cy9zcmMvbGliL3V0aWxpdHkvbXVsdGlzZXQvbXVsdGlzZXQtbWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxVQUFVLE1BQU0sYUFBYSxDQUFDO0FBSzFDLE1BQU0sT0FBTyxXQUFXO0lBR3BCO1FBQ0ksSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFTSxHQUFHLENBQUMsS0FBNkI7UUFDcEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDaEM7YUFBTTtZQUNILE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBO1lBQy9ELElBQUksVUFBVSxLQUFLLFNBQVMsRUFBRTtnQkFDMUIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN0QjtpQkFBTTtnQkFDSCxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzNCO1NBQ0o7SUFDTCxDQUFDO0lBRU0sR0FBRyxDQUFDLEdBQWE7UUFDcEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2hELElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUN0QixPQUFPLFNBQVMsQ0FBQztTQUNwQjtRQUNELE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRU8sT0FBTyxDQUFDLEdBQWE7UUFDekIsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxNQUFNO1FBQ1QsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNqRCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBvYmplY3RIYXNoIGZyb20gJ29iamVjdC1oYXNoJztcclxuaW1wb3J0IHtNdWx0aXNldEVxdWl2YWxlbnR9IGZyb20gJy4vbXVsdGlzZXQtZXF1aXZhbGVudCc7XHJcbmltcG9ydCB7TXVsdGlzZXR9IGZyb20gJy4vbXVsdGlzZXQnO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBNdWx0aXNldE1hcDxUPiB7XHJcbiAgICBwcml2YXRlIF9tYXA6IE1hcDxzdHJpbmcsIEFycmF5PFQgJiBNdWx0aXNldEVxdWl2YWxlbnQ+PjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHB1dCh2YWx1ZTogVCAmIE11bHRpc2V0RXF1aXZhbGVudCkge1xyXG4gICAgICAgIGNvbnN0IGhhc2ggPSB0aGlzLmhhc2hLZXkodmFsdWUubXVsdGlzZXQpO1xyXG4gICAgICAgIGNvbnN0IG1hcHBlZCA9IHRoaXMuX21hcC5nZXQoaGFzaCk7XHJcbiAgICAgICAgaWYgKG1hcHBlZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcC5zZXQoaGFzaCwgW3ZhbHVlXSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgZXF1aXZhbGVudCA9IG1hcHBlZC5maW5kKG1zID0+IG1zLmVxdWFscyh2YWx1ZS5tdWx0aXNldCkpXHJcbiAgICAgICAgICAgIGlmIChlcXVpdmFsZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIG1hcHBlZC5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVxdWl2YWxlbnQubWVyZ2UodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQoa2V5OiBNdWx0aXNldCk6IChUICYgTXVsdGlzZXRFcXVpdmFsZW50KSB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgY29uc3QgbWFwcGVkID0gdGhpcy5fbWFwLmdldCh0aGlzLmhhc2hLZXkoa2V5KSk7XHJcbiAgICAgICAgaWYgKG1hcHBlZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXBwZWQuZmluZChtcyA9PiBtcy5lcXVhbHMoa2V5KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBoYXNoS2V5KGtleTogTXVsdGlzZXQpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBvYmplY3RIYXNoLnNoYTEoa2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdmFsdWVzKCk6IEFycmF5PFQgJiBNdWx0aXNldEVxdWl2YWxlbnQ+IHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl9tYXAudmFsdWVzKCkpLmZsYXQoKTtcclxuICAgIH1cclxufVxyXG4iXX0=