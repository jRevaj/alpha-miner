import { createUniqueString, IncrementingCounter } from './incrementing-counter';
import { iterate } from './iterate';
export class Relabeler {
    constructor() {
        this._existingLabels = new Set();
        this._labelCounter = new IncrementingCounter();
        this._labelMapping = new Map();
        this._labelOrder = new Map();
        this._nonUniqueIdentities = new Set();
        this._labelOrderIndex = new Map();
    }
    clone() {
        const result = new Relabeler();
        this._existingLabels.forEach(l => {
            result._existingLabels.add(l);
        });
        result._labelCounter.setCurrentValue(this._labelCounter.current());
        this._labelMapping.forEach((v, k) => {
            result._labelMapping.set(k, v);
        });
        this._labelOrder.forEach((v, k) => {
            result._labelOrder.set(k, [...v]);
        });
        this._nonUniqueIdentities.forEach(nui => {
            result._nonUniqueIdentities.add(nui);
        });
        return result;
    }
    getNewUniqueLabel(oldLabel) {
        return this.getNewLabel(oldLabel, false);
    }
    getNewLabelPreserveNonUniqueIdentities(oldLabel) {
        return this.getNewLabel(oldLabel, true);
    }
    getNewLabel(oldLabel, preserveNonUniqueIdentities) {
        if (!this._existingLabels.has(oldLabel)) {
            // label encountered for the first time
            this._existingLabels.add(oldLabel);
            this._labelMapping.set(oldLabel, oldLabel);
            if (preserveNonUniqueIdentities) {
                this._nonUniqueIdentities.add(oldLabel);
            }
            else {
                this._labelOrder.set(oldLabel, [oldLabel]);
                this._labelOrderIndex.set(oldLabel, 1);
            }
            return oldLabel;
        }
        else {
            // relabeling required
            let newLabelIndex = this._labelOrderIndex.get(oldLabel);
            if (newLabelIndex === undefined) {
                newLabelIndex = 0;
            }
            let relabelingOrder = this._labelOrder.get(oldLabel);
            if (relabelingOrder === undefined) {
                // relabeling collision or non-unique identity
                if (preserveNonUniqueIdentities && this._nonUniqueIdentities.has(oldLabel)) {
                    return oldLabel;
                }
                relabelingOrder = [];
                this._labelOrder.set(oldLabel, relabelingOrder);
                newLabelIndex = 0;
            }
            if (newLabelIndex >= relabelingOrder.length) {
                // new label must be generated
                const newLabel = createUniqueString(oldLabel, this._existingLabels, this._labelCounter);
                this._existingLabels.add(newLabel);
                relabelingOrder.push(newLabel);
                this._labelMapping.set(newLabel, oldLabel);
            }
            this._labelOrderIndex.set(oldLabel, newLabelIndex + 1);
            return relabelingOrder[newLabelIndex];
        }
    }
    restartSequence() {
        this._labelOrderIndex.clear();
    }
    getLabelMapping() {
        return this._labelMapping;
    }
    getLabelOrder() {
        return this._labelOrder;
    }
    uniquelyRelabelSequence(sequence) {
        this.relabel(sequence, false);
    }
    uniquelyRelabelSequences(sequences) {
        iterate(sequences, s => {
            this.uniquelyRelabelSequence(s);
        });
    }
    relabelSequencePreserveNonUniqueIdentities(sequence) {
        this.relabel(sequence, true);
    }
    relabelSequencesPreserveNonUniqueIdentities(sequences) {
        iterate(sequences, s => {
            this.relabelSequencePreserveNonUniqueIdentities(s);
        });
    }
    relabel(sequence, preserveIdentities) {
        this.restartSequence();
        for (let i = 0; i < sequence.length(); i++) {
            sequence.set(i, this.getNewLabel(sequence.get(i), preserveIdentities));
        }
    }
    undoSequenceLabeling(sequence) {
        for (let i = 0; i < sequence.length(); i++) {
            sequence.set(i, this.undoLabel(sequence.get(i)));
        }
    }
    undoSequencesLabeling(sequences) {
        iterate(sequences, s => {
            this.undoSequenceLabeling(s);
        });
    }
    undoLabel(label) {
        return this._labelMapping.get(label) ?? label;
    }
}
//# sourceMappingURL=data:application/json;base64,