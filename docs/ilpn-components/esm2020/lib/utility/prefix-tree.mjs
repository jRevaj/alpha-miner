export class PrefixTreeNode {
    constructor(content) {
        this._children = new Map();
        this.content = content;
    }
    get content() {
        return this._content;
    }
    set content(value) {
        this._content = value;
    }
    getChild(key) {
        return this._children.get(key);
    }
    addChild(key, content) {
        const child = new PrefixTreeNode(content);
        this._children.set(key, child);
        return child;
    }
    hasChildren() {
        return this._children.size !== 0;
    }
}
export class PrefixTree {
    constructor(rootContent) {
        this._root = new PrefixTreeNode(rootContent);
    }
    insert(path, newNodeContent, updateNodeContent, stepReaction = () => { }, newStepNode = () => undefined) {
        let currentNode = this._root;
        const prefix = [];
        for (let i = 0; i < path.length(); i++) {
            const step = path.get(i);
            stepReaction(step, currentNode.content, currentNode);
            let child = currentNode.getChild(step);
            if (child === undefined) {
                currentNode = currentNode.addChild(step, newStepNode(step, [...prefix], currentNode.content));
            }
            else {
                currentNode = child;
            }
            prefix.push(step);
        }
        if (currentNode.content !== undefined) {
            updateNodeContent(currentNode.content, currentNode);
        }
        else {
            currentNode.content = newNodeContent();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlZml4LXRyZWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb21wb25lbnRzL3NyYy9saWIvdXRpbGl0eS9wcmVmaXgtdHJlZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLE9BQU8sY0FBYztJQUt2QixZQUFZLE9BQVc7UUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDUCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQztJQUVELElBQUksT0FBTyxDQUFDLEtBQW9CO1FBQzVCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQzFCLENBQUM7SUFFTSxRQUFRLENBQUMsR0FBVztRQUN2QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFTSxRQUFRLENBQUMsR0FBVyxFQUFFLE9BQVc7UUFDcEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxjQUFjLENBQUksT0FBTyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQy9CLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFTSxXQUFXO1FBQ2QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUM7SUFDckMsQ0FBQztDQUNKO0FBRUQsTUFBTSxPQUFPLFVBQVU7SUFJbkIsWUFBWSxXQUFlO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxjQUFjLENBQUksV0FBVyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxJQUFvQixFQUNwQixjQUF1QixFQUN2QixpQkFBb0UsRUFDcEUsZUFBNEcsR0FBRyxFQUFFLEdBQUUsQ0FBQyxFQUNwSCxjQUFtRyxHQUFHLEVBQUUsQ0FBQyxTQUFTO1FBQzVILElBQUksV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDN0IsTUFBTSxNQUFNLEdBQWtCLEVBQUUsQ0FBQztRQUNqQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3BDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekIsWUFBWSxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQ3JELElBQUksS0FBSyxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkMsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO2dCQUNyQixXQUFXLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7YUFDakc7aUJBQU07Z0JBQ0gsV0FBVyxHQUFHLEtBQUssQ0FBQzthQUN2QjtZQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDckI7UUFDRCxJQUFJLFdBQVcsQ0FBQyxPQUFPLEtBQUssU0FBUyxFQUFFO1lBQ25DLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDdkQ7YUFBTTtZQUNILFdBQVcsQ0FBQyxPQUFPLEdBQUcsY0FBYyxFQUFFLENBQUM7U0FDMUM7SUFDTCxDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N0cmluZ1NlcXVlbmNlfSBmcm9tICcuL3N0cmluZy1zZXF1ZW5jZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgUHJlZml4VHJlZU5vZGU8VD4ge1xyXG5cclxuICAgIHByaXZhdGUgX2NoaWxkcmVuOiBNYXA8c3RyaW5nLCBQcmVmaXhUcmVlTm9kZTxUPj47XHJcbiAgICBwcml2YXRlIF9jb250ZW50OiBUIHwgdW5kZWZpbmVkO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbnRlbnQ/OiBUKSB7XHJcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4gPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5jb250ZW50ID0gY29udGVudDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY29udGVudCgpOiBUIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudDtcclxuICAgIH1cclxuXHJcbiAgICBzZXQgY29udGVudCh2YWx1ZTogVCB8IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHRoaXMuX2NvbnRlbnQgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0Q2hpbGQoa2V5OiBzdHJpbmcpOiBQcmVmaXhUcmVlTm9kZTxUPiB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuLmdldChrZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRDaGlsZChrZXk6IHN0cmluZywgY29udGVudD86IFQpOiBQcmVmaXhUcmVlTm9kZTxUPiB7XHJcbiAgICAgICAgY29uc3QgY2hpbGQgPSBuZXcgUHJlZml4VHJlZU5vZGU8VD4oY29udGVudCk7XHJcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4uc2V0KGtleSwgY2hpbGQpO1xyXG4gICAgICAgIHJldHVybiBjaGlsZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaGFzQ2hpbGRyZW4oKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuLnNpemUgIT09IDA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQcmVmaXhUcmVlPFQ+IHtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9yb290OiBQcmVmaXhUcmVlTm9kZTxUPjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihyb290Q29udGVudD86IFQpIHtcclxuICAgICAgICB0aGlzLl9yb290ID0gbmV3IFByZWZpeFRyZWVOb2RlPFQ+KHJvb3RDb250ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaW5zZXJ0KHBhdGg6IFN0cmluZ1NlcXVlbmNlLFxyXG4gICAgICAgICAgICAgICAgICBuZXdOb2RlQ29udGVudDogKCkgPT4gVCxcclxuICAgICAgICAgICAgICAgICAgdXBkYXRlTm9kZUNvbnRlbnQ6IChub2RlOiBULCB0cmVlV3JhcHBlcjogUHJlZml4VHJlZU5vZGU8VD4pID0+IHZvaWQsXHJcbiAgICAgICAgICAgICAgICAgIHN0ZXBSZWFjdGlvbjogKHN0ZXA6IHN0cmluZywgcHJldmlvdXNOb2RlOiBUIHwgdW5kZWZpbmVkLCBwcmV2aW91c1RyZWVXcmFwcGVyOiBQcmVmaXhUcmVlTm9kZTxUPikgPT4gdm9pZCA9ICgpID0+IHt9LFxyXG4gICAgICAgICAgICAgICAgICBuZXdTdGVwTm9kZTogKHN0ZXA6IHN0cmluZywgcHJlZml4OiBBcnJheTxzdHJpbmc+LCBwcmV2aW91c05vZGU6IFQgfCB1bmRlZmluZWQpID0+IFQgfCB1bmRlZmluZWQgPSAoKSA9PiB1bmRlZmluZWQpIHtcclxuICAgICAgICBsZXQgY3VycmVudE5vZGUgPSB0aGlzLl9yb290O1xyXG4gICAgICAgIGNvbnN0IHByZWZpeDogQXJyYXk8c3RyaW5nPiA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aC5sZW5ndGgoKTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0ZXAgPSBwYXRoLmdldChpKTtcclxuICAgICAgICAgICAgc3RlcFJlYWN0aW9uKHN0ZXAsIGN1cnJlbnROb2RlLmNvbnRlbnQsIGN1cnJlbnROb2RlKTtcclxuICAgICAgICAgICAgbGV0IGNoaWxkID0gY3VycmVudE5vZGUuZ2V0Q2hpbGQoc3RlcCk7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLmFkZENoaWxkKHN0ZXAsIG5ld1N0ZXBOb2RlKHN0ZXAsIFsuLi5wcmVmaXhdLCBjdXJyZW50Tm9kZS5jb250ZW50KSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZSA9IGNoaWxkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHByZWZpeC5wdXNoKHN0ZXApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY3VycmVudE5vZGUuY29udGVudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZU5vZGVDb250ZW50KGN1cnJlbnROb2RlLmNvbnRlbnQsIGN1cnJlbnROb2RlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjdXJyZW50Tm9kZS5jb250ZW50ID0gbmV3Tm9kZUNvbnRlbnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==