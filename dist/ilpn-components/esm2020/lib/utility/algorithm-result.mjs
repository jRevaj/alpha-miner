import { AbstractParser } from './abstract-parser';
import { DropFile } from './drop-file';
export class AlgorithmResult {
    constructor(algorithmName, startTimeMs, endTimeMs) {
        this._algorithmName = algorithmName;
        if (startTimeMs !== undefined && endTimeMs !== undefined) {
            this._runtimeMs = endTimeMs - startTimeMs;
        }
        this._output = [];
    }
    addOutputLine(outputLine) {
        this._output.push(outputLine);
    }
    serialise() {
        let result = `${AbstractParser.TYPE_BLOCK} ${AlgorithmResult.RESULT_TYPE}
${this._algorithmName}`;
        if (this._runtimeMs !== undefined) {
            result = result.concat(`
${AlgorithmResult.RUNTIME_BLOCK}
${this._runtimeMs.toFixed(3)} ms`);
        }
        result = result.concat(`\n${AlgorithmResult.OUTPUT_BLOCK}`);
        this._output.forEach(line => {
            result = result.concat(`\n${line}`);
        });
        return result;
    }
    toDropFile(fileName, suffix) {
        return new DropFile(fileName, this.serialise(), suffix);
    }
}
AlgorithmResult.RESULT_TYPE = 'result';
AlgorithmResult.RUNTIME_BLOCK = '.runtime';
AlgorithmResult.OUTPUT_BLOCK = '.output';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxnb3JpdGhtLXJlc3VsdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvbXBvbmVudHMvc3JjL2xpYi91dGlsaXR5L2FsZ29yaXRobS1yZXN1bHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFFckMsTUFBTSxPQUFPLGVBQWU7SUFVeEIsWUFBWSxhQUFxQixFQUFFLFdBQW9CLEVBQUUsU0FBa0I7UUFDdkUsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUM7UUFDcEMsSUFBSSxXQUFXLEtBQUssU0FBUyxJQUFJLFNBQVMsS0FBSyxTQUFTLEVBQUU7WUFDdEQsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLEdBQUcsV0FBVyxDQUFDO1NBQzdDO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVNLGFBQWEsQ0FBQyxVQUFrQjtRQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRU0sU0FBUztRQUNaLElBQUksTUFBTSxHQUFHLEdBQUcsY0FBYyxDQUFDLFVBQVUsSUFBSSxlQUFlLENBQUMsV0FBVztFQUM5RSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFaEIsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLFNBQVMsRUFBRTtZQUMvQixNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztFQUNqQyxlQUFlLENBQUMsYUFBYTtFQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUNwQixDQUFDO1NBQ0w7UUFFRCxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLGVBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBRTVELElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3hCLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFTSxVQUFVLENBQUMsUUFBZ0IsRUFBRSxNQUFlO1FBQy9DLE9BQU8sSUFBSSxRQUFRLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM1RCxDQUFDOztBQTFDc0IsMkJBQVcsR0FBRyxRQUFRLENBQUM7QUFDdkIsNkJBQWEsR0FBRyxVQUFVLENBQUM7QUFDM0IsNEJBQVksR0FBRyxTQUFTLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Fic3RyYWN0UGFyc2VyfSBmcm9tICcuL2Fic3RyYWN0LXBhcnNlcic7XHJcbmltcG9ydCB7RHJvcEZpbGV9IGZyb20gJy4vZHJvcC1maWxlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBBbGdvcml0aG1SZXN1bHQge1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUkVTVUxUX1RZUEUgPSAncmVzdWx0JztcclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgUlVOVElNRV9CTE9DSyA9ICcucnVudGltZSc7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IE9VVFBVVF9CTE9DSyA9ICcub3V0cHV0JztcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9hbGdvcml0aG1OYW1lOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9ydW50aW1lTXM6IG51bWJlciB8IHVuZGVmaW5lZDtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX291dHB1dDogQXJyYXk8c3RyaW5nPjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhbGdvcml0aG1OYW1lOiBzdHJpbmcsIHN0YXJ0VGltZU1zPzogbnVtYmVyLCBlbmRUaW1lTXM/OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLl9hbGdvcml0aG1OYW1lID0gYWxnb3JpdGhtTmFtZTtcclxuICAgICAgICBpZiAoc3RhcnRUaW1lTXMgIT09IHVuZGVmaW5lZCAmJiBlbmRUaW1lTXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9ydW50aW1lTXMgPSBlbmRUaW1lTXMgLSBzdGFydFRpbWVNcztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fb3V0cHV0ID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZE91dHB1dExpbmUob3V0cHV0TGluZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fb3V0cHV0LnB1c2gob3V0cHV0TGluZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNlcmlhbGlzZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBgJHtBYnN0cmFjdFBhcnNlci5UWVBFX0JMT0NLfSAke0FsZ29yaXRobVJlc3VsdC5SRVNVTFRfVFlQRX1cclxuJHt0aGlzLl9hbGdvcml0aG1OYW1lfWA7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9ydW50aW1lTXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KGBcclxuJHtBbGdvcml0aG1SZXN1bHQuUlVOVElNRV9CTE9DS31cclxuJHt0aGlzLl9ydW50aW1lTXMudG9GaXhlZCgzKX0gbXNgXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KGBcXG4ke0FsZ29yaXRobVJlc3VsdC5PVVRQVVRfQkxPQ0t9YCk7XHJcblxyXG4gICAgICAgIHRoaXMuX291dHB1dC5mb3JFYWNoKGxpbmUgPT4ge1xyXG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KGBcXG4ke2xpbmV9YCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRvRHJvcEZpbGUoZmlsZU5hbWU6IHN0cmluZywgc3VmZml4Pzogc3RyaW5nKTogRHJvcEZpbGUge1xyXG4gICAgICAgIHJldHVybiBuZXcgRHJvcEZpbGUoZmlsZU5hbWUsIHRoaXMuc2VyaWFsaXNlKCksIHN1ZmZpeCk7XHJcbiAgICB9XHJcbn1cclxuIl19