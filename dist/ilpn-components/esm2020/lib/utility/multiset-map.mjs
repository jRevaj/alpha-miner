import * as objectHash from 'object-hash';
export class MultisetEquivalent {
    constructor(_multiset) {
        this._multiset = _multiset;
    }
    get multiset() {
        return this._multiset;
    }
    equals(ms) {
        const keys = Object.keys(this._multiset);
        if (keys.length !== Object.keys(ms).length) {
            return false;
        }
        for (const key of keys) {
            if (this._multiset[key] !== ms[key]) {
                return false;
            }
        }
        return true;
    }
}
export class MultisetMap {
    constructor() {
        this._map = new Map();
    }
    put(value) {
        const hash = this.hashKey(value.multiset);
        const mapped = this._map.get(hash);
        if (mapped === undefined) {
            this._map.set(hash, [value]);
        }
        else {
            const equivalent = mapped.find(ms => ms.equals(value.multiset));
            if (equivalent === undefined) {
                mapped.push(value);
            }
            else {
                equivalent.merge(value);
            }
        }
    }
    get(key) {
        const mapped = this._map.get(this.hashKey(key));
        if (mapped === undefined) {
            return undefined;
        }
        return mapped.find(ms => ms.equals(key));
    }
    hashKey(key) {
        return objectHash.sha1(key);
    }
    values() {
        return Array.from(this._map.values()).flat();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGlzZXQtbWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29tcG9uZW50cy9zcmMvbGliL3V0aWxpdHkvbXVsdGlzZXQtbWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxVQUFVLE1BQU0sYUFBYSxDQUFDO0FBSTFDLE1BQU0sT0FBZ0Isa0JBQWtCO0lBRXBDLFlBQThCLFNBQW1CO1FBQW5CLGNBQVMsR0FBVCxTQUFTLENBQVU7SUFDakQsQ0FBQztJQUVELElBQUksUUFBUTtRQUNSLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQVk7UUFDZixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6QyxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUU7WUFDeEMsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFFRCxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtZQUNwQixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNqQyxPQUFPLEtBQUssQ0FBQzthQUNoQjtTQUNKO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUdKO0FBRUQsTUFBTSxPQUFPLFdBQVc7SUFHcEI7UUFDSSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVNLEdBQUcsQ0FBQyxLQUE2QjtRQUNwQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMxQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQyxJQUFJLE1BQU0sS0FBSyxTQUFTLEVBQUU7WUFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUNoQzthQUFNO1lBQ0gsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7WUFDL0QsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO2dCQUMxQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3RCO2lCQUFNO2dCQUNILFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDM0I7U0FDSjtJQUNMLENBQUM7SUFFTSxHQUFHLENBQUMsR0FBYTtRQUNwQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDaEQsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ3RCLE9BQU8sU0FBUyxDQUFDO1NBQ3BCO1FBQ0QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTyxPQUFPLENBQUMsR0FBYTtRQUN6QixPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVNLE1BQU07UUFDVCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2pELENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG9iamVjdEhhc2ggZnJvbSAnb2JqZWN0LWhhc2gnO1xyXG5cclxuZXhwb3J0IHR5cGUgTXVsdGlzZXQgPSB7W2s6IHN0cmluZ106IG51bWJlcn07XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTXVsdGlzZXRFcXVpdmFsZW50IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocHJpdmF0ZSBfbXVsdGlzZXQ6IE11bHRpc2V0KSB7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IG11bHRpc2V0KCk6IE11bHRpc2V0IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbXVsdGlzZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgZXF1YWxzKG1zOiBNdWx0aXNldCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLl9tdWx0aXNldCk7XHJcbiAgICAgICAgaWYgKGtleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhtcykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX211bHRpc2V0W2tleV0gIT09IG1zW2tleV0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgYWJzdHJhY3QgbWVyZ2UobXM6IE11bHRpc2V0RXF1aXZhbGVudCk6IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBNdWx0aXNldE1hcDxUPiB7XHJcbiAgICBwcml2YXRlIF9tYXA6IE1hcDxzdHJpbmcsIEFycmF5PFQgJiBNdWx0aXNldEVxdWl2YWxlbnQ+PjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLl9tYXAgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHB1dCh2YWx1ZTogVCAmIE11bHRpc2V0RXF1aXZhbGVudCkge1xyXG4gICAgICAgIGNvbnN0IGhhc2ggPSB0aGlzLmhhc2hLZXkodmFsdWUubXVsdGlzZXQpO1xyXG4gICAgICAgIGNvbnN0IG1hcHBlZCA9IHRoaXMuX21hcC5nZXQoaGFzaCk7XHJcbiAgICAgICAgaWYgKG1hcHBlZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hcC5zZXQoaGFzaCwgW3ZhbHVlXSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgZXF1aXZhbGVudCA9IG1hcHBlZC5maW5kKG1zID0+IG1zLmVxdWFscyh2YWx1ZS5tdWx0aXNldCkpXHJcbiAgICAgICAgICAgIGlmIChlcXVpdmFsZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIG1hcHBlZC5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVxdWl2YWxlbnQubWVyZ2UodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQoa2V5OiBNdWx0aXNldCk6IChUICYgTXVsdGlzZXRFcXVpdmFsZW50KSB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgY29uc3QgbWFwcGVkID0gdGhpcy5fbWFwLmdldCh0aGlzLmhhc2hLZXkoa2V5KSk7XHJcbiAgICAgICAgaWYgKG1hcHBlZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtYXBwZWQuZmluZChtcyA9PiBtcy5lcXVhbHMoa2V5KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBoYXNoS2V5KGtleTogTXVsdGlzZXQpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBvYmplY3RIYXNoLnNoYTEoa2V5KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdmFsdWVzKCk6IEFycmF5PFQgJiBNdWx0aXNldEVxdWl2YWxlbnQ+IHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl9tYXAudmFsdWVzKCkpLmZsYXQoKTtcclxuICAgIH1cclxufVxyXG4iXX0=