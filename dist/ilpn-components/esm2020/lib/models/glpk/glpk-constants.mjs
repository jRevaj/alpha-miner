/**
 * All constants copied from the `glpk.js` library for better usability
 */
export var Goal;
(function (Goal) {
    /**
     * GLP_MIN
     */
    Goal[Goal["MINIMUM"] = 1] = "MINIMUM";
    /**
     * GLP_MAX
     */
    Goal[Goal["MAXIMUM"] = 2] = "MAXIMUM";
})(Goal || (Goal = {}));
export var Constraint;
(function (Constraint) {
    /**
     * GLP_FR
     */
    Constraint[Constraint["FREE_VARIABLE"] = 1] = "FREE_VARIABLE";
    /**
     * GLP_LO
     */
    Constraint[Constraint["LOWER_BOUND"] = 2] = "LOWER_BOUND";
    /**
     * GLP_UP
     */
    Constraint[Constraint["UPPER_BOUND"] = 3] = "UPPER_BOUND";
    /**
     * GLP_DB
     */
    Constraint[Constraint["DOUBLE_BOUND"] = 4] = "DOUBLE_BOUND";
    /**
     * GLP_FX
     */
    Constraint[Constraint["FIXED_VARIABLE"] = 5] = "FIXED_VARIABLE";
})(Constraint || (Constraint = {}));
export var MessageLevel;
(function (MessageLevel) {
    /**
     * GLP_MSG_OFF
     */
    MessageLevel[MessageLevel["OFF"] = 0] = "OFF";
    /**
     * GLP_MSG_ERR
     */
    MessageLevel[MessageLevel["ERROR"] = 1] = "ERROR";
    /**
     * GLP_MSG_ON
     */
    MessageLevel[MessageLevel["STANDARD"] = 2] = "STANDARD";
    /**
     * GLP_MSG_ALL
     */
    MessageLevel[MessageLevel["ALL"] = 3] = "ALL";
    /**
     * GLP_MSG_DBG
     */
    MessageLevel[MessageLevel["DEBUG"] = 4] = "DEBUG";
})(MessageLevel || (MessageLevel = {}));
export var Solution;
(function (Solution) {
    /**
     * GLP_UNDEF
     */
    Solution[Solution["UNDEFINED"] = 1] = "UNDEFINED";
    /**
     * GLP_FEAS
     */
    Solution[Solution["FEASIBLE"] = 2] = "FEASIBLE";
    /**
     * GLP_INFEAS
     */
    Solution[Solution["INFEASIBLE"] = 3] = "INFEASIBLE";
    /**
     * GLP_NOFEAS
     */
    Solution[Solution["NO_SOLUTION"] = 4] = "NO_SOLUTION";
    /**
     * GLP_OPT
     */
    Solution[Solution["OPTIMAL"] = 5] = "OPTIMAL";
    /**
     * GLP_UNBND
     */
    Solution[Solution["UNBOUNDED"] = 6] = "UNBOUNDED";
})(Solution || (Solution = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xway1jb25zdGFudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb21wb25lbnRzL3NyYy9saWIvbW9kZWxzL2dscGsvZ2xway1jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0dBRUc7QUFFSCxNQUFNLENBQU4sSUFBWSxJQVNYO0FBVEQsV0FBWSxJQUFJO0lBQ1o7O09BRUc7SUFDSCxxQ0FBVyxDQUFBO0lBQ1g7O09BRUc7SUFDSCxxQ0FBVyxDQUFBO0FBQ2YsQ0FBQyxFQVRXLElBQUksS0FBSixJQUFJLFFBU2Y7QUFFRCxNQUFNLENBQU4sSUFBWSxVQXFCWDtBQXJCRCxXQUFZLFVBQVU7SUFDbEI7O09BRUc7SUFDSCw2REFBaUIsQ0FBQTtJQUNqQjs7T0FFRztJQUNILHlEQUFlLENBQUE7SUFDZjs7T0FFRztJQUNILHlEQUFlLENBQUE7SUFDZjs7T0FFRztJQUNILDJEQUFnQixDQUFBO0lBQ2hCOztPQUVHO0lBQ0gsK0RBQWtCLENBQUE7QUFDdEIsQ0FBQyxFQXJCVyxVQUFVLEtBQVYsVUFBVSxRQXFCckI7QUFFRCxNQUFNLENBQU4sSUFBWSxZQXFCWDtBQXJCRCxXQUFZLFlBQVk7SUFDcEI7O09BRUc7SUFDSCw2Q0FBTyxDQUFBO0lBQ1A7O09BRUc7SUFDSCxpREFBUyxDQUFBO0lBQ1Q7O09BRUc7SUFDSCx1REFBWSxDQUFBO0lBQ1o7O09BRUc7SUFDSCw2Q0FBTyxDQUFBO0lBQ1A7O09BRUc7SUFDSCxpREFBUyxDQUFBO0FBQ2IsQ0FBQyxFQXJCVyxZQUFZLEtBQVosWUFBWSxRQXFCdkI7QUFFRCxNQUFNLENBQU4sSUFBWSxRQXlCWDtBQXpCRCxXQUFZLFFBQVE7SUFDaEI7O09BRUc7SUFDSCxpREFBYSxDQUFBO0lBQ2I7O09BRUc7SUFDSCwrQ0FBWSxDQUFBO0lBQ1o7O09BRUc7SUFDSCxtREFBYyxDQUFBO0lBQ2Q7O09BRUc7SUFDSCxxREFBZSxDQUFBO0lBQ2Y7O09BRUc7SUFDSCw2Q0FBVyxDQUFBO0lBQ1g7O09BRUc7SUFDSCxpREFBYSxDQUFBO0FBQ2pCLENBQUMsRUF6QlcsUUFBUSxLQUFSLFFBQVEsUUF5Qm5CIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEFsbCBjb25zdGFudHMgY29waWVkIGZyb20gdGhlIGBnbHBrLmpzYCBsaWJyYXJ5IGZvciBiZXR0ZXIgdXNhYmlsaXR5XHJcbiAqL1xyXG5cclxuZXhwb3J0IGVudW0gR29hbCB7XHJcbiAgICAvKipcclxuICAgICAqIEdMUF9NSU5cclxuICAgICAqL1xyXG4gICAgTUlOSU1VTSA9IDEsXHJcbiAgICAvKipcclxuICAgICAqIEdMUF9NQVhcclxuICAgICAqL1xyXG4gICAgTUFYSU1VTSA9IDIsXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIENvbnN0cmFpbnQge1xyXG4gICAgLyoqXHJcbiAgICAgKiBHTFBfRlJcclxuICAgICAqL1xyXG4gICAgRlJFRV9WQVJJQUJMRSA9IDEsXHJcbiAgICAvKipcclxuICAgICAqIEdMUF9MT1xyXG4gICAgICovXHJcbiAgICBMT1dFUl9CT1VORCA9IDIsXHJcbiAgICAvKipcclxuICAgICAqIEdMUF9VUFxyXG4gICAgICovXHJcbiAgICBVUFBFUl9CT1VORCA9IDMsXHJcbiAgICAvKipcclxuICAgICAqIEdMUF9EQlxyXG4gICAgICovXHJcbiAgICBET1VCTEVfQk9VTkQgPSA0LFxyXG4gICAgLyoqXHJcbiAgICAgKiBHTFBfRlhcclxuICAgICAqL1xyXG4gICAgRklYRURfVkFSSUFCTEUgPSA1LFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBNZXNzYWdlTGV2ZWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBHTFBfTVNHX09GRlxyXG4gICAgICovXHJcbiAgICBPRkYgPSAwLFxyXG4gICAgLyoqXHJcbiAgICAgKiBHTFBfTVNHX0VSUlxyXG4gICAgICovXHJcbiAgICBFUlJPUiA9IDEsXHJcbiAgICAvKipcclxuICAgICAqIEdMUF9NU0dfT05cclxuICAgICAqL1xyXG4gICAgU1RBTkRBUkQgPSAyLFxyXG4gICAgLyoqXHJcbiAgICAgKiBHTFBfTVNHX0FMTFxyXG4gICAgICovXHJcbiAgICBBTEwgPSAzLFxyXG4gICAgLyoqXHJcbiAgICAgKiBHTFBfTVNHX0RCR1xyXG4gICAgICovXHJcbiAgICBERUJVRyA9IDRcclxufVxyXG5cclxuZXhwb3J0IGVudW0gU29sdXRpb24ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBHTFBfVU5ERUZcclxuICAgICAqL1xyXG4gICAgVU5ERUZJTkVEID0gMSxcclxuICAgIC8qKlxyXG4gICAgICogR0xQX0ZFQVNcclxuICAgICAqL1xyXG4gICAgRkVBU0lCTEUgPSAyLFxyXG4gICAgLyoqXHJcbiAgICAgKiBHTFBfSU5GRUFTXHJcbiAgICAgKi9cclxuICAgIElORkVBU0lCTEUgPSAzLFxyXG4gICAgLyoqXHJcbiAgICAgKiBHTFBfTk9GRUFTXHJcbiAgICAgKi9cclxuICAgIE5PX1NPTFVUSU9OID0gNCxcclxuICAgIC8qKlxyXG4gICAgICogR0xQX09QVFxyXG4gICAgICovXHJcbiAgICBPUFRJTUFMID0gNSxcclxuICAgIC8qKlxyXG4gICAgICogR0xQX1VOQk5EXHJcbiAgICAgKi9cclxuICAgIFVOQk9VTkRFRCA9IDZcclxufVxyXG4iXX0=