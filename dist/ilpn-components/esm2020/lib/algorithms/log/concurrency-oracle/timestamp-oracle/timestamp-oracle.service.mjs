import { Injectable } from '@angular/core';
import { ConcurrencyRelation } from '../../../../models/concurrency/model/concurrency-relation';
import { Relabeler } from '../../../../utility/relabeler';
import { Lifecycle } from '../../../../models/log/model/lifecycle';
import { OccurenceMatrixType, OccurrenceMatrix } from '../occurrence-matrix';
import { LogCleaner } from '../../log-cleaner';
import * as i0 from "@angular/core";
export class TimestampOracleService extends LogCleaner {
    determineConcurrency(log, config = {}) {
        if (log.length === 0) {
            return ConcurrencyRelation.noConcurrency();
        }
        log.forEach(t => {
            this.filterTraceAndPairStartCompleteEvents(t);
        });
        const relabeler = new Relabeler();
        if (config.distinguishSameLabels) {
            this.relabelPairedLog(log, relabeler);
        }
        else {
            relabeler.relabelSequencesPreserveNonUniqueIdentities(log);
        }
        const matrix = this.constructOccurrenceMatrix(log, !!config.distinguishSameLabels);
        return ConcurrencyRelation.fromOccurrenceMatrix(matrix, relabeler);
    }
    filterTraceAndPairStartCompleteEvents(trace) {
        const startedEvents = new Map();
        for (const e of trace.events) {
            switch (e.lifecycle) {
                case Lifecycle.START:
                    if (startedEvents.has(e.name)) {
                        throw new Error('TimestampOracle does not currently support auto-concurrency in the log!');
                    }
                    startedEvents.set(e.name, e);
                    break;
                case Lifecycle.COMPLETE:
                    if (startedEvents.has(e.name)) {
                        const pair = startedEvents.get(e.name);
                        e.setPairEvent(pair);
                        pair.setPairEvent(e);
                        startedEvents.delete(e.name);
                    }
                    break;
            }
        }
        if (startedEvents.size > 0) {
            // unpaired start events exist
            const unpaired = Array.from(startedEvents.values());
            trace.events = trace.events.filter(e => !unpaired.includes(e));
        }
    }
    relabelPairedLog(log, relabeler) {
        const filteredLog = this.cleanLog(log);
        relabeler.uniquelyRelabelSequences(filteredLog);
        for (const trace of filteredLog) {
            for (const event of trace.events) {
                const pair = event.getPairEvent();
                if (pair !== undefined) {
                    pair.name = event.name;
                }
            }
        }
    }
    constructOccurrenceMatrix(log, unique) {
        const matrix = new OccurrenceMatrix(unique ? OccurenceMatrixType.UNIQUE : OccurenceMatrixType.WILDCARD);
        for (const trace of log) {
            const startedEvents = new Set();
            for (const event of trace.events) {
                switch (event.lifecycle) {
                    case Lifecycle.START:
                        this.addAllInProgressToMatrix(event.name, startedEvents, matrix);
                        startedEvents.add(event.name);
                        break;
                    case Lifecycle.COMPLETE:
                        if (startedEvents.has(event.name)) {
                            startedEvents.delete(event.name);
                        }
                        else {
                            // standalone
                            this.addAllInProgressToMatrix(event.name, startedEvents, matrix);
                        }
                        break;
                }
            }
        }
        return matrix;
    }
    addAllInProgressToMatrix(started, inProgress, matrix) {
        for (const progress of inProgress) {
            matrix.add(started, progress);
            matrix.add(progress, started);
        }
    }
}
TimestampOracleService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TimestampOracleService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
TimestampOracleService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TimestampOracleService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.3", ngImport: i0, type: TimestampOracleService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,