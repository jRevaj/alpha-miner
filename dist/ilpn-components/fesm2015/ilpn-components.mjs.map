{"version":3,"file":"ilpn-components.mjs","sources":["../../../projects/components/src/lib/components/layout/footer/footer.component.ts","../../../projects/components/src/lib/components/layout/footer/footer.component.html","../../../projects/components/src/lib/components/layout/page-layout/page-layout.component.ts","../../../projects/components/src/lib/components/layout/page-layout/page-layout.component.html","../../../projects/components/src/lib/utility/drop-file.ts","../../../projects/components/src/lib/utility/file-reader.service.ts","../../../projects/components/src/lib/components/interaction/file-display/file-display.component.ts","../../../projects/components/src/lib/components/interaction/file-display/file-display.component.html","../../../projects/components/src/lib/components/interaction/file-upload/file-upload.component.ts","../../../projects/components/src/lib/components/interaction/file-upload/file-upload.component.html","../../../projects/components/src/lib/components/interaction/file-download/file-download.component.ts","../../../projects/components/src/lib/components/interaction/file-download/file-download.component.html","../../../projects/components/src/lib/components/interaction/info-card/info-card.component.ts","../../../projects/components/src/lib/components/interaction/info-card/info-card.component.html","../../../projects/components/src/lib/components/interaction/descriptive-link/descriptive-link.component.ts","../../../projects/components/src/lib/components/interaction/descriptive-link/descriptive-link.component.html","../../../projects/components/src/lib/components/ilpn-components.module.ts","../../../projects/components/src/lib/components/layout/file-display.ts","../../../projects/components/src/lib/utility/get-by-id.ts","../../../projects/components/src/lib/models/pn/model/id-point.ts","../../../projects/components/src/lib/models/pn/model/node.ts","../../../projects/components/src/lib/models/pn/model/place.ts","../../../projects/components/src/lib/models/pn/model/transition.ts","../../../projects/components/src/lib/models/pn/model/arc.ts","../../../projects/components/src/lib/utility/incrementing-counter.ts","../../../projects/components/src/lib/models/pn/model/marking.ts","../../../projects/components/src/lib/models/pn/model/petri-net.ts","../../../projects/components/src/lib/models/pn/model/partial-order-net-with-contained-traces.ts","../../../projects/components/src/lib/models/pn/parser/block-type.ts","../../../projects/components/src/lib/utility/abstract-parser.ts","../../../projects/components/src/lib/models/pn/parser/petri-net-serialisation.service.ts","../../../projects/components/src/lib/utility/abstract-block-parser.ts","../../../projects/components/src/lib/models/pn/parser/petri-net-parser.service.ts","../../../projects/components/src/lib/models/po/model/event.ts","../../../projects/components/src/lib/models/po/model/partial-order.ts","../../../projects/components/src/lib/models/po/parser/block-type.ts","../../../projects/components/src/lib/models/po/parser/partial-order-parser.service.ts","../../../projects/components/src/lib/models/log/model/trace.ts","../../../projects/components/src/lib/models/log/model/logEvent.ts","../../../projects/components/src/lib/models/log/model/lifecycle.ts","../../../projects/components/src/lib/models/log/parser/xes-log-parser.service.ts","../../../projects/components/src/lib/utility/iterate.ts","../../../projects/components/src/lib/utility/relabeler.ts","../../../projects/components/src/lib/algorithms/log/concurrency-oracle/occurrence-matrix.ts","../../../projects/components/src/lib/models/concurrency/model/concurrency-relation.ts","../../../projects/components/src/lib/models/concurrency/parser/concurrency-serialisation.service.ts","../../../projects/components/src/lib/models/concurrency/parser/concurrency-parser.service.ts","../../../projects/components/src/lib/utility/algorithm-result.ts","../../../projects/components/src/lib/utility/arraify.ts","../../../projects/components/src/lib/utility/multiset-map.ts","../../../projects/components/src/lib/utility/prefix-tree.ts","../../../projects/components/src/lib/utility/map-set.ts","../../../projects/components/src/lib/utility/string-sequence.ts","../../../projects/components/src/lib/models/glpk/glpk-constants.ts","../../../projects/components/src/lib/algorithms/pn/regions/classes/constraints-with-new-variables.ts","../../../projects/components/src/lib/algorithms/pn/regions/classes/region-ilp-solver.ts","../../../projects/components/src/lib/algorithms/pn/regions/petri-net-region-transformer.service.ts","../../../projects/components/src/lib/algorithms/pn/regions/petri-net-regions.service.ts","../../../projects/components/src/lib/algorithms/pn/regions/classes/synthesis-result.ts","../../../projects/components/src/lib/algorithms/pn/regions/classes/region-synthesiser.ts","../../../projects/components/src/lib/algorithms/pn/regions/petri-net-region-synthesis.service.ts","../../../projects/components/src/lib/algorithms/flow-network/max-flow-preflow-n3.ts","../../../projects/components/src/lib/algorithms/pn/validation/classes/lpo-validator.ts","../../../projects/components/src/lib/algorithms/pn/validation/classes/validation-result.ts","../../../projects/components/src/lib/algorithms/pn/validation/lpo-flow-validator.ts","../../../projects/components/src/lib/algorithms/pn/validation/lpo-fire-validator.ts","../../../projects/components/src/lib/algorithms/pn/synthesis/prime-miner-result.ts","../../../projects/components/src/lib/algorithms/pn/isomorphism/classes/mapping-counter.ts","../../../projects/components/src/lib/algorithms/pn/isomorphism/classes/mapping-manager.ts","../../../projects/components/src/lib/algorithms/pn/transformation/petri-net-to-partial-order-transformer.service.ts","../../../projects/components/src/lib/algorithms/po/isomorphism/model/isomorphism-candidate.ts","../../../projects/components/src/lib/algorithms/po/isomorphism/partial-order-isomorphism.service.ts","../../../projects/components/src/lib/algorithms/pn/isomorphism/petri-net-isomorphism.service.ts","../../../projects/components/src/lib/algorithms/log/log-cleaner.ts","../../../projects/components/src/lib/algorithms/pn/reachability/model/coverability-tree.ts","../../../projects/components/src/lib/algorithms/pn/reachability/petri-net-coverability.service.ts","../../../projects/components/src/lib/algorithms/pn/transformation/implicit-place-remover.service.ts","../../../projects/components/src/lib/algorithms/pn/synthesis/prime-miner.service.ts","../../../projects/components/src/lib/algorithms/log/concurrency-oracle/αbel-oracle/multiset-equivalent-traces.ts","../../../projects/components/src/lib/algorithms/log/concurrency-oracle/αbel-oracle/trace-conversion-result.ts","../../../projects/components/src/lib/algorithms/log/concurrency-oracle/αbel-oracle/αbel-oracle.service.ts","../../../projects/components/src/lib/algorithms/log/concurrency-oracle/alpha-oracle/alpha-oracle.service.ts","../../../projects/components/src/lib/algorithms/log/concurrency-oracle/timestamp-oracle/timestamp-oracle.service.ts","../../../projects/components/src/lib/algorithms/log/concurrency-oracle/alpha-oracle/petri-net-sequence.ts","../../../projects/components/src/lib/algorithms/log/log-to-partial-order-transformer.service.ts","../../../projects/components/src/public-api.ts","../../../projects/components/src/ilpn-components.ts"],"sourcesContent":["import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ilpn-footer',\r\n    templateUrl: './footer.component.html',\r\n    styleUrls: ['./footer.component.scss']\r\n})\r\nexport class FooterComponent {\r\n\r\n    constructor() {\r\n    }\r\n\r\n}\r\n","<div class=\"footer-font\">\r\n    ...and I know you do too!\r\n    <br>\r\n    <br>\r\n    <a href=\"https://www.fernuni-hagen.de/mi/fakultaet/lehrende/bergenthum/index.shtml\">Robin Bergenthum</a> and <a href=\"https://www.fernuni-hagen.de/ps/team/Jakub.Kovar.shtml\">Jakub Kovář</a>\r\n    <br>\r\n    Fakultät für Mathematik und Informatik\r\n    <br>\r\n    Fernuni in Hagen, Germany\r\n    <br>\r\n    <a href=\"https://www.fernuni-hagen.de/service/impressum.shtml\">Impressum</a> · <a href=\"https://www.fernuni-hagen.de/service/datenschutz.shtml\">Datenschutz</a>\r\n</div>\r\n","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ilpn-page-layout',\r\n    templateUrl: './page-layout.component.html',\r\n    styleUrls: ['./page-layout.component.scss']\r\n})\r\nexport class PageLayoutComponent {\r\n\r\n    constructor() {\r\n    }\r\n\r\n}\r\n","<div fxLayout=\"column\" fxLayoutAlign=\"start stretch\">\r\n    <a href=\"https://www.fernuni-hagen.de/ilovepetrinets/\"><h1>I <span class=\"red\">❤</span> Petri Nets</h1></a>\r\n\r\n    <ng-content></ng-content>\r\n\r\n    <hr>\r\n    <ilpn-footer></ilpn-footer>\r\n</div>\r\n","export class DropFile {\r\n\r\n    private _name!: string;\r\n    private _suffix!: string;\r\n\r\n    constructor(name: string, public readonly content: string, suffix?: string) {\r\n        this.extractSuffix(name);\r\n        if (suffix !== undefined) {\r\n            this._suffix = suffix;\r\n        }\r\n    }\r\n\r\n    get name(): string {\r\n        return `${this._name}.${this.suffix}`;\r\n    }\r\n\r\n    set name(name: string) {\r\n        this.extractSuffix(name)\r\n    }\r\n\r\n    get suffix(): string {\r\n        return this._suffix;\r\n    }\r\n\r\n    set suffix(value: string) {\r\n        this._suffix = value;\r\n    }\r\n\r\n    private extractSuffix(name: string) {\r\n        const parts = name.split('.');\r\n        if (parts.length === 1) {\r\n            this._name = name;\r\n            this._suffix = '';\r\n        } else {\r\n            this._suffix = parts.splice(-1)[0];\r\n            this._name = parts.join('.');\r\n        }\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {forkJoin, Observable, of, ReplaySubject} from 'rxjs';\r\nimport {DropFile} from './drop-file';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FileReaderService {\r\n\r\n    processFileUpload(files: FileList | undefined): Observable<Array<DropFile>> {\r\n        if (files === undefined) {\r\n            return of([]);\r\n        }\r\n        const files$: Array<Observable<DropFile>> = [];\r\n        for (let i = 0; i < files.length; i++) {\r\n            files$.push(this.readFile(files[i]));\r\n        }\r\n\r\n        return forkJoin(files$);\r\n    }\r\n\r\n    private readFile(file: File): Observable<DropFile> {\r\n        const reader = new FileReader();\r\n        const result = new ReplaySubject<DropFile>(1);\r\n        reader.onerror = (e) => {\r\n            console.debug('Error while reading file content', file, e);\r\n            result.complete();\r\n        };\r\n        reader.onloadend = () => {\r\n            result.next(new DropFile(file.name, reader.result as string));\r\n            result.complete();\r\n        }\r\n        reader.readAsText(file);\r\n        return result.asObservable();\r\n    }\r\n}\r\n","import {Component, Input} from '@angular/core';\r\nimport {FileDisplay} from '../../layout/file-display';\r\n\r\n@Component({\r\n    selector: 'ilpn-file-display',\r\n    templateUrl: './file-display.component.html',\r\n    styleUrls: ['./file-display.component.scss']\r\n})\r\nexport class FileDisplayComponent {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    @Input() bold: boolean | undefined = false;\r\n    @Input() squareContent: string | undefined;\r\n    @Input() fileDisplay: FileDisplay | undefined;\r\n    @Input() hover: boolean = false;\r\n\r\n    resolveSquareContent(): string {\r\n        if (this.fileDisplay !== undefined) {\r\n            return this.fileDisplay.icon;\r\n        }\r\n        return this.squareContent ?? '?';\r\n    }\r\n\r\n    resolveSquareColor(): string {\r\n        if (this.fileDisplay !== undefined) {\r\n            return this.fileDisplay.color;\r\n        }\r\n        return 'black';\r\n    }\r\n\r\n    resolveFontWeight(): string {\r\n        let isBold;\r\n        if (this.fileDisplay !== undefined) {\r\n            isBold = this.fileDisplay.bold;\r\n\r\n        } else {\r\n            isBold = this.bold;\r\n        }\r\n        return isBold ? 'bold' : 'normal';\r\n    }\r\n}\r\n","<div class=\"interactive-square larger-icon\"\r\n     fxLayout=\"row\"\r\n     fxLayoutAlign=\"center center\"\r\n     [ngStyle]=\"{'color': resolveSquareColor(), 'font-weight': resolveFontWeight()}\"\r\n     [ngClass]=\"{'hover': hover}\">\r\n    {{resolveSquareContent()}}\r\n</div>\r\n","import {Component, EventEmitter, Input, OnDestroy, Output} from '@angular/core';\r\nimport {FileReaderService} from '../../../utility/file-reader.service';\r\nimport {take} from 'rxjs';\r\nimport {DropFile} from '../../../utility/drop-file';\r\nimport {FileDisplay} from '../../layout/file-display';\r\n\r\n@Component({\r\n    selector: 'ilpn-file-upload',\r\n    templateUrl: './file-upload.component.html',\r\n    styleUrls: ['./file-upload.component.scss']\r\n})\r\nexport class FileUploadComponent implements OnDestroy {\r\n\r\n    @Output('fileContent') fileContentEmitter: EventEmitter<Array<DropFile>>;\r\n\r\n    @Input() descriptionText: string = '';\r\n    @Input() squareContent: string | undefined;\r\n    @Input() showText = true;\r\n    @Input() fileDisplay: FileDisplay | undefined;\r\n    @Input() bold: boolean | undefined;\r\n\r\n    isHovered = false;\r\n\r\n    constructor(private _fileReader: FileReaderService) {\r\n        this.fileContentEmitter = new EventEmitter<Array<DropFile>>();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.fileContentEmitter.complete();\r\n    }\r\n\r\n    prevent(e: Event) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    }\r\n\r\n    hoverStart(e: Event) {\r\n        this.prevent(e);\r\n        this.isHovered = true;\r\n    }\r\n\r\n    hoverEnd(e: MouseEvent, drop = false) {\r\n        this.prevent(e);\r\n        this.isHovered = false;\r\n    }\r\n\r\n    fileDrop(e: DragEvent) {\r\n        this.hoverEnd(e, true);\r\n        this._fileReader.processFileUpload(e.dataTransfer?.files).pipe(take(1)).subscribe(result => {\r\n            if (result.length > 0) {\r\n                this.fileContentEmitter.emit(result);\r\n            }\r\n        });\r\n    }\r\n}\r\n","<div fxLayout=\"column\" fxLayoutAlign=\"start center\" class=\"bottom-margin\">\r\n    <span [class.hidden]=\"!showText && !isHovered\">{{descriptionText}}</span>\r\n    <ilpn-file-display [hover]=\"isHovered\"\r\n                       [fileDisplay]=\"fileDisplay\"\r\n                       [squareContent]=\"squareContent\"\r\n                       [bold]=\"bold\"\r\n                       (drag)=\"prevent($event)\"\r\n                       (dragstart)=\"prevent($event)\"\r\n                       (dragover)=\"hoverStart($event)\"\r\n                       (dragenter)=\"hoverStart($event)\"\r\n                       (dragleave)=\"hoverEnd($event)\"\r\n                       (dragend)=\"hoverEnd($event)\"\r\n                       (drop)=\"fileDrop($event)\">\r\n    </ilpn-file-display>\r\n</div>\r\n","import {Component, Input} from '@angular/core';\r\nimport {DropFile} from '../../../utility/drop-file';\r\nimport {saveAs} from 'file-saver';\r\nimport {downloadZip} from 'client-zip';\r\nimport {FileDisplay} from '../../layout/file-display';\r\n\r\n@Component({\r\n    selector: 'ilpn-file-download',\r\n    templateUrl: './file-download.component.html',\r\n    styleUrls: ['./file-download.component.scss']\r\n})\r\nexport class FileDownloadComponent {\r\n\r\n    @Input() descriptionText: string = '';\r\n    @Input() squareContent: string | undefined;\r\n    @Input() showText = true;\r\n    @Input() disabled = false;\r\n    @Input() files: undefined | DropFile | Array<DropFile> = [];\r\n    @Input() zipFileName = 'results';\r\n    @Input() fileDisplay: FileDisplay | undefined;\r\n    @Input() bold: boolean | undefined;\r\n\r\n    isHovered = false;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    prevent(e: Event) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    }\r\n\r\n    hoverStart(e: Event) {\r\n        this.prevent(e);\r\n        this.isHovered = true;\r\n    }\r\n\r\n    hoverEnd(e: MouseEvent, drop = false) {\r\n        this.prevent(e);\r\n        this.isHovered = false;\r\n    }\r\n\r\n    download() {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        if (this.files === undefined) {\r\n            return;\r\n        }\r\n        if (Array.isArray(this.files) && this.files.length === 0) {\r\n            return;\r\n        }\r\n        if (!Array.isArray(this.files) || this.files.length === 1) {\r\n            // 1 file\r\n            const file = Array.isArray(this.files) ? this.files[0] : this.files;\r\n            saveAs(new Blob([file.content], {type: 'text/plain;charset=utf-8'}), file.name);\r\n            return;\r\n        }\r\n        // multiple files\r\n        downloadZip(this.files.map(f => ({name: f.name, input: f.content}))).blob().then(content => {\r\n            saveAs(content, `${this.zipFileName}.zip`);\r\n        });\r\n    }\r\n\r\n}\r\n","<div fxLayout=\"column\" fxLayoutAlign=\"start center\" class=\"bottom-margin\">\r\n    <span [class.hidden]=\"!showText || disabled\">{{descriptionText}}</span>\r\n    <ilpn-file-display [hover]=\"isHovered && !disabled\"\r\n                       [class.disabled]=\"disabled\"\r\n                       [fileDisplay]=\"fileDisplay\"\r\n                       [squareContent]=\"squareContent\"\r\n                       [bold]=\"bold\"\r\n                       (click)=\"download()\"\r\n                       (mouseenter)=\"hoverStart($event)\"\r\n                       (mouseleave)=\"hoverEnd($event)\">\r\n    </ilpn-file-display>\r\n</div>\r\n","import {Component, Input} from '@angular/core';\r\nimport {FileDisplay} from '../../layout/file-display';\r\n\r\n@Component({\r\n    selector: 'ilpn-info-card',\r\n    templateUrl: './info-card.component.html',\r\n    styleUrls: ['./info-card.component.scss']\r\n})\r\nexport class InfoCardComponent {\r\n\r\n    @Input() squareContent: string = '?';\r\n    @Input() title: string = '';\r\n    @Input() description: string = '';\r\n    @Input() fileDisplay: FileDisplay | undefined;\r\n    @Input() disabled = false;\r\n    @Input() descriptionLines = 3;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    resolveSquareContent(): string {\r\n        if (this.fileDisplay !== undefined) {\r\n            return this.fileDisplay.icon;\r\n        }\r\n        return this.squareContent;\r\n    }\r\n\r\n    resolveSquareColor(): string {\r\n        if (this.disabled) {\r\n            return 'grey';\r\n        }\r\n        if (this.fileDisplay !== undefined) {\r\n            return this.fileDisplay.color;\r\n        }\r\n        return 'black';\r\n    }\r\n\r\n    resolveBorderColor(): string {\r\n        if (this.disabled) {\r\n            return 'grey';\r\n        } else {\r\n            return 'black';\r\n        }\r\n    }\r\n\r\n    resolveDescriptionHeight(): string {\r\n        return `${this.descriptionLines}em`;\r\n    }\r\n\r\n}\r\n","<div class=\"border\" [ngClass]=\"{'border-enabled': !disabled}\" fxLayout=\"row\" fxLayoutAlign=\"start top\">\r\n    <div class=\"square\" [ngStyle]=\"{'color': resolveSquareColor(), 'border-color': resolveBorderColor()}\" fxLayout=\"row\" fxLayoutAlign=\"center center\" fxFlex=\"nogrow\">\r\n        {{resolveSquareContent()}}\r\n    </div>\r\n    <div class=\"description\" fxLayout=\"column\" fxLayoutAlign=\"top center\" fxFlex>\r\n        <span>{{title}}</span>\r\n        <hr class=\"width100\">\r\n        <span class=\"description-min-height\" [ngStyle]=\"{'height': resolveDescriptionHeight()}\">{{description}}</span>\r\n    </div>\r\n</div>\r\n","import {Component, Inject, Input} from '@angular/core';\r\nimport {APP_BASE_HREF} from '@angular/common';\r\nimport {FileDisplay} from '../../layout/file-display';\r\n\r\n@Component({\r\n    selector: 'ilpn-descriptive-link',\r\n    templateUrl: './descriptive-link.component.html',\r\n    styleUrls: ['./descriptive-link.component.scss']\r\n})\r\nexport class DescriptiveLinkComponent {\r\n\r\n    @Input() squareContent: string = '?';\r\n    @Input() title: string = '';\r\n    @Input() description: string = '';\r\n    @Input() fileDisplay: FileDisplay | undefined;\r\n    @Input() disabled = false;\r\n    @Input() descriptionLines = 3;\r\n\r\n    @Input() link: Array<string> | string | undefined;\r\n    @Input() download = false;\r\n\r\n    constructor(@Inject(APP_BASE_HREF) public baseHref: string) {\r\n    }\r\n\r\n    type(): string {\r\n        if (this.disabled) {\r\n            return 'disabled';\r\n        }\r\n        if (this.isAnchor()) {\r\n            return 'anchor';\r\n        } else {\r\n            return 'button';\r\n        }\r\n\r\n    }\r\n\r\n    resolveAnchorLink(): string {\r\n        return this.resolveSingleLink(this.link as string);\r\n    }\r\n\r\n    buttonClick() {\r\n        if (this.link === undefined || this.isAnchor()) {\r\n            return;\r\n        }\r\n\r\n        const links = (this.link as Array<string>).map(l => this.resolveSingleLink(l));\r\n\r\n        for (const link of links) {\r\n            this.createDownloadLink(link);\r\n        }\r\n    }\r\n\r\n    private isAnchor(): boolean {\r\n        return this.link !== undefined && !Array.isArray(this.link);\r\n    }\r\n\r\n    private resolveSingleLink(link: string) {\r\n        if (link.startsWith('http')) {\r\n            return link;\r\n        }\r\n        return this.baseHref + link;\r\n    }\r\n\r\n    private createDownloadLink(link: string) {\r\n        const a = document.createElement('a');\r\n        a.style.display = 'none';\r\n        a.href = link;\r\n        a.download = '';\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        a.remove();\r\n    }\r\n\r\n}\r\n","<!-- single link -->\r\n<ng-template [ngIf]=\"type() === 'anchor'\">\r\n    <a class=\"link\" [href]=\"resolveAnchorLink()\" [attr.download]=\"download ? '' : null\">\r\n        <ilpn-info-card [fileDisplay]=\"fileDisplay\"\r\n                        [squareContent]=\"squareContent\"\r\n                        [description]=\"description\"\r\n                        [title]=\"title\"\r\n                        [descriptionLines]=\"descriptionLines\"></ilpn-info-card>\r\n    </a>\r\n</ng-template>\r\n\r\n<!-- multiple links -->\r\n<ng-template [ngIf]=\"type() === 'button'\">\r\n    <button class=\"buttonStyle\" (click)=\"buttonClick()\">\r\n        <ilpn-info-card [fileDisplay]=\"fileDisplay\"\r\n                        [squareContent]=\"squareContent\"\r\n                        [description]=\"description\"\r\n                        [title]=\"title\"\r\n                        [descriptionLines]=\"descriptionLines\"></ilpn-info-card>\r\n    </button>\r\n</ng-template>\r\n\r\n<!-- descriptive link disabled -->\r\n<ng-template [ngIf]=\"type() === 'disabled'\">\r\n    <ilpn-info-card [fileDisplay]=\"fileDisplay\"\r\n                    [squareContent]=\"squareContent\"\r\n                    [description]=\"description\"\r\n                    [title]=\"title\"\r\n                    [disabled]=\"true\"\r\n                    [descriptionLines]=\"descriptionLines\"></ilpn-info-card>\r\n</ng-template>\r\n","import {NgModule} from '@angular/core';\r\nimport {FooterComponent} from './layout/footer/footer.component';\r\nimport {PageLayoutComponent} from './layout/page-layout/page-layout.component';\r\nimport {FileUploadComponent} from './interaction/file-upload/file-upload.component';\r\nimport {FlexLayoutModule} from '@angular/flex-layout';\r\nimport {FileDownloadComponent} from './interaction/file-download/file-download.component';\r\nimport {DescriptiveLinkComponent} from './interaction/descriptive-link/descriptive-link.component';\r\nimport { InfoCardComponent } from './interaction/info-card/info-card.component';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport { FileDisplayComponent } from './interaction/file-display/file-display.component';\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        FooterComponent,\r\n        PageLayoutComponent,\r\n        FileUploadComponent,\r\n        FileDownloadComponent,\r\n        DescriptiveLinkComponent,\r\n        InfoCardComponent,\r\n        FileDisplayComponent\r\n    ],\r\n\timports: [\r\n\t\tFlexLayoutModule,\r\n\t\tBrowserAnimationsModule\r\n\t],\r\n    exports: [\r\n        FooterComponent,\r\n        PageLayoutComponent,\r\n        FileUploadComponent,\r\n        FileDownloadComponent,\r\n        DescriptiveLinkComponent,\r\n    ]\r\n})\r\nexport class IlpnComponentsModule {\r\n}\r\n","export interface FileDisplay {\r\n    icon: string;\r\n    color: string;\r\n    bold?: boolean;\r\n}\r\n\r\nexport const FD_PETRI_NET: FileDisplay = {\r\n    icon: '♥',\r\n    color: 'red'\r\n};\r\n\r\nexport const FD_BPMN: FileDisplay = {\r\n    icon: '♦',\r\n    color: 'red'\r\n};\r\n\r\nexport const FD_PARTIAL_ORDER: FileDisplay = {\r\n    icon: '♠',\r\n    color: 'black'\r\n}\r\n\r\nexport const FD_TRANSITION_SYSTEM: FileDisplay = {\r\n    icon: '♣',\r\n    color: 'black'\r\n};\r\n\r\nexport const FD_LOG: FileDisplay = {\r\n    icon: '★',\r\n    color: 'black'\r\n}\r\n\r\nexport const FD_CONCURRENCY: FileDisplay = {\r\n    icon: '┃┃',\r\n    color: 'blue',\r\n    bold: true\r\n}\r\n","export abstract class Identifiable {\r\n    private _id: string | undefined;\r\n\r\n    protected constructor(id?: string) {\r\n        this._id = id;\r\n    }\r\n\r\n    get id(): string | undefined {\r\n        return this._id;\r\n    }\r\n\r\n    set id(value: string | undefined) {\r\n        this._id = value;\r\n    }\r\n\r\n    public getId(): string {\r\n        if (this._id === undefined) {\r\n            throw new Error('id is undefined');\r\n        }\r\n        return this._id;\r\n    }\r\n}\r\n\r\nexport function getById<T extends Identifiable>(map: Map<string, T>, object: T | string): T | undefined {\r\n    if (typeof object === 'string') {\r\n        return map.get(object);\r\n    } else {\r\n        return map.get(object.getId());\r\n    }\r\n}\r\n","import {Observable, Subject, takeUntil} from 'rxjs';\r\nimport {MouseListener} from './mouse-listener';\r\nimport {Point} from './point';\r\nimport {Identifiable} from '../../../utility/get-by-id';\r\n\r\nexport class IdPoint extends Identifiable implements Point, MouseListener {\r\n    private _x: number;\r\n    private _y: number;\r\n\r\n    private _dragging = false;\r\n    private _lastPoint: Point | undefined;\r\n    private _element: SVGElement | undefined;\r\n    private _preDragPosition: Point;\r\n    private _svgOffset: Point | undefined;\r\n\r\n    private _layerNodes: Array<IdPoint> | undefined;\r\n    private _layerIndex: number | undefined;\r\n\r\n    private _redraw$: Subject<void> | undefined;\r\n\r\n    constructor(x: number, y: number, id?: string) {\r\n        super(id);\r\n        this._x = x;\r\n        this._y = y;\r\n        this._preDragPosition = {x, y};\r\n    }\r\n\r\n    get x(): number {\r\n        return this._x;\r\n    }\r\n\r\n    set x(value: number) {\r\n        this._x = value;\r\n    }\r\n\r\n    get y(): number {\r\n        return this._y;\r\n    }\r\n\r\n    set y(value: number) {\r\n        this._y = value;\r\n    }\r\n\r\n    get center(): Point {\r\n        return {x: this.x, y: this.y};\r\n    }\r\n\r\n    bindEvents(mouseMoved$: Subject<MouseEvent>, mouseUp$: Subject<MouseEvent>, kill$: Observable<void>, redraw$: Subject<void>): void {\r\n        mouseMoved$.asObservable().pipe(takeUntil(kill$)).subscribe(e => this.processMouseMoved(e));\r\n        mouseUp$.asObservable().pipe(takeUntil(kill$)).subscribe(() => this.processMouseUp());\r\n        this._redraw$ = redraw$;\r\n    }\r\n\r\n    public processMouseDown(event: MouseEvent) {\r\n        if (this._element === undefined) {\r\n            return;\r\n        }\r\n        event.stopPropagation();\r\n        this._dragging = true;\r\n        this._preDragPosition = {x: this.x, y: this.y};\r\n        this._svgOffset = this.svgOffset();\r\n        this._lastPoint = {x: event.x, y: event.y};\r\n    }\r\n\r\n    public processMouseUp() {\r\n        if (this._element === undefined || !this._dragging) {\r\n            return;\r\n        }\r\n\r\n        this._dragging = false;\r\n        this._lastPoint = undefined;\r\n        this.x = this._preDragPosition.x;\r\n        this.y = this._preDragPosition.y;\r\n        this.updateSVG();\r\n\r\n        this.redraw();\r\n    }\r\n\r\n    public processMouseMoved(event: MouseEvent) {\r\n        if (!this._dragging || this._element === undefined || this._lastPoint === undefined) {\r\n            return;\r\n        }\r\n\r\n        this.y += event.y - this._lastPoint.y;\r\n        this._lastPoint.x = event.x;\r\n        this._lastPoint.y = event.y;\r\n        this.updateSVG();\r\n\r\n        if (this._layerNodes === undefined || this._layerIndex === undefined) {\r\n            this.redraw();\r\n            return;\r\n        }\r\n        const step = Math.sign(this.y - this._preDragPosition.y);\r\n        if (step === 0) {\r\n            this.redraw();\r\n            return;\r\n        }\r\n        const neighbourIndex = this._layerIndex + step;\r\n        if (neighbourIndex < 0 || neighbourIndex >= this._layerNodes.length) {\r\n            this.redraw();\r\n            return;\r\n        }\r\n        if (\r\n            (step < 0 && this.y < this._layerNodes[neighbourIndex].y)\r\n            || (step > 0 && this.y > this._layerNodes[neighbourIndex].y)\r\n        ) {\r\n            this.swap(neighbourIndex);\r\n        }\r\n        this.redraw();\r\n    }\r\n\r\n    public registerElement(element: SVGElement) {\r\n        this._element = element;\r\n        this._element.onmousedown = (event) => {\r\n            this.processMouseDown(event);\r\n        };\r\n    }\r\n\r\n    public registerLayer(layer: Array<IdPoint>, index: number) {\r\n        this._layerNodes = layer;\r\n        this._layerIndex = index;\r\n    }\r\n\r\n    protected svgX(): string {\r\n        return 'x';\r\n    }\r\n\r\n    protected svgY(): string {\r\n        return 'y';\r\n    }\r\n\r\n    private updateSVG(offset?: Point) {\r\n        if (this._element === undefined || (this._svgOffset === undefined && offset === undefined)) {\r\n            return;\r\n        }\r\n        const off = offset ?? this._svgOffset;\r\n        this._element.setAttribute(this.svgX(), '' + (this.x + (off as Point).x))\r\n        this._element.setAttribute(this.svgY(), '' + (this.y + (off as Point).y))\r\n    }\r\n\r\n    private svgOffset(): Point {\r\n        if (this._element === undefined) {\r\n            throw new Error('Element not set. SVG offset cannot be computed!');\r\n        }\r\n        return {\r\n            x: parseInt(this._element.getAttribute(this.svgX()) ?? '0') - this.x,\r\n            y: parseInt(this._element.getAttribute(this.svgY()) ?? '0') - this.y\r\n        };\r\n    }\r\n\r\n    private swap(newIndex: number) {\r\n        if (this._layerNodes === undefined || this._layerIndex === undefined) {\r\n            return;\r\n        }\r\n\r\n        const neighbour = this._layerNodes[newIndex];\r\n        const neighbourPos = {x: neighbour.x, y: neighbour.y};\r\n        const offset = neighbour.svgOffset();\r\n\r\n        neighbour.x = this._preDragPosition.x;\r\n        neighbour.y = this._preDragPosition.y;\r\n        this._preDragPosition = neighbourPos;\r\n\r\n        this._layerNodes[this._layerIndex] = neighbour;\r\n        this._layerNodes[newIndex] = this;\r\n        neighbour._layerIndex = this._layerIndex;\r\n        this._layerIndex = newIndex;\r\n\r\n        neighbour.updateSVG(offset);\r\n    }\r\n\r\n    private redraw() {\r\n        if (this._redraw$ !== undefined) {\r\n            this._redraw$.next();\r\n        }\r\n    }\r\n}\r\n","import {Arc} from './arc';\r\nimport {IdPoint} from './id-point';\r\nimport {getById} from '../../../utility/get-by-id';\r\n\r\nexport class Node extends IdPoint {\r\n\r\n    private readonly _ingoingArcs: Map<string, Arc>;\r\n    private readonly _outgoingArcs: Map<string, Arc>;\r\n\r\n    private readonly _ingoingArcWeights: Map<string, number>;\r\n    private readonly _outgoingArcWeights: Map<string, number>;\r\n\r\n    constructor(x: number, y: number, id?: string) {\r\n        super(x, y, id);\r\n        this._ingoingArcs = new Map<string, Arc>();\r\n        this._outgoingArcs = new Map<string, Arc>();\r\n        this._ingoingArcWeights = new Map<string, number>();\r\n        this._outgoingArcWeights = new Map<string, number>();\r\n    }\r\n\r\n    get ingoingArcs(): Array<Arc> {\r\n        return Array.from(this._ingoingArcs.values());\r\n    }\r\n\r\n    get outgoingArcs(): Array<Arc> {\r\n        return Array.from(this._outgoingArcs.values());\r\n    }\r\n\r\n    get ingoingArcWeights(): Map<string, number> {\r\n        return this._ingoingArcWeights;\r\n    }\r\n\r\n    get outgoingArcWeights(): Map<string, number> {\r\n        return this._outgoingArcWeights;\r\n    }\r\n\r\n    public addOutgoingArc(arc: Arc) {\r\n        this._outgoingArcs.set(arc.getId(), arc);\r\n        this._outgoingArcWeights.set(arc.destinationId, arc.weight);\r\n    }\r\n\r\n    public addIngoingArc(arc: Arc) {\r\n        this._ingoingArcs.set(arc.getId(), arc);\r\n        this._ingoingArcWeights.set(arc.sourceId, arc.weight);\r\n    }\r\n\r\n    public removeArc(arc: Arc | string) {\r\n        let a = getById(this._ingoingArcs, arc);\r\n        if (a !== undefined) {\r\n            this._ingoingArcs.delete(a.getId());\r\n            this._ingoingArcWeights.delete(a.getId());\r\n        }\r\n        a = getById(this._outgoingArcs, arc);\r\n        if (a !== undefined) {\r\n            this._outgoingArcs.delete(a.getId());\r\n            this._outgoingArcWeights.delete(a.getId());\r\n        }\r\n    }\r\n}\r\n","import {Node} from './node';\r\n\r\nexport class Place extends Node {\r\n\r\n    private _marking: number;\r\n\r\n    constructor(marking: number = 0, x: number = 0, y: number = 0, id?: string) {\r\n        super(x, y, id);\r\n        this._marking = marking;\r\n    }\r\n\r\n    get marking(): number {\r\n        return this._marking;\r\n    }\r\n\r\n    set marking(value: number) {\r\n        this._marking = value;\r\n    }\r\n\r\n    protected override svgX(): string {\r\n        return 'cx';\r\n    }\r\n\r\n    protected override svgY(): string {\r\n        return 'cy';\r\n    }\r\n}\r\n","import {Node} from './node';\r\nimport {EditableString} from '../../../utility/string-sequence';\r\n\r\nexport class Transition extends Node implements EditableString {\r\n\r\n    private _label: string | undefined;\r\n\r\n    constructor(label?: string, x: number = 0, y: number = 0, id?: string) {\r\n        super(x, y, id);\r\n        this._label = label;\r\n    }\r\n\r\n    get label(): string | undefined {\r\n        return this._label;\r\n    }\r\n\r\n    get isSilent(): boolean {\r\n        return this._label === undefined;\r\n    }\r\n\r\n    set label(value: string | undefined) {\r\n        this._label = value;\r\n    }\r\n\r\n    getString(): string {\r\n        const l = this.label;\r\n        if (l === undefined) {\r\n            throw new Error('Transition label is undefined');\r\n        }\r\n        return l;\r\n    }\r\n\r\n    setString(value: string): void {\r\n        this.label = value;\r\n    }\r\n}\r\n","import {Node} from './node';\r\nimport {DragPoint} from './drag-point';\r\nimport {MouseListener} from './mouse-listener';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {Identifiable} from '../../../utility/get-by-id';\r\n\r\nexport class Arc extends Identifiable implements MouseListener {\r\n    private readonly _source: Node;\r\n    private readonly _destination: Node;\r\n    private _weight: number;\r\n    private readonly _breakpoints: Array<DragPoint>;\r\n\r\n    constructor(id: string, source: Node, destination: Node, weight: number = 1) {\r\n        super(id);\r\n        this._source = source;\r\n        this._destination = destination;\r\n        this._weight = weight;\r\n        this._breakpoints = [];\r\n        this._source.addOutgoingArc(this);\r\n        this._destination.addIngoingArc(this);\r\n    }\r\n\r\n    get sourceId(): string {\r\n        return this._source.getId();\r\n    }\r\n\r\n    get destinationId(): string {\r\n        return this._destination.getId();\r\n    }\r\n\r\n    get source(): Node {\r\n        return this._source;\r\n    }\r\n\r\n    get destination(): Node {\r\n        return this._destination;\r\n    }\r\n\r\n    get weight(): number {\r\n        return this._weight;\r\n    }\r\n\r\n    get breakpoints(): Array<DragPoint> {\r\n        return this._breakpoints;\r\n    }\r\n\r\n    set weight(value: number) {\r\n        this._weight = value;\r\n    }\r\n\r\n    get hasBreakpoints(): boolean {\r\n        return this._breakpoints.length > 0;\r\n    }\r\n\r\n    get firstBreakpoint(): DragPoint {\r\n        if (this.hasBreakpoints) {\r\n            return this._breakpoints[0];\r\n        }\r\n        throw new Error('Arc has no breakpoints!');\r\n    }\r\n\r\n    get lastBreakpoint(): DragPoint {\r\n        if (this.hasBreakpoints) {\r\n            return this._breakpoints[this._breakpoints.length - 1];\r\n        }\r\n        throw new Error('Arc has no breakpoints!');\r\n    }\r\n\r\n    public addBreakpoint(point: DragPoint) {\r\n        this._breakpoints.push(point);\r\n        point.addArcRef(this);\r\n    }\r\n\r\n    bindEvents(mouseMoved$: Subject<MouseEvent>, mouseUp$: Subject<MouseEvent>, kill$: Observable<void>, redraw$: Subject<void>): void {\r\n        this.breakpoints.forEach(b => {\r\n            b.bindEvents(mouseMoved$, mouseUp$, kill$, redraw$);\r\n        })\r\n    }\r\n}\r\n","export class IncrementingCounter {\r\n    private value = 0;\r\n\r\n    public next(): number {\r\n        return this.value++;\r\n    }\r\n\r\n    public current(): number {\r\n        return this.value;\r\n    }\r\n\r\n    public reset() {\r\n        this.value = 0;\r\n    }\r\n\r\n    public setCurrentValue(value: number) {\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nexport interface SetLike<T> {\r\n    has(s: T): boolean;\r\n}\r\n\r\nexport function createUniqueString(prefix: string, existingNames: SetLike<string>, counter: IncrementingCounter): string {\r\n    let result;\r\n    do {\r\n        result = `${prefix}${counter.next()}`;\r\n    } while (existingNames.has(result));\r\n    return result;\r\n}\r\n","export class Marking {\r\n    private readonly _marking: { [placeId: string]: number };\r\n\r\n    constructor(marking: { [p: string]: number } | Marking) {\r\n        this._marking = Object.assign({}, marking instanceof Marking ? marking._marking : marking);\r\n    }\r\n\r\n    public get(placeId: string): number | undefined {\r\n        return this._marking[placeId];\r\n    }\r\n\r\n    public set(placeId: string, tokens: number) {\r\n        this._marking[placeId] = tokens;\r\n    }\r\n\r\n    public equals(marking: Marking): boolean {\r\n        const [myKeys, otherKeys] = this.getComparisonKeys(marking);\r\n\r\n        if (myKeys.length !== otherKeys.size) {\r\n            return false;\r\n        }\r\n\r\n        for (const key of myKeys) {\r\n            if (this.get(key) !== marking.get(key)) {\r\n                return false;\r\n            }\r\n            otherKeys.delete(key);\r\n        }\r\n\r\n        return otherKeys.size === 0;\r\n    }\r\n\r\n    public isGreaterThan(marking: Marking): boolean {\r\n        const [myKeys, otherKeys] = this.getComparisonKeys(marking);\r\n\r\n        if (myKeys.length !== otherKeys.size) {\r\n            return false;\r\n        }\r\n\r\n        let isGreater = false;\r\n        for (const key of myKeys) {\r\n            const thisM = this.get(key);\r\n            const otherM = marking.get(key);\r\n            if (thisM === undefined || otherM === undefined) {\r\n                return false;\r\n            }\r\n            if (thisM < otherM) {\r\n                return false;\r\n            } else if (thisM > otherM) {\r\n                isGreater = true;\r\n            }\r\n            otherKeys.delete(key);\r\n        }\r\n\r\n        return otherKeys.size === 0 && isGreater;\r\n    }\r\n\r\n    public introduceOmegas(smallerMarking: Marking): void {\r\n        if (!this.isGreaterThan(smallerMarking)) {\r\n            return;\r\n        }\r\n        const myKeys = Object.keys(this._marking);\r\n        for (const key of myKeys) {\r\n            if (this.get(key)! > smallerMarking.get(key)!) {\r\n                this.set(key, Number.POSITIVE_INFINITY);\r\n            }\r\n        }\r\n    }\r\n\r\n    public getKeys(): Array<string> {\r\n        return Object.keys(this._marking);\r\n    }\r\n\r\n    private getComparisonKeys(marking: Marking): [Array<string>, Set<string>] {\r\n        const myKeys = this.getKeys();\r\n        const otherKeys = new Set(marking.getKeys());\r\n        return [myKeys, otherKeys];\r\n    }\r\n}\r\n","import {Place} from './place';\r\nimport {Transition} from './transition';\r\nimport {Arc} from './arc';\r\nimport {Observable, Subject} from 'rxjs';\r\nimport {createUniqueString, IncrementingCounter} from '../../../utility/incrementing-counter';\r\nimport {NetUnionResult} from './net-union-result';\r\nimport {getById} from '../../../utility/get-by-id';\r\nimport {Marking} from './marking';\r\n\r\nexport class PetriNet {\r\n    private _places: Map<string, Place>;\r\n    private _transitions: Map<string, Transition>;\r\n    private _arcs: Map<string, Arc>;\r\n    private _frequency: number | undefined;\r\n    private _inputPlaces: Set<string>;\r\n    private _outputPlaces: Set<string>;\r\n\r\n    private _kill$: Subject<void>;\r\n\r\n    private _redraw$: Subject<void>;\r\n\r\n    private _placeCounter = new IncrementingCounter();\r\n    private _transitionCounter = new IncrementingCounter();\r\n    private _arcCounter = new IncrementingCounter();\r\n\r\n    constructor() {\r\n        this._places = new Map<string, Place>();\r\n        this._transitions = new Map<string, Transition>();\r\n        this._arcs = new Map<string, Arc>();\r\n        this._kill$ = new Subject<void>();\r\n        this._redraw$ = new Subject<void>();\r\n        this._inputPlaces = new Set<string>();\r\n        this._outputPlaces = new Set<string>();\r\n    }\r\n\r\n    public static createFromArcSubset(net: PetriNet, arcs: Array<Arc>): PetriNet {\r\n        const result = new PetriNet();\r\n        net.getPlaces().forEach(p => {\r\n            result.addPlace(new Place(p.marking, p.x, p.y, p.id));\r\n        });\r\n        net.getTransitions().forEach(t => {\r\n            result.addTransition(new Transition(t.label, t.x, t.y, t.id));\r\n        });\r\n        arcs.forEach(a => {\r\n            let source;\r\n            let destination;\r\n            if (a.source instanceof Place) {\r\n                source = result.getPlace(a.sourceId) as Place;\r\n                destination = result.getTransition(a.destinationId) as Transition;\r\n            } else {\r\n                source = result.getTransition(a.sourceId) as Transition;\r\n                destination = result.getPlace(a.destinationId) as Place;\r\n            }\r\n            result.addArc(new Arc(a.getId(), source, destination, a.weight));\r\n        });\r\n        return result;\r\n    }\r\n\r\n    public static netUnion(a: PetriNet, b: PetriNet): NetUnionResult {\r\n        const result = a.clone();\r\n\r\n        const counter = new IncrementingCounter();\r\n        const placeMap = new Map<string, string>();\r\n        const transitionMap = new Map<string, string>();\r\n\r\n        b.getPlaces().forEach(p => {\r\n            let mappedId = p.getId();\r\n            while (result.getPlace(mappedId) !== undefined) {\r\n                mappedId = p.getId() + counter.next();\r\n            }\r\n            placeMap.set(p.getId(), mappedId);\r\n            result.addPlace(new Place(p.marking, p.x, p.y, mappedId));\r\n        });\r\n\r\n        b.getTransitions().forEach(t => {\r\n            let mappedId = t.getId();\r\n            while (result.getTransition(mappedId) !== undefined) {\r\n                mappedId = t.getId() + counter.next();\r\n            }\r\n            transitionMap.set(t.getId(), mappedId);\r\n            result.addTransition(new Transition(t.label, t.x, t.y, mappedId));\r\n        });\r\n\r\n        b.getArcs().forEach(arc => {\r\n            let arcId = arc.getId();\r\n            while (result.getArc(arcId) !== undefined) {\r\n                arcId = arc.getId() + counter.next();\r\n            }\r\n            if (arc.source instanceof Place) {\r\n                result.addArc(new Arc(arcId, result.getPlace(placeMap.get(arc.sourceId) as string) as Place, result.getTransition(transitionMap.get(arc.destinationId) as string) as Transition, arc.weight));\r\n            } else {\r\n                result.addArc(new Arc(arcId, result.getTransition(transitionMap.get(arc.sourceId) as string) as Transition, result.getPlace(placeMap.get(arc.destinationId) as string) as Place, arc.weight));\r\n            }\r\n        });\r\n\r\n        const inputPlacesB = new Set<string>(result._inputPlaces);\r\n        const outputPlacesB = new Set<string>(result._outputPlaces);\r\n\r\n        a.inputPlaces.forEach(p => {\r\n            inputPlacesB.delete(p);\r\n        })\r\n        a.outputPlaces.forEach(p => {\r\n            outputPlacesB.delete(p)\r\n        })\r\n\r\n        return {net: result, inputPlacesB, outputPlacesB};\r\n    }\r\n\r\n    public static fireTransitionInMarking(net: PetriNet, transitionId: string, marking: Marking): Marking {\r\n        const transition = net.getTransition(transitionId);\r\n        if (transition === undefined) {\r\n            throw new Error(`The given net does not contain a transition with id '${transitionId}'`);\r\n        }\r\n\r\n        const newMarking: Marking = new Marking(marking);\r\n\r\n        for (const inArc of transition.ingoingArcs) {\r\n            const m = marking.get(inArc.sourceId);\r\n            if (m === undefined) {\r\n                throw new Error(`The transition with id '${transitionId}' has an incoming arc from a place with id '${inArc.sourceId}' but no such place is defined in the provided marking!`);\r\n            }\r\n            if (m - inArc.weight < 0) {\r\n                throw new Error(`The transition with id '${transitionId}' is not enabled in the provided marking! The place with id '${inArc.sourceId}' contains ${m} tokens, but the arc weight is ${inArc.weight}.`);\r\n            }\r\n            newMarking.set(inArc.sourceId, m - inArc.weight);\r\n        }\r\n\r\n        for (const outArc of transition.outgoingArcs) {\r\n            const m = marking.get(outArc.destinationId);\r\n            if (m === undefined) {\r\n                throw new Error(`The transition with id '${transitionId}' has an outgoing arc to a place with id '${outArc.destinationId}' but no such place is defined in the provided marking!`);\r\n            }\r\n            newMarking.set(outArc.destinationId, m + outArc.weight);\r\n        }\r\n\r\n        return newMarking;\r\n    }\r\n\r\n    public static getAllEnabledTransitions(net: PetriNet, marking: Marking): Array<Transition> {\r\n        return net.getTransitions().filter(t => PetriNet.isTransitionEnabledInMarking(net, t.id!, marking));\r\n    }\r\n\r\n    public static isTransitionEnabledInMarking(net: PetriNet, transitionId: string, marking: Marking): boolean {\r\n        const transition = net.getTransition(transitionId);\r\n        if (transition === undefined) {\r\n            throw new Error(`The given net does not contain a transition with id '${transitionId}'`);\r\n        }\r\n\r\n        for (const inArc of transition.ingoingArcs) {\r\n            const m = marking.get(inArc.sourceId);\r\n            if (m === undefined) {\r\n                throw new Error(`The transition with id '${transitionId}' has an incoming arc from a place with id '${inArc.sourceId}' but no such place is defined in the provided marking!`);\r\n            }\r\n            if (m - inArc.weight < 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private static determineInOut(p: Place, input: Set<string>, output: Set<string>) {\r\n        if (p.ingoingArcs.length === 0) {\r\n            input.add(p.getId());\r\n        }\r\n        if (p.outgoingArcs.length === 0) {\r\n            output.add(p.getId());\r\n        }\r\n    }\r\n\r\n    public getTransition(id: string): Transition | undefined {\r\n        return this._transitions.get(id);\r\n    }\r\n\r\n    public getTransitions(): Array<Transition> {\r\n        return Array.from(this._transitions.values());\r\n    }\r\n\r\n    public getTransitionCount(): number {\r\n        return this._transitions.size;\r\n    }\r\n\r\n    public addTransition(transition: Transition) {\r\n        if (transition.id === undefined) {\r\n            transition.id = createUniqueString('t', this._transitions, this._transitionCounter);\r\n        }\r\n        this._transitions.set(transition.id, transition);\r\n    }\r\n\r\n    public removeTransition(transition: Transition | string) {\r\n        const t = getById(this._transitions, transition);\r\n        if (t === undefined) {\r\n            return;\r\n        }\r\n        transition = t;\r\n\r\n        this._transitions.delete(transition.getId());\r\n        transition.outgoingArcs.forEach(a => {\r\n            this.removeArc(a);\r\n        });\r\n        transition.ingoingArcs.forEach(a => {\r\n            this.removeArc(a);\r\n        });\r\n    }\r\n\r\n    public getPlace(id: string): Place | undefined {\r\n        return this._places.get(id);\r\n    }\r\n\r\n    public getPlaces(): Array<Place> {\r\n        return Array.from(this._places.values());\r\n    }\r\n\r\n    public getPlaceCount(): number {\r\n        return this._places.size;\r\n    }\r\n\r\n    public addPlace(place: Place) {\r\n        if (place.id === undefined) {\r\n            place.id = createUniqueString('p', this._places, this._placeCounter);\r\n        }\r\n        this._places.set(place.id, place);\r\n        this._inputPlaces.add(place.id);\r\n        this._outputPlaces.add(place.id);\r\n    }\r\n\r\n    public removePlace(place: Place | string) {\r\n        const p = getById(this._places, place);\r\n        if (p === undefined) {\r\n            return;\r\n        }\r\n        place = p;\r\n\r\n        this._places.delete(place.getId());\r\n        place.outgoingArcs.forEach(a => {\r\n            this.removeArc(a);\r\n        });\r\n        place.ingoingArcs.forEach(a => {\r\n            this.removeArc(a);\r\n        });\r\n\r\n        this._inputPlaces.delete(place.getId());\r\n        this._outputPlaces.delete(place.getId());\r\n    }\r\n\r\n    public getArc(id: string): Arc | undefined {\r\n        return this._arcs.get(id);\r\n    }\r\n\r\n    public getArcs(): Array<Arc> {\r\n        return Array.from(this._arcs.values());\r\n    }\r\n\r\n    public getArcCount(): number {\r\n        return this._arcs.size;\r\n    }\r\n\r\n    public addArc(arc: Arc): void;\r\n    public addArc(source: Transition, destination: Place, weight?: number): void;\r\n    public addArc(source: Place, destination: Transition, weight?: number): void;\r\n    public addArc(arcOrSource: Arc | Transition | Place, destination?: Place | Transition, weight: number = 1) {\r\n        if (arcOrSource instanceof Arc) {\r\n            this._arcs.set(arcOrSource.getId(), arcOrSource);\r\n            if (arcOrSource.source instanceof Place) {\r\n                this._outputPlaces.delete(arcOrSource.sourceId);\r\n            } else if (arcOrSource.destination instanceof Place) {\r\n                this._inputPlaces.delete(arcOrSource.destinationId);\r\n            }\r\n        } else {\r\n            this.addArc(new Arc(createUniqueString('a', this._arcs, this._arcCounter), arcOrSource, destination!, weight));\r\n        }\r\n    }\r\n\r\n    public removeArc(arc: Arc | string) {\r\n        const a = getById(this._arcs, arc);\r\n        if (a === undefined) {\r\n            return;\r\n        }\r\n        arc = a;\r\n\r\n        this._arcs.delete(arc.getId());\r\n        arc.source.removeArc(arc);\r\n        arc.destination.removeArc(arc);\r\n        if (arc.source instanceof Place && arc.source.outgoingArcs.length === 0) {\r\n            this._outputPlaces.add(arc.sourceId);\r\n        } else if (arc.destination instanceof Place && arc.destination.ingoingArcs.length === 0) {\r\n            this._inputPlaces.add(arc.destinationId);\r\n        }\r\n    }\r\n\r\n    get frequency(): number | undefined {\r\n        return this._frequency;\r\n    }\r\n\r\n    set frequency(value: number | undefined) {\r\n        this._frequency = value;\r\n    }\r\n\r\n    get inputPlaces(): Set<string> {\r\n        return this._inputPlaces;\r\n    }\r\n\r\n    get outputPlaces(): Set<string> {\r\n        return this._outputPlaces;\r\n    }\r\n\r\n    public getInitialMarking(): Marking {\r\n        const m = new Marking({});\r\n\r\n        this.getPlaces().forEach(p => {\r\n            m.set(p.id!, p.marking);\r\n        });\r\n\r\n        return m;\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return this._places.size === 0 && this._transitions.size === 0;\r\n    }\r\n\r\n    public clone(): PetriNet {\r\n        return PetriNet.createFromArcSubset(this, this.getArcs());\r\n    }\r\n\r\n    public destroy() {\r\n        if (!this._kill$.closed) {\r\n            this._kill$.next();\r\n            this._kill$.complete();\r\n        }\r\n        this._redraw$.complete();\r\n    }\r\n\r\n    public bindEvents(mouseMoved$: Subject<MouseEvent>, mouseUp$: Subject<MouseEvent>) {\r\n        this._places.forEach((v, k) => v.bindEvents(mouseMoved$, mouseUp$, this._kill$.asObservable(), this._redraw$));\r\n        this._transitions.forEach((v, k) => v.bindEvents(mouseMoved$, mouseUp$, this._kill$.asObservable(), this._redraw$));\r\n        this._arcs.forEach((v, k) => v.bindEvents(mouseMoved$, mouseUp$, this._kill$.asObservable(), this._redraw$));\r\n    }\r\n\r\n    public redrawRequest$(): Observable<void> {\r\n        return this._redraw$.asObservable();\r\n    }\r\n}\r\n","import {PetriNet} from './petri-net';\r\nimport {Trace} from '../../log/model/trace';\r\n\r\nexport class PartialOrderNetWithContainedTraces {\r\n    constructor(public net: PetriNet, public containedTraces: Array<Trace>) {\r\n    }\r\n}\r\n","export enum BlockType {\r\n    TRANSITIONS = '.transitions',\r\n    PLACES = '.places',\r\n    ARCS = '.arcs',\r\n    FREQUENCY = '.frequency',\r\n}\r\n","export abstract class AbstractParser<T> {\r\n\r\n    public static readonly TYPE_BLOCK = '.type';\r\n\r\n    protected readonly _allowedTypes: Array<string>;\r\n\r\n    protected constructor(allowedTypes: Array<string> | string) {\r\n        this._allowedTypes = Array.isArray(allowedTypes) ? allowedTypes : [allowedTypes];\r\n    }\r\n\r\n    public parse(text: string): T | undefined {\r\n        const lines = text.split('\\n');\r\n        if (!lines[0].startsWith(AbstractParser.TYPE_BLOCK)) {\r\n            console.debug('file does not specify type in first line');\r\n            return;\r\n        }\r\n        if (!this._allowedTypes.includes(lines[0].trimEnd().slice(AbstractParser.TYPE_BLOCK.length + 1))) {\r\n            console.debug('bad file type')\r\n            return;\r\n        }\r\n\r\n        lines.shift();\r\n        return this.processFileLines(lines);\r\n    };\r\n\r\n    protected abstract processFileLines(lines: Array<string>): T | undefined;\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {PetriNet} from '../model/petri-net';\r\nimport {Transition} from '../model/transition';\r\nimport {Place} from '../model/place';\r\nimport {Arc} from '../model/arc';\r\nimport {BlockType} from './block-type';\r\nimport {AbstractParser} from '../../../utility/abstract-parser';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PetriNetSerialisationService {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public serialise(net: PetriNet): string {\r\n        return `${AbstractParser.TYPE_BLOCK} pn\\n`\r\n        + this.serialiseFrequency(net.frequency)\r\n        + this.serialiseTransitions(net.getTransitions())\r\n        + this.serialisePlaces(net.getPlaces())\r\n        + this.serialiseArcs(net.getArcs());\r\n    }\r\n\r\n    private serialiseFrequency(frequency: number | undefined): string {\r\n        if (frequency === undefined) {\r\n            return '';\r\n        }\r\n        return `${BlockType.FREQUENCY} ${frequency}\\n`;\r\n    }\r\n\r\n    private serialiseTransitions(transitions: Array<Transition>): string {\r\n        let result = `${BlockType.TRANSITIONS}\\n`;\r\n        transitions.forEach(t => {\r\n            result += `${this.removeSpaces(t.getId(), t.getId())} ${this.removeSpaces(t.label ?? '', t.getId())}\\n`;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    private serialisePlaces(places: Array<Place>): string {\r\n        let result = `${BlockType.PLACES}\\n`;\r\n        places.forEach(p => {\r\n            result += `${this.removeSpaces(p.getId(), p.getId())} ${p.marking}\\n`;\r\n        });\r\n        return result;\r\n    }\r\n\r\n    private serialiseArcs(arcs: Array<Arc>): string {\r\n        let result = `${BlockType.ARCS}\\n`;\r\n        arcs.forEach(a => {\r\n            result += `${this.removeSpaces(a.sourceId, a.getId())} ${this.removeSpaces(a.destinationId, a.getId())}`;\r\n            if (a.weight > 1) {\r\n                result += ` ${a.weight}`;\r\n            }\r\n            result += '\\n';\r\n        });\r\n        return result;\r\n    }\r\n\r\n    private removeSpaces(str: string, id: string): string {\r\n        if (str.includes(' ')) {\r\n            console.warn(`Petri net element with id '${id}' contains a spaces in its definition! Replacing spaces with underscores, no uniqueness check is performed!`)\r\n            return str.replace(/ /g, '_');\r\n        }\r\n        else {\r\n            return str;\r\n        }\r\n    }\r\n}\r\n","import {AbstractParser} from './abstract-parser';\r\n\r\nexport abstract class AbstractBlockParser<T> extends AbstractParser<T> {\r\n\r\n    protected readonly _supportedBlocks: Array<string>;\r\n\r\n    protected constructor(allowedTypes: Array<string> | string, supportedBlocks: Array<string>) {\r\n        super(allowedTypes);\r\n        this._supportedBlocks = supportedBlocks;\r\n    }\r\n\r\n    protected override processFileLines(lines: Array<string>): T | undefined {\r\n        const result = this.newResult();\r\n\r\n        let currentBlock: string | undefined = undefined;\r\n        let blockStart = -1;\r\n\r\n        try {\r\n            for (let i = 0; i < lines.length; i++) {\r\n                const line = lines[i].trimEnd();\r\n                if (!line.startsWith('.')) {\r\n                    continue;\r\n                }\r\n\r\n                const newBlock = this._supportedBlocks.find(block => line.startsWith(block));\r\n                if (newBlock === undefined) {\r\n                    console.debug(`ignoring unsupported block on line ${i}: '${line}'`);\r\n                    continue;\r\n                }\r\n\r\n                this.parseBlock(currentBlock, blockStart, i, lines, result);\r\n\r\n                blockStart = i + 1;\r\n                currentBlock = newBlock;\r\n            }\r\n            this.parseBlock(currentBlock, blockStart, lines.length, lines, result);\r\n        } catch (e) {\r\n            console.error((e as Error).message);\r\n            return undefined;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected abstract newResult(): T;\r\n\r\n    protected abstract resolveBlockParser(block: string): undefined | ((lines: Array<string>, result: T) => void);\r\n\r\n    protected parseEachLine(lines: Array<string>, partParser: (parts: Array<string>, line: string) => void) {\r\n        for (let i = 0; i < lines.length; i++) {\r\n            const line = this.getLineTrimEnd(lines, i);\r\n            if (line.length === 0) {\r\n                continue;\r\n            }\r\n            const parts = line.split(' ');\r\n            partParser(parts, line);\r\n        }\r\n    }\r\n\r\n    protected getLineTrimEnd(lines: Array<string>, index: number): string {\r\n        return lines[index].trimEnd();\r\n    }\r\n\r\n    private parseBlock(currentBlock: string | undefined, blockStart: number, blockEnd: number, lines: Array<string>, result: T) {\r\n        if (currentBlock !== undefined) {\r\n            const blockParser = this.resolveBlockParser(currentBlock);\r\n            if (blockParser === undefined) {\r\n                throw new Error(`block type '${currentBlock}' is suppoerted but no block parser could be resolved!`);\r\n            }\r\n            blockParser(lines.slice(blockStart, blockEnd), result);\r\n        }\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {PetriNet} from '../model/petri-net';\r\nimport {Place} from '../model/place';\r\nimport {Transition} from '../model/transition';\r\nimport {Arc} from '../model/arc';\r\nimport {SourceAndDestination} from './source-and-destination';\r\nimport {Node} from '../model/node';\r\nimport {AbstractBlockParser} from '../../../utility/abstract-block-parser';\r\nimport {BlockType} from './block-type';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PetriNetParserService extends AbstractBlockParser<PetriNet> {\r\n\r\n    constructor() {\r\n        super(\r\n            'pn',\r\n            [BlockType.PLACES, BlockType.TRANSITIONS, BlockType.ARCS]\r\n        );\r\n    }\r\n\r\n    protected newResult(): PetriNet {\r\n        return new PetriNet();\r\n    }\r\n\r\n    protected resolveBlockParser(block: string): ((lines: Array<string>, result: PetriNet) => void) | undefined {\r\n        switch (block) {\r\n            case BlockType.PLACES:\r\n                return (lines, result) => this.parsePlaces(lines, result);\r\n            case BlockType.TRANSITIONS:\r\n                return (lines, result) => this.parseTransitions(lines, result);\r\n            case BlockType.ARCS:\r\n                return (lines, result) => this.parseArcs(lines, result);\r\n            default:\r\n                return undefined;\r\n        }\r\n    }\r\n\r\n    private parsePlaces(lines: Array<string>, net: PetriNet) {\r\n        this.parseEachLine(lines, (parts, line) => {\r\n            if (parts.length !== 2) {\r\n                throw new Error(`line '${line}' does not have the correct number of elements! Place definition must contain exactly two elements!`);\r\n            }\r\n            const initialMarking = parseInt(parts[1])\r\n            if (isNaN(initialMarking)) {\r\n                throw new Error(`line '${line}' marking cannot be parsed into a number! Place marking must be a non-negative integer!`);\r\n            }\r\n            if (initialMarking < 0) {\r\n                throw new Error(`line '${line}' marking is less than 0! Place marking must be a non-negative integer!`);\r\n            }\r\n            if (net.getPlace(parts[0]) !== undefined || net.getTransition(parts[0]) !== undefined) {\r\n                throw new Error(`line '${line}' place ids must be unique!`);\r\n            }\r\n            const place = new Place(initialMarking, 0, 0, parts[0]);\r\n            net.addPlace(place);\r\n        });\r\n    }\r\n\r\n    private parseTransitions(lines: Array<string>, net: PetriNet) {\r\n        this.parseEachLine(lines, (parts, line) => {\r\n            if (parts.length < 1 || parts.length > 2) {\r\n                throw new Error(`line '${line}' does not have the correct number of elements! Transition definition must contain one or two elements!`);\r\n            }\r\n            if (net.getTransition(parts[0]) !== undefined || net.getPlace(parts[0]) !== undefined) {\r\n                throw new Error(`line '${line}' transition ids must be unique!`);\r\n            }\r\n            net.addTransition(new Transition(parts[1], 0, 0, parts[0]))\r\n        });\r\n    }\r\n\r\n    private parseArcs(lines: Array<string>, net: PetriNet) {\r\n        this.parseEachLine(lines, (parts, line) => {\r\n            if (parts.length < 2 || parts.length > 3) {\r\n                throw new Error(`line '${line}' does not have the correct number of elements! Arc definition must contain two or three elements!`);\r\n            }\r\n            let weight = 1;\r\n            if (parts.length === 3) {\r\n                weight = parseInt(parts[2])\r\n                if (isNaN(weight)) {\r\n                    throw new Error(`line '${line}' arc weight cannot be parsed into a number! Arc weight must be a positive integer!`);\r\n                }\r\n                if (weight < 1) {\r\n                    throw new Error(`line '${line}' arc weight is less than 1! Arc weight must be a positive integer!`);\r\n                }\r\n            }\r\n            const srcDest = this.extractSourceAndDestination(parts[0], parts[1], line, net);\r\n\r\n            const arcId = parts[0] + ' ' + parts[1];\r\n            if (net.getArc(arcId) !== undefined) {\r\n                throw new Error(`line '${line}' duplicate arcs between elements are not allowed!`);\r\n            }\r\n\r\n            const arc = new Arc(arcId, srcDest.source, srcDest.destination, weight);\r\n            net.addArc(arc);\r\n        });\r\n    }\r\n\r\n    private extractSourceAndDestination(sourceId: string, destinationId: string, line: string, net: PetriNet): SourceAndDestination {\r\n        let source: Node | undefined = net.getPlace(sourceId);\r\n        let destination: Node | undefined = net.getTransition(destinationId);\r\n        if (!!source && !!destination) {\r\n            return {source, destination};\r\n        }\r\n        source = net.getTransition(sourceId);\r\n        destination = net.getPlace(destinationId);\r\n        if (!!source && !!destination) {\r\n            return {source, destination};\r\n        }\r\n        throw new Error(`line '${line}' arc source or destination is invalid! Arc must reference existing net elements and connect a place with a transition or a transition with a place!`);\r\n    }\r\n}\r\n","import {Transition} from '../../pn/model/transition';\r\n\r\nexport class Event {\r\n    private readonly _id: string;\r\n    private readonly _label: string | undefined;\r\n    private readonly _nextEvents: Set<Event>;\r\n    private readonly _previousEvents: Set<Event>;\r\n\r\n    private _transition: undefined | Transition;\r\n    private _localMarking: undefined | Array<number>;\r\n\r\n    constructor(id: string, label?: string) {\r\n        this._id = id;\r\n        this._label = label;\r\n        this._nextEvents = new Set<Event>();\r\n        this._previousEvents = new Set<Event>();\r\n    }\r\n\r\n    get id(): string {\r\n        return this._id;\r\n    }\r\n\r\n    get label(): string | undefined {\r\n        return this._label;\r\n    }\r\n\r\n    get nextEvents(): Set<Event> {\r\n        return this._nextEvents;\r\n    }\r\n\r\n    get previousEvents(): Set<Event> {\r\n        return this._previousEvents;\r\n    }\r\n\r\n    get transition(): Transition | undefined {\r\n        return this._transition;\r\n    }\r\n\r\n    set transition(value: Transition | undefined) {\r\n        this._transition = value;\r\n    }\r\n\r\n    get localMarking(): Array<number> | undefined {\r\n        return this._localMarking;\r\n    }\r\n\r\n    public addNextEvent(event: Event) {\r\n        this._nextEvents.add(event);\r\n        event.addPreviousEvent(this);\r\n    }\r\n\r\n    protected addPreviousEvent(event: Event) {\r\n        this._previousEvents.add(event);\r\n    }\r\n\r\n    public initializeLocalMarking(size: number) {\r\n        this._localMarking = new Array<number>(size).fill(0);\r\n    }\r\n}\r\n","import {Event} from './event';\r\n\r\nexport class PartialOrder {\r\n    private readonly _events: Map<string, Event>;\r\n    private readonly _initialEvents: Set<Event>;\r\n    private readonly _finalEvents: Set<Event>;\r\n\r\n    constructor() {\r\n        this._events = new Map<string, Event>();\r\n        this._initialEvents = new Set<Event>();\r\n        this._finalEvents = new Set<Event>();\r\n    }\r\n\r\n    get initialEvents(): Set<Event> {\r\n        return this._initialEvents;\r\n    }\r\n\r\n    get finalEvents(): Set<Event> {\r\n        return this._finalEvents;\r\n    }\r\n\r\n    get events(): Array<Event> {\r\n        return Array.from(this._events.values());\r\n    }\r\n\r\n    public getEvent(id: string): Event | undefined {\r\n        return this._events.get(id);\r\n    }\r\n\r\n    public addEvent(event: Event): void {\r\n        if (this._events.has(event.id)) {\r\n            throw new Error(`An event with id '${event.id}' already exists in this partial order!`);\r\n        }\r\n        this._events.set(event.id, event);\r\n    }\r\n\r\n    public determineInitialAndFinalEvents() {\r\n        this._initialEvents.clear();\r\n        this._finalEvents.clear();\r\n        for (const e of this._events.values()) {\r\n            if (e.previousEvents.size === 0) {\r\n                this._initialEvents.add(e);\r\n            }\r\n            if (e.nextEvents.size === 0) {\r\n                this._finalEvents.add(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    public clone(): PartialOrder {\r\n        const result = new PartialOrder();\r\n        for (const e of this._events.values()) {\r\n            result.addEvent(new Event(e.id, e.label));\r\n        }\r\n        for (const e of this._events.values()) {\r\n            const cloneE = result.getEvent(e.id) as Event;\r\n            for (const nextE of e.nextEvents) {\r\n                cloneE.addNextEvent(result.getEvent(nextE.id) as Event);\r\n            }\r\n        }\r\n        result.determineInitialAndFinalEvents();\r\n        return result;\r\n    }\r\n}\r\n","export enum BlockType {\r\n    EVENTS = '.events',\r\n    ARCS = '.arcs'\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {PartialOrder} from '../model/partial-order';\r\nimport {AbstractBlockParser} from '../../../utility/abstract-block-parser';\r\nimport {BlockType} from './block-type';\r\nimport {Event} from '../model/event';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PartialOrderParserService extends AbstractBlockParser<PartialOrder> {\r\n\r\n    constructor() {\r\n        super(\r\n            ['run', 'po', 'ps', 'log'],\r\n            [BlockType.EVENTS, BlockType.ARCS]\r\n        );\r\n    }\r\n\r\n    override parse(text: string): PartialOrder | undefined {\r\n        const po = super.parse(text);\r\n        if (po !== undefined) {\r\n            po.determineInitialAndFinalEvents();\r\n        }\r\n        return po;\r\n    }\r\n\r\n    protected newResult(): PartialOrder {\r\n        return new PartialOrder();\r\n    }\r\n\r\n    protected resolveBlockParser(block: string): ((lines: Array<string>, result: PartialOrder) => void) | undefined {\r\n        switch (block) {\r\n            case BlockType.EVENTS:\r\n                return (lines, result) => this.parseEvents(lines, result);\r\n            case BlockType.ARCS:\r\n                return (lines, result) => this.parseArcs(lines, result);\r\n            default:\r\n                return undefined;\r\n        }\r\n    }\r\n\r\n    private parseEvents(lines: Array<string>, partialOrder: PartialOrder) {\r\n        this.parseEachLine(lines, (parts, line) => {\r\n            if (parts.length !== 2) {\r\n                throw new Error(`line ${line} does not have the correct number of elements! Event definitions must consist of exactly two elements!`);\r\n            }\r\n            partialOrder.addEvent(new Event(parts[0], parts[1]));\r\n        });\r\n    }\r\n\r\n    private parseArcs(lines: Array<string>, partialOrder: PartialOrder) {\r\n        this.parseEachLine(lines, (parts, line) => {\r\n            if (parts.length !== 2) {\r\n                throw new Error(`line ${line} does not have the correct number of elements! Arc definitions must consist of exactly two elements!`);\r\n            }\r\n            if (parts[0] === parts[1]) {\r\n                throw new Error(`line ${line} specifies a reflexive arc! Partial order must be ireflexive!`);\r\n            }\r\n            const first = partialOrder.getEvent(parts[0]);\r\n            const second = partialOrder.getEvent(parts[1]);\r\n            if (first === undefined || second === undefined) {\r\n                throw new Error(`line ${line} specifies an arc between at least one event that does not exist in the partial order!`);\r\n            }\r\n            first.addNextEvent(second);\r\n        });\r\n    }\r\n\r\n}\r\n","import {LogEvent} from './logEvent';\r\nimport {EditableStringSequence} from '../../../utility/string-sequence';\r\n\r\nexport class Trace implements EditableStringSequence {\r\n\r\n    public events: Array<LogEvent> = [];\r\n    public name?: string;\r\n    public description?: string;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    get eventNames(): Array<string> {\r\n        return this.events.map(e => e.name);\r\n    }\r\n\r\n    public appendEvent(event: LogEvent) {\r\n        this.events.push(event);\r\n    }\r\n\r\n    get(i: number): string {\r\n        return this.events[i].name;\r\n    }\r\n\r\n    set(i: number, value: string): void {\r\n        this.events[i].name = value;\r\n    }\r\n\r\n    length(): number {\r\n        return this.events.length;\r\n    }\r\n\r\n    clone(): Trace {\r\n        const clone = new Trace();\r\n        clone.name = this.name;\r\n        clone.description = this.description;\r\n        clone.events = [...this.events];\r\n        return clone;\r\n    }\r\n}\r\n","import {Lifecycle} from './lifecycle';\r\n\r\nexport class LogEvent {\r\n    public resource?: string;\r\n    public timestamp?: Date;\r\n    public lifecycle?: Lifecycle;\r\n    private _attributes: Map<string, string>;\r\n    private _pair?: LogEvent;\r\n\r\n    constructor(public name: string) {\r\n        this._attributes = new Map<string, string>();\r\n    }\r\n\r\n    public getAttribute(name: string): string | undefined {\r\n        return this._attributes.get(name);\r\n    }\r\n\r\n    public setAttribute(name: string, value: string) {\r\n        this._attributes.set(name, value);\r\n    }\r\n\r\n    public setPairEvent(pair: LogEvent) {\r\n        this._pair = pair;\r\n    }\r\n\r\n    public getPairEvent(): LogEvent | undefined {\r\n        return this._pair;\r\n    }\r\n}\r\n","export enum Lifecycle {\r\n    START = 'start',\r\n    COMPLETE = 'complete'\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Trace} from '../model/trace';\r\nimport {LogEvent} from '../model/logEvent';\r\nimport {Lifecycle} from '../model/lifecycle';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class XesLogParserService {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    parse(text: string): Array<Trace> {\r\n        const parser = new DOMParser();\r\n        const xml = parser.parseFromString(text, \"text/xml\");\r\n\r\n        return this.parseTraces(xml.getElementsByTagName('trace'));\r\n    }\r\n\r\n    private parseTraces(traceElements: HTMLCollectionOf<Element>): Array<Trace> {\r\n        const result: Array<Trace> = [];\r\n\r\n        for (let i = 0; i < traceElements.length; i++) {\r\n            result.push(this.parseTrace(traceElements.item(i)!));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private parseTrace(element: Element): Trace {\r\n        const trace = this.createTrace(element.querySelectorAll('trace > string'));\r\n\r\n        const events = element.getElementsByTagName(\"event\");\r\n        for (let i = 0; i < events.length; i++) {\r\n            trace.appendEvent(this.parseEvent(events.item(i)!));\r\n        }\r\n\r\n        return trace;\r\n    }\r\n\r\n    private createTrace(traceAttributes: NodeListOf<Element>): Trace {\r\n        const trace = new Trace();\r\n\r\n        const attributes = this.parseKeyValue(traceAttributes);\r\n\r\n        this.setIfPresent('concept:name', attributes, name => {\r\n            trace.name = name;\r\n        })\r\n\r\n        this.setIfPresent('description', attributes, description => {\r\n            trace.description = description;\r\n        });\r\n\r\n        for (const key of attributes.keys()) {\r\n            console.debug(`unknown xml attribute key '${key}'`, traceAttributes);\r\n        }\r\n\r\n        return trace;\r\n    }\r\n\r\n    private parseEvent(element: Element): LogEvent {\r\n        const stringAttributes = this.parseKeyValue(element.getElementsByTagName('string'));\r\n\r\n        const name = this.getAndRemove('concept:name', stringAttributes);\r\n        if (name === undefined) {\r\n            console.debug(element);\r\n            throw new Error(`Event name is not defined!`);\r\n        }\r\n\r\n        const event = new LogEvent(name);\r\n\r\n        this.setIfPresent('org:resource', stringAttributes, resource => {\r\n            event.resource = resource;\r\n        });\r\n        this.setIfPresent('lifecycle:transition', stringAttributes, lifecycle => {\r\n            event.lifecycle = lifecycle as Lifecycle;\r\n        })\r\n        for (const [key, value] of stringAttributes.entries()) {\r\n            event.setAttribute(key, value);\r\n        }\r\n\r\n        const dateAttributes = this.parseKeyValue(element.getElementsByTagName('date'));\r\n        this.setIfPresent('time:timestamp', dateAttributes, timestamp => {\r\n            event.timestamp = new Date(timestamp);\r\n        });\r\n        for (const [key, value] of dateAttributes.entries()) {\r\n            event.setAttribute(key, value);\r\n        }\r\n\r\n        return event;\r\n    }\r\n\r\n    private parseKeyValue(attributes: HTMLCollectionOf<Element> | NodeListOf<Element>): Map<string, string> {\r\n        const result = new Map<string, string>();\r\n\r\n        for (let i = 0; i < attributes.length; i++) {\r\n            const element = attributes.item(i)!;\r\n            const elementAttributes = element.attributes;\r\n\r\n            const valueAttribute = elementAttributes.getNamedItem('value');\r\n            if (valueAttribute === null) {\r\n                console.debug(`xml element has no attribute 'value'`, element);\r\n                continue;\r\n            }\r\n\r\n            const value = valueAttribute.value;\r\n\r\n            const keyAttribute = elementAttributes.getNamedItem('key');\r\n            if (keyAttribute === null) {\r\n                console.debug(`xml element has no attribute 'key'`, element);\r\n                continue;\r\n            }\r\n\r\n            const key = keyAttribute.value;\r\n\r\n            result.set(key, value);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private getAndRemove(key: string, map: Map<string, string>): string | undefined {\r\n        const result = map.get(key);\r\n        map.delete(key);\r\n        return result;\r\n    }\r\n\r\n    private setIfPresent(key: string, map: Map<string, string>, setter: (v: string) => void) {\r\n        const value = this.getAndRemove(key, map);\r\n        if (value !== undefined) {\r\n            setter(value);\r\n        }\r\n    }\r\n}\r\n","export function iterate<T>(iterable: Iterable<T>, consumer: (value: T) => void) {\r\n    const iterator = iterable[Symbol.iterator]();\r\n    let it = iterator.next();\r\n    while (!it.done) {\r\n        consumer(it.value);\r\n        it = iterator.next();\r\n    }\r\n}\r\n","import {createUniqueString, IncrementingCounter} from './incrementing-counter';\r\nimport {EditableStringSequence} from './string-sequence';\r\nimport {iterate} from './iterate';\r\n\r\nexport class Relabeler {\r\n\r\n    private readonly _existingLabels: Set<string>;\r\n    private readonly _labelCounter: IncrementingCounter;\r\n    private readonly _labelMapping: Map<string, string>;\r\n    private readonly _labelOrder: Map<string, Array<string>>;\r\n    private readonly _nonUniqueIdentities: Set<string>;\r\n\r\n    private readonly _labelOrderIndex: Map<string, number>;\r\n\r\n    constructor() {\r\n        this._existingLabels = new Set<string>();\r\n        this._labelCounter = new IncrementingCounter();\r\n        this._labelMapping = new Map<string, string>();\r\n        this._labelOrder = new Map<string, Array<string>>();\r\n        this._nonUniqueIdentities = new Set<string>();\r\n\r\n        this._labelOrderIndex = new Map<string, number>();\r\n    }\r\n\r\n    public clone(): Relabeler {\r\n        const result = new Relabeler();\r\n        this._existingLabels.forEach(l => {\r\n            result._existingLabels.add(l);\r\n        });\r\n        result._labelCounter.setCurrentValue(this._labelCounter.current());\r\n        this._labelMapping.forEach((v, k) => {\r\n            result._labelMapping.set(k, v);\r\n        });\r\n        this._labelOrder.forEach((v, k) => {\r\n            result._labelOrder.set(k, [...v]);\r\n        });\r\n        this._nonUniqueIdentities.forEach(nui => {\r\n            result._nonUniqueIdentities.add(nui);\r\n        })\r\n        return result;\r\n    }\r\n\r\n    public getNewUniqueLabel(oldLabel: string): string {\r\n        return this.getNewLabel(oldLabel, false);\r\n    }\r\n\r\n    public getNewLabelPreserveNonUniqueIdentities(oldLabel: string): string {\r\n        return this.getNewLabel(oldLabel, true);\r\n    }\r\n\r\n    protected getNewLabel(oldLabel: string, preserveNonUniqueIdentities: boolean): string {\r\n        if (!this._existingLabels.has(oldLabel)) {\r\n            // label encountered for the first time\r\n            this._existingLabels.add(oldLabel);\r\n            this._labelMapping.set(oldLabel, oldLabel);\r\n\r\n            if (preserveNonUniqueIdentities) {\r\n                this._nonUniqueIdentities.add(oldLabel);\r\n            } else {\r\n                this._labelOrder.set(oldLabel, [oldLabel]);\r\n                this._labelOrderIndex.set(oldLabel, 1);\r\n            }\r\n\r\n            return oldLabel;\r\n        } else {\r\n            // relabeling required\r\n            let newLabelIndex = this._labelOrderIndex.get(oldLabel);\r\n            if (newLabelIndex === undefined) {\r\n                newLabelIndex = 0;\r\n            }\r\n\r\n            let relabelingOrder = this._labelOrder.get(oldLabel);\r\n            if (relabelingOrder === undefined) {\r\n                // relabeling collision or non-unique identity\r\n                if (preserveNonUniqueIdentities && this._nonUniqueIdentities.has(oldLabel)) {\r\n                    return oldLabel;\r\n                }\r\n                relabelingOrder = [];\r\n                this._labelOrder.set(oldLabel, relabelingOrder);\r\n                newLabelIndex = 0;\r\n            }\r\n\r\n            if (newLabelIndex >= relabelingOrder.length) {\r\n                // new label must be generated\r\n                const newLabel = createUniqueString(oldLabel, this._existingLabels, this._labelCounter);\r\n                this._existingLabels.add(newLabel);\r\n                relabelingOrder.push(newLabel);\r\n                this._labelMapping.set(newLabel, oldLabel);\r\n            }\r\n\r\n            this._labelOrderIndex.set(oldLabel, newLabelIndex + 1);\r\n            return relabelingOrder[newLabelIndex];\r\n        }\r\n    }\r\n\r\n    public restartSequence() {\r\n        this._labelOrderIndex.clear();\r\n    }\r\n\r\n    public getLabelMapping(): Map<string, string> {\r\n        return this._labelMapping;\r\n    }\r\n\r\n    public getLabelOrder(): Map<string, Array<string>> {\r\n        return this._labelOrder;\r\n    }\r\n\r\n    public uniquelyRelabelSequence(sequence: EditableStringSequence) {\r\n        this.relabel(sequence, false);\r\n    }\r\n\r\n    public uniquelyRelabelSequences(sequences: Iterable<EditableStringSequence>) {\r\n        iterate(sequences, s => {\r\n            this.uniquelyRelabelSequence(s);\r\n        });\r\n    }\r\n\r\n    public relabelSequencePreserveNonUniqueIdentities(sequence: EditableStringSequence) {\r\n        this.relabel(sequence, true);\r\n    }\r\n\r\n    public relabelSequencesPreserveNonUniqueIdentities(sequences: Iterable<EditableStringSequence>) {\r\n        iterate(sequences, s => {\r\n            this.relabelSequencePreserveNonUniqueIdentities(s);\r\n        });\r\n    }\r\n\r\n    protected relabel(sequence: EditableStringSequence, preserveIdentities: boolean) {\r\n        this.restartSequence();\r\n        for (let i = 0; i < sequence.length(); i++) {\r\n            sequence.set(i, this.getNewLabel(sequence.get(i), preserveIdentities));\r\n        }\r\n    }\r\n\r\n    public undoSequenceLabeling(sequence: EditableStringSequence) {\r\n        for (let i = 0; i < sequence.length(); i++) {\r\n            sequence.set(i, this.undoLabel(sequence.get(i)));\r\n        }\r\n    }\r\n\r\n    public undoSequencesLabeling(sequences: Iterable<EditableStringSequence>) {\r\n        iterate(sequences, s => {\r\n            this.undoSequenceLabeling(s);\r\n        });\r\n    }\r\n\r\n    public undoLabel(label: string): string {\r\n        return this._labelMapping.get(label) ?? label\r\n    }\r\n}\r\n","export enum OccurenceMatrixType {\r\n    UNIQUE,\r\n    WILDCARD\r\n}\r\n\r\nexport class OccurrenceMatrix {\r\n    private readonly _matrix: {\r\n        [k: string]: {\r\n            [k: string]: number\r\n        }\r\n    };\r\n\r\n    private readonly _keys: Set<string>;\r\n\r\n    constructor(private _type: OccurenceMatrixType) {\r\n        this._matrix = {};\r\n        this._keys = new Set<string>();\r\n    }\r\n\r\n    get keys(): Set<string> {\r\n        return this._keys;\r\n    }\r\n\r\n    get type(): OccurenceMatrixType {\r\n        return this._type;\r\n    }\r\n\r\n    public add(e1: string, e2: string) {\r\n        const row = this._matrix[e1];\r\n        if (row === undefined) {\r\n            this._matrix[e1] = {[e2]: 1};\r\n        } else {\r\n            row[e2] = (row[e2] ?? 0) + 1;\r\n        }\r\n        this._keys.add(e1);\r\n        this._keys.add(e2);\r\n    }\r\n\r\n    public get(e1: string, e2: string): boolean {\r\n        const row = this._matrix[e1];\r\n        if (row === undefined) {\r\n            return false;\r\n        }\r\n        return !!row[e2];\r\n    }\r\n\r\n    public getOccurrenceFrequency(e1: string, e2: string): undefined | number {\r\n        return this._matrix?.[e1]?.[e2];\r\n    }\r\n}\r\n","import {Relabeler} from '../../../utility/relabeler';\r\nimport {\r\n    OccurenceMatrixType,\r\n    OccurrenceMatrix\r\n} from '../../../algorithms/log/concurrency-oracle/occurrence-matrix';\r\nimport {ConcurrencyMatrices, ConcurrencyMatrix} from './concurrency-matrix';\r\n\r\n\r\nexport class ConcurrencyRelation {\r\n\r\n    private readonly _relabeler: Relabeler;\r\n    private readonly _uniqueConcurrencyMatrix: ConcurrencyMatrix;\r\n    private readonly _wildcardConcurrencyMatrix: ConcurrencyMatrix;\r\n    private readonly _mixedConcurrencyMatrix: ConcurrencyMatrix;\r\n    private readonly _wildCardLabels: Set<string>;\r\n\r\n    protected constructor(relabeler: Relabeler) {\r\n        this._uniqueConcurrencyMatrix = {};\r\n        this._wildcardConcurrencyMatrix = {};\r\n        this._mixedConcurrencyMatrix = {};\r\n        this._wildCardLabels = new Set<string>();\r\n        this._relabeler = relabeler.clone();\r\n    }\r\n\r\n    public static noConcurrency(): ConcurrencyRelation {\r\n        return new ConcurrencyRelation(new Relabeler());\r\n    }\r\n\r\n    public static fromOccurrenceMatrix(matrix: OccurrenceMatrix, relabeler: Relabeler): ConcurrencyRelation {\r\n        const result = new ConcurrencyRelation(relabeler);\r\n\r\n        const keys = Array.from(matrix.keys);\r\n        for (let i = 0; i < keys.length; i++) {\r\n            const k1 = keys[i];\r\n            for (let j = i + 1; j < keys.length; j++) {\r\n                const k2 = keys[j];\r\n                if (matrix.get(k1, k2) && matrix.get(k2, k1)) {\r\n                    switch (matrix.type) {\r\n                        case OccurenceMatrixType.UNIQUE:\r\n                            result.setUniqueConcurrent(k1, k2, matrix.getOccurrenceFrequency(k1, k2)!, matrix.getOccurrenceFrequency(k2, k1)!);\r\n                            break;\r\n                        case OccurenceMatrixType.WILDCARD:\r\n                            result.setWildcardConcurrent(k1, k2, matrix.getOccurrenceFrequency(k1, k2)!, matrix.getOccurrenceFrequency(k2, k1)!);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public isConcurrent(labelA: string, labelB: string): boolean {\r\n        const unique = this.read(this._uniqueConcurrencyMatrix, labelA, labelB);\r\n        if (unique) {\r\n            return true;\r\n        }\r\n\r\n        const wildcardA = this.getWildcard(labelA);\r\n        const wildcardB = this.getWildcard(labelB);\r\n        if (!wildcardA && !wildcardB) {\r\n            return false;\r\n        } else if (wildcardA && wildcardB) {\r\n            return this.read(this._wildcardConcurrencyMatrix, wildcardA, wildcardB);\r\n        } else if (wildcardA && !wildcardB) {\r\n            return this.read(this._mixedConcurrencyMatrix, wildcardA, labelB);\r\n        } else {\r\n            return this.read(this._mixedConcurrencyMatrix, wildcardB!, labelA);\r\n        }\r\n    }\r\n\r\n    public setUniqueConcurrent(uniqueLabelA: string, uniqueLabelB: string, concurrency?: boolean): void;\r\n    public setUniqueConcurrent(uniqueLabelA: string, uniqueLabelB: string, frequencyAB: number, frequencyBA: number): void;\r\n    public setUniqueConcurrent(uniqueLabelA: string, uniqueLabelB: string, value: boolean | number = true, frequencyBA?: number) {\r\n        if (typeof value === 'boolean') {\r\n            this.set(this._uniqueConcurrencyMatrix, uniqueLabelA, uniqueLabelB, value);\r\n            this.set(this._uniqueConcurrencyMatrix, uniqueLabelB, uniqueLabelA, value);\r\n        } else {\r\n            this.set(this._uniqueConcurrencyMatrix, uniqueLabelA, uniqueLabelB, value);\r\n            this.set(this._uniqueConcurrencyMatrix, uniqueLabelB, uniqueLabelA, frequencyBA!);\r\n        }\r\n    }\r\n\r\n    public setWildcardConcurrent(wildcardLabelA: string, wildcardLabelB: string, concurrency?: boolean): void;\r\n    public setWildcardConcurrent(wildcardLabelA: string, wildcardLabelB: string, frequencyAB: number, frequencyBA: number): void;\r\n    public setWildcardConcurrent(wildcardLabelA: string, wildcardLabelB: string, value: boolean | number = true, frequencyBA?: number) {\r\n        if (typeof value === 'boolean') {\r\n            this.set(this._wildcardConcurrencyMatrix, wildcardLabelA, wildcardLabelB, value);\r\n            this.set(this._wildcardConcurrencyMatrix, wildcardLabelB, wildcardLabelA, value);\r\n        } else {\r\n            this.set(this._wildcardConcurrencyMatrix, wildcardLabelA, wildcardLabelB, value);\r\n            this.set(this._wildcardConcurrencyMatrix, wildcardLabelB, wildcardLabelA, frequencyBA!);\r\n        }\r\n\r\n        this._wildCardLabels.add(wildcardLabelA);\r\n        this._wildCardLabels.add(wildcardLabelB);\r\n    }\r\n\r\n    public setMixedConcurrent(wildcardLabel: string, uniqueLabel: string, concurrency: boolean = true) {\r\n        this.set(this._mixedConcurrencyMatrix, wildcardLabel, uniqueLabel, concurrency);\r\n        this._wildCardLabels.add(wildcardLabel);\r\n    }\r\n\r\n    protected set(matrix: ConcurrencyMatrix, uniqueLabelA: string, uniqueLabelB: string, concurrency?: boolean): void;\r\n    protected set(matrix: ConcurrencyMatrix, uniqueLabelA: string, uniqueLabelB: string, frequency: number): void;\r\n    protected set(matrix: ConcurrencyMatrix, uniqueLabelA: string, uniqueLabelB: string, value: boolean | number = true) {\r\n        const row = matrix[uniqueLabelA];\r\n        if (row === undefined) {\r\n            matrix[uniqueLabelA] = {[uniqueLabelB]: value};\r\n            return;\r\n        }\r\n        row[uniqueLabelB] = value;\r\n    }\r\n\r\n    protected read(matrix: ConcurrencyMatrix, row: string, column: string): boolean {\r\n        const matrixRow = matrix[row];\r\n        if (matrixRow === undefined) {\r\n            return false;\r\n        }\r\n        return !!matrixRow[column];\r\n    }\r\n\r\n    protected getWildcard(label: string): string | undefined {\r\n        const undone = this.relabeler.undoLabel(label);\r\n        if (this._wildCardLabels.has(undone)) {\r\n            return undone;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    get relabeler(): Relabeler {\r\n        return this._relabeler;\r\n    }\r\n\r\n    public cloneConcurrencyMatrices(): ConcurrencyMatrices {\r\n        return {\r\n            unique: this.cloneMatrix(this._uniqueConcurrencyMatrix),\r\n            wildcard: this.cloneMatrix(this._wildcardConcurrencyMatrix),\r\n            mixed: this.cloneMatrix(this._mixedConcurrencyMatrix)\r\n        };\r\n    }\r\n\r\n    protected cloneMatrix(matrix: ConcurrencyMatrix): ConcurrencyMatrix {\r\n        const result = {};\r\n\r\n        for (const row of Object.keys(matrix)) {\r\n            for (const column of Object.keys(matrix[row])) {\r\n                if (!matrix[row][column]) {\r\n                    continue;\r\n                }\r\n                this.set(result, row, column, matrix[row][column] as number);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n","import {Injectable} from '@angular/core';\r\nimport {ConcurrencyRelation} from '../model/concurrency-relation';\r\nimport {AbstractParser} from '../../../utility/abstract-parser';\r\nimport {Relabeler} from '../../../utility/relabeler';\r\nimport {ConcurrencyMatrix} from '../model/concurrency-matrix';\r\n\r\n\r\ninterface OrderedOriginal {\r\n    original: string,\r\n    order: number\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ConcurrencySerialisationService {\r\n\r\n    private static PARALLEL_SYMBOL = '∥';\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public serialise(concurrency: ConcurrencyRelation): string {\r\n        let result = `${AbstractParser.TYPE_BLOCK} concurrency\\n`\r\n\r\n        const relabeler = concurrency.relabeler;\r\n        const cachedUniqueLabels = new Map<string, OrderedOriginal>();\r\n        const matrices = concurrency.cloneConcurrencyMatrices();\r\n\r\n        this.iterateConcurrentEntries(matrices.unique, true, (labelA, labelB, fab, fba) => {\r\n            const originalA = this.getOriginalLabel(labelA, cachedUniqueLabels, relabeler);\r\n            const originalB = this.getOriginalLabel(labelB, cachedUniqueLabels, relabeler);\r\n\r\n            result += this.formatConcurrencyEntry(this.formatUniqueLabel(originalA), this.formatUniqueLabel(originalB), fab!, fba!);\r\n        });\r\n\r\n        this.iterateConcurrentEntries(matrices.wildcard, true, (labelA, labelB, fab, fba) => {\r\n            // TODO unmapping of wildcard labels might be needed\r\n            result += this.formatConcurrencyEntry(labelA, labelB, fab!, fba!);\r\n        });\r\n\r\n        this.iterateConcurrentEntries(matrices.mixed, false, (wildcardLabel, uniqueLabel) => {\r\n            // TODO unmapping of wildcard labels might be needed\r\n            const uniqueOriginal = this.getOriginalLabel(uniqueLabel, cachedUniqueLabels, relabeler);\r\n\r\n            result += this.formatConcurrencyEntry(wildcardLabel, this.formatUniqueLabel(uniqueOriginal));\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    protected iterateConcurrentEntries(matrix: ConcurrencyMatrix, symmetric: boolean, consumer: (a: string, b: string, fab?: number, fba?: number) => void) {\r\n        if (!symmetric) {\r\n            for (const labelA of Object.keys(matrix)) {\r\n                for (const labelB of Object.keys(matrix[labelA])) {\r\n                    this.processMatrixEntry(matrix, labelA, labelB, consumer);\r\n                }\r\n            }\r\n        } else {\r\n            const keys = Object.keys(matrix);\r\n            for (let i = 0; i < keys.length; i++) {\r\n                const labelA = keys[i];\r\n                for (let j = i + 1; j < keys.length; j++) {\r\n                    const labelB = keys[j];\r\n                    this.processMatrixEntry(matrix, labelA, labelB, consumer);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected processMatrixEntry(matrix: ConcurrencyMatrix, labelA: string, labelB: string, consumer: (a: string, b: string, fab?: number, fba?: number) => void) {\r\n        if (!matrix[labelA][labelB]) {\r\n            return;\r\n        }\r\n        if (typeof matrix[labelA][labelB] === 'boolean') {\r\n            consumer(labelA, labelB);\r\n        } else {\r\n            consumer(labelA, labelB, matrix[labelA][labelB] as number, matrix[labelB][labelA] as number);\r\n        }\r\n    }\r\n\r\n    protected getOriginalLabel(label: string, cachedUniqueLabels: Map<string, OrderedOriginal>, relabeler: Relabeler): OrderedOriginal {\r\n        const m = cachedUniqueLabels.get(label);\r\n        if (m !== undefined) {\r\n            return m;\r\n        }\r\n        const original = relabeler.getLabelMapping().get(label);\r\n        if (original === undefined) {\r\n            console.debug(relabeler);\r\n            console.debug(label);\r\n            throw new Error('Unique concurrency matrix contains an entry unknown to the relabeling function!');\r\n        }\r\n        const order = relabeler.getLabelOrder().get(original)!.findIndex(l => l === label);\r\n        if (order === -1) {\r\n            console.debug(relabeler);\r\n            console.debug(label);\r\n            throw new Error('Unique concurrency matrix contains an entry outside of the relabeling order of the relabeling function!');\r\n        }\r\n        cachedUniqueLabels.set(label, {original, order});\r\n        return cachedUniqueLabels.get(label)!;\r\n    }\r\n\r\n    protected formatConcurrencyEntry(formattedLabelA: string, formattedLabelB: string): string;\r\n    protected formatConcurrencyEntry(formattedLabelA: string, formattedLabelB: string, frequencyAB: number, frequencyBA: number): string\r\n    protected formatConcurrencyEntry(formattedLabelA: string, formattedLabelB: string, frequencyAB?: number, frequencyBA?: number): string {\r\n        if (frequencyAB === undefined && frequencyBA === undefined) {\r\n            return `${formattedLabelA}${ConcurrencySerialisationService.PARALLEL_SYMBOL}${formattedLabelB}\\n`;\r\n        } else {\r\n            return `${formattedLabelA}${ConcurrencySerialisationService.PARALLEL_SYMBOL}${formattedLabelB} #${frequencyAB} ${frequencyBA}\\n`;\r\n        }\r\n    }\r\n\r\n    protected formatUniqueLabel(label: OrderedOriginal): string {\r\n        return `${label.original}[${label.order + 1}]`;\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {ConcurrencyRelation} from '../model/concurrency-relation';\r\nimport {AbstractParser} from '../../../utility/abstract-parser';\r\nimport {Relabeler} from '../../../utility/relabeler';\r\n\r\n\r\ninterface RelabelingResult {\r\n    isWildcard?: boolean;\r\n    label: string;\r\n}\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ConcurrencyParserService extends AbstractParser<ConcurrencyRelation> {\r\n\r\n    protected static LINE_REGEX = /^(.+?)(?:\\[([1-9]\\d*)\\])?(?:\\|\\||∥)(.+?)(?:\\[([1-9]\\d*)\\])?(?: #\\d+ \\d+)?$/;\r\n\r\n    constructor() {\r\n        super('concurrency');\r\n    }\r\n\r\n    protected processFileLines(lines: Array<string>): ConcurrencyRelation | undefined {\r\n        const result = ConcurrencyRelation.noConcurrency();\r\n        const relabeler = result.relabeler;\r\n\r\n        for (const line of lines) {\r\n            if (line.trimEnd().length === 0) {\r\n                continue;\r\n            }\r\n\r\n            const match = line.match(ConcurrencyParserService.LINE_REGEX);\r\n            if (match === null) {\r\n                console.debug(line);\r\n                console.debug('line could not be matched with regex');\r\n                continue;\r\n            }\r\n\r\n            const eventA = this.getUniqueLabel(match[1], parseInt(match[2]), relabeler);\r\n            const eventB = this.getUniqueLabel(match[3], parseInt(match[4]), relabeler);\r\n\r\n            if (!eventA.isWildcard && !eventB.isWildcard) {\r\n                result.setUniqueConcurrent(eventA.label, eventB.label);\r\n            } else if (eventA.isWildcard && eventB.isWildcard) {\r\n                result.setWildcardConcurrent(eventA.label, eventB.label);\r\n            } else if (eventA.isWildcard && !eventB.isWildcard) {\r\n                result.setMixedConcurrent(eventA.label, eventB.label);\r\n            } else {\r\n                result.setMixedConcurrent(eventB.label, eventA.label);\r\n            }\r\n        }\r\n\r\n        relabeler.restartSequence();\r\n        return result;\r\n    }\r\n\r\n    protected getUniqueLabel(label: string, oneBasedOrder: number, relabeler: Relabeler): RelabelingResult {\r\n        if (isNaN(oneBasedOrder)) {\r\n            return {\r\n                isWildcard: true,\r\n                label\r\n            };\r\n        }\r\n\r\n        const storedOrder = relabeler.getLabelOrder().get(label);\r\n        const storedLabel = storedOrder?.[oneBasedOrder - 1];\r\n        if (storedLabel !== undefined) {\r\n            return {\r\n                label: storedLabel\r\n            };\r\n        }\r\n\r\n        let missingCount;\r\n        if (storedOrder === undefined) {\r\n            missingCount = oneBasedOrder;\r\n        } else {\r\n            missingCount = oneBasedOrder - storedOrder.length;\r\n        }\r\n\r\n        let missingLabel: string;\r\n        for (let i = 0; i < missingCount; i++) {\r\n            missingLabel = relabeler.getNewUniqueLabel(label);\r\n        }\r\n\r\n        return {\r\n            label: missingLabel!\r\n        };\r\n    }\r\n}\r\n","import {AbstractParser} from './abstract-parser';\r\nimport {DropFile} from './drop-file';\r\n\r\nexport class AlgorithmResult {\r\n\r\n    public static readonly RESULT_TYPE = 'result';\r\n    public static readonly RUNTIME_BLOCK = '.runtime';\r\n    public static readonly OUTPUT_BLOCK = '.output';\r\n\r\n    private readonly _algorithmName: string;\r\n    private readonly _runtimeMs: number | undefined;\r\n    private readonly _output: Array<string>;\r\n\r\n    constructor(algorithmName: string, startTimeMs?: number, endTimeMs?: number) {\r\n        this._algorithmName = algorithmName;\r\n        if (startTimeMs !== undefined && endTimeMs !== undefined) {\r\n            this._runtimeMs = endTimeMs - startTimeMs;\r\n        }\r\n        this._output = [];\r\n    }\r\n\r\n    public addOutputLine(outputLine: string) {\r\n        this._output.push(outputLine);\r\n    }\r\n\r\n    public serialise(): string {\r\n        let result = `${AbstractParser.TYPE_BLOCK} ${AlgorithmResult.RESULT_TYPE}\r\n${this._algorithmName}`;\r\n\r\n        if (this._runtimeMs !== undefined) {\r\n            result = result.concat(`\r\n${AlgorithmResult.RUNTIME_BLOCK}\r\n${this._runtimeMs.toFixed(3)} ms`\r\n            );\r\n        }\r\n\r\n        result = result.concat(`\\n${AlgorithmResult.OUTPUT_BLOCK}`);\r\n\r\n        this._output.forEach(line => {\r\n            result = result.concat(`\\n${line}`);\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    public toDropFile(fileName: string, suffix?: string): DropFile {\r\n        return new DropFile(fileName, this.serialise(), suffix);\r\n    }\r\n}\r\n","export function arraify<T>(a: T | Array<T>): Array<T> {\r\n    return Array.isArray(a) ? a : [a];\r\n}\r\n","import * as objectHash from 'object-hash';\r\n\r\nexport type Multiset = {[k: string]: number};\r\n\r\nexport abstract class MultisetEquivalent {\r\n\r\n    protected constructor(private _multiset: Multiset) {\r\n    }\r\n\r\n    get multiset(): Multiset {\r\n        return this._multiset;\r\n    }\r\n\r\n    equals(ms: Multiset): boolean {\r\n        const keys = Object.keys(this._multiset);\r\n        if (keys.length !== Object.keys(ms).length) {\r\n            return false;\r\n        }\r\n\r\n        for (const key of keys) {\r\n            if (this._multiset[key] !== ms[key]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    abstract merge(ms: MultisetEquivalent): void;\r\n}\r\n\r\nexport class MultisetMap<T> {\r\n    private _map: Map<string, Array<T & MultisetEquivalent>>;\r\n\r\n    constructor() {\r\n        this._map = new Map();\r\n    }\r\n\r\n    public put(value: T & MultisetEquivalent) {\r\n        const hash = this.hashKey(value.multiset);\r\n        const mapped = this._map.get(hash);\r\n        if (mapped === undefined) {\r\n            this._map.set(hash, [value]);\r\n        } else {\r\n            const equivalent = mapped.find(ms => ms.equals(value.multiset))\r\n            if (equivalent === undefined) {\r\n                mapped.push(value);\r\n            } else {\r\n                equivalent.merge(value);\r\n            }\r\n        }\r\n    }\r\n\r\n    public get(key: Multiset): (T & MultisetEquivalent) | undefined {\r\n        const mapped = this._map.get(this.hashKey(key));\r\n        if (mapped === undefined) {\r\n            return undefined;\r\n        }\r\n        return mapped.find(ms => ms.equals(key));\r\n    }\r\n\r\n    private hashKey(key: Multiset): string {\r\n        return objectHash.sha1(key);\r\n    }\r\n\r\n    public values(): Array<T & MultisetEquivalent> {\r\n        return Array.from(this._map.values()).flat();\r\n    }\r\n}\r\n","import {StringSequence} from './string-sequence';\r\n\r\nexport class PrefixTreeNode<T> {\r\n\r\n    private _children: Map<string, PrefixTreeNode<T>>;\r\n    private _content: T | undefined;\r\n\r\n    constructor(content?: T) {\r\n        this._children = new Map();\r\n        this.content = content;\r\n    }\r\n\r\n    get content(): T | undefined {\r\n        return this._content;\r\n    }\r\n\r\n    set content(value: T | undefined) {\r\n        this._content = value;\r\n    }\r\n\r\n    public getChild(key: string): PrefixTreeNode<T> | undefined {\r\n        return this._children.get(key);\r\n    }\r\n\r\n    public addChild(key: string, content?: T): PrefixTreeNode<T> {\r\n        const child = new PrefixTreeNode<T>(content);\r\n        this._children.set(key, child);\r\n        return child;\r\n    }\r\n\r\n    public hasChildren(): boolean {\r\n        return this._children.size !== 0;\r\n    }\r\n}\r\n\r\nexport class PrefixTree<T> {\r\n\r\n    private readonly _root: PrefixTreeNode<T>;\r\n\r\n    constructor(rootContent?: T) {\r\n        this._root = new PrefixTreeNode<T>(rootContent);\r\n    }\r\n\r\n    public insert(path: StringSequence,\r\n                  newNodeContent: () => T,\r\n                  updateNodeContent: (node: T, treeWrapper: PrefixTreeNode<T>) => void,\r\n                  stepReaction: (step: string, previousNode: T | undefined, previousTreeWrapper: PrefixTreeNode<T>) => void = () => {},\r\n                  newStepNode: (step: string, prefix: Array<string>, previousNode: T | undefined) => T | undefined = () => undefined) {\r\n        let currentNode = this._root;\r\n        const prefix: Array<string> = [];\r\n        for (let i = 0; i < path.length(); i++) {\r\n            const step = path.get(i);\r\n            stepReaction(step, currentNode.content, currentNode);\r\n            let child = currentNode.getChild(step);\r\n            if (child === undefined) {\r\n                currentNode = currentNode.addChild(step, newStepNode(step, [...prefix], currentNode.content));\r\n            } else {\r\n                currentNode = child;\r\n            }\r\n            prefix.push(step);\r\n        }\r\n        if (currentNode.content !== undefined) {\r\n            updateNodeContent(currentNode.content, currentNode);\r\n        } else {\r\n            currentNode.content = newNodeContent();\r\n        }\r\n    }\r\n\r\n}\r\n","import {iterate} from './iterate';\r\n\r\nexport class MapSet<K, V> {\r\n    private _map: Map<K, Set<V>>;\r\n\r\n    constructor() {\r\n        this._map = new Map<K, Set<V>>();\r\n    }\r\n\r\n    public add(key: K, value: V) {\r\n        if (this._map.has(key)) {\r\n            this._map.get(key)!.add(value);\r\n        } else {\r\n            this._map.set(key, new Set<V>([value]));\r\n        }\r\n    }\r\n\r\n    public addAll(key: K, values: Iterable<V>) {\r\n        if (this._map.has(key)) {\r\n            const set = this._map.get(key)!;\r\n            iterate(values, v => {\r\n                set.add(v);\r\n            });\r\n        } else {\r\n            this._map.set(key, new Set(values));\r\n        }\r\n    }\r\n\r\n    public has(key: K, value: V) {\r\n        return this._map.has(key) && this._map.get(key)!.has(value);\r\n    }\r\n\r\n    public get(key: K): Set<V> {\r\n        const set = this._map.get(key);\r\n        if (set === undefined) {\r\n            return new Set<V>();\r\n        }\r\n        return set;\r\n    }\r\n\r\n    public entries(): IterableIterator<[K, Set<V>]> {\r\n        return this._map.entries();\r\n    }\r\n}\r\n","export interface StringSequence {\r\n    get(i: number): string;\r\n    length(): number;\r\n}\r\n\r\nexport interface EditableStringSequence extends StringSequence {\r\n    set(i: number, value: string): void;\r\n}\r\n\r\nexport interface EditableString {\r\n    setString(value: string): void;\r\n    getString(): string;\r\n}\r\n\r\nexport class EditableStringSequenceWrapper implements EditableStringSequence {\r\n\r\n    private readonly _array: Array<EditableString>;\r\n\r\n    constructor(array: Array<EditableString>) {\r\n        this._array = array;\r\n    }\r\n\r\n    get(i: number): string {\r\n        return this._array[i].getString();\r\n    }\r\n\r\n    length(): number {\r\n        return this._array.length;\r\n    }\r\n\r\n    set(i: number, value: string): void {\r\n        this._array[i].setString(value);\r\n    }\r\n}\r\n","/**\r\n * All constants copied from the `glpk.js` library for better usability\r\n */\r\n\r\nexport enum Goal {\r\n    /**\r\n     * GLP_MIN\r\n     */\r\n    MINIMUM = 1,\r\n    /**\r\n     * GLP_MAX\r\n     */\r\n    MAXIMUM = 2,\r\n}\r\n\r\nexport enum Constraint {\r\n    /**\r\n     * GLP_FR\r\n     */\r\n    FREE_VARIABLE = 1,\r\n    /**\r\n     * GLP_LO\r\n     */\r\n    LOWER_BOUND = 2,\r\n    /**\r\n     * GLP_UP\r\n     */\r\n    UPPER_BOUND = 3,\r\n    /**\r\n     * GLP_DB\r\n     */\r\n    DOUBLE_BOUND = 4,\r\n    /**\r\n     * GLP_FX\r\n     */\r\n    FIXED_VARIABLE = 5,\r\n}\r\n\r\nexport enum MessageLevel {\r\n    /**\r\n     * GLP_MSG_OFF\r\n     */\r\n    OFF = 0,\r\n    /**\r\n     * GLP_MSG_ERR\r\n     */\r\n    ERROR = 1,\r\n    /**\r\n     * GLP_MSG_ON\r\n     */\r\n    STANDARD = 2,\r\n    /**\r\n     * GLP_MSG_ALL\r\n     */\r\n    ALL = 3,\r\n    /**\r\n     * GLP_MSG_DBG\r\n     */\r\n    DEBUG = 4\r\n}\r\n\r\nexport enum Solution {\r\n    /**\r\n     * GLP_UNDEF\r\n     */\r\n    UNDEFINED = 1,\r\n    /**\r\n     * GLP_FEAS\r\n     */\r\n    FEASIBLE = 2,\r\n    /**\r\n     * GLP_INFEAS\r\n     */\r\n    INFEASIBLE = 3,\r\n    /**\r\n     * GLP_NOFEAS\r\n     */\r\n    NO_SOLUTION = 4,\r\n    /**\r\n     * GLP_OPT\r\n     */\r\n    OPTIMAL = 5,\r\n    /**\r\n     * GLP_UNBND\r\n     */\r\n    UNBOUNDED = 6\r\n}\r\n","import {SubjectTo} from '../../../../models/glpk/subject-to';\r\n\r\n\r\nexport class ConstraintsWithNewVariables {\r\n\r\n    private readonly _binaryVariables: Array<string>;\r\n    private readonly _integerVariables: Array<string>;\r\n    private readonly _constraints: Array<SubjectTo>;\r\n\r\n    constructor(constraints: SubjectTo | Array<SubjectTo>,\r\n                binaryVariables?: string | Array<string>,\r\n                integerVariables?: string | Array<string>) {\r\n        this._constraints = Array.isArray(constraints) ? constraints : [constraints];\r\n        if (binaryVariables !== undefined) {\r\n            this._binaryVariables = Array.isArray(binaryVariables) ? binaryVariables : [binaryVariables];\r\n        } else {\r\n            this._binaryVariables = [];\r\n        }\r\n        if (integerVariables !== undefined) {\r\n            this._integerVariables = Array.isArray(integerVariables) ? integerVariables : [integerVariables];\r\n        } else {\r\n            this._integerVariables = [];\r\n        }\r\n    }\r\n\r\n    get binaryVariables(): Array<string> {\r\n        return this._binaryVariables;\r\n    }\r\n\r\n    get integerVariables(): Array<string> {\r\n        return this._integerVariables;\r\n    }\r\n\r\n    get constraints(): Array<SubjectTo> {\r\n        return this._constraints;\r\n    }\r\n\r\n    public static combine(...constraints: Array<ConstraintsWithNewVariables>): ConstraintsWithNewVariables {\r\n        return new ConstraintsWithNewVariables(\r\n            constraints.reduce((a, v) => {\r\n                a.push(...v.constraints)\r\n                return a;\r\n            }, [] as Array<SubjectTo>),\r\n            constraints.reduce((a, v) => {\r\n                a.push(...v.binaryVariables)\r\n                return a;\r\n            }, [] as Array<string>),\r\n            constraints.reduce((a, v) => {\r\n                a.push(...v.integerVariables)\r\n                return a;\r\n            }, [] as Array<string>)\r\n        );\r\n    }\r\n\r\n    public static combineAndIntroduceVariables(newBinaryVariables?: string | Array<string>,\r\n                                               newIntegerVariables?: string | Array<string>,\r\n                                               ...constraints: Array<ConstraintsWithNewVariables>): ConstraintsWithNewVariables {\r\n        return ConstraintsWithNewVariables.combine(\r\n            new ConstraintsWithNewVariables([], newBinaryVariables, newIntegerVariables),\r\n            ...constraints\r\n        )\r\n    }\r\n}\r\n","import {IncrementingCounter} from '../../../../utility/incrementing-counter';\r\nimport {BehaviorSubject, Observable, ReplaySubject, switchMap, take} from 'rxjs';\r\nimport {GLPK, LP, Result} from 'glpk.js';\r\nimport {PetriNet} from '../../../../models/pn/model/petri-net';\r\nimport {ProblemSolution} from './problem-solution';\r\nimport {Constraint, Goal, MessageLevel, Solution} from '../../../../models/glpk/glpk-constants';\r\nimport {SubjectTo} from '../../../../models/glpk/subject-to';\r\nimport {Arc} from '../../../../models/pn/model/arc';\r\nimport {Transition} from '../../../../models/pn/model/transition';\r\nimport {Variable} from '../../../../models/glpk/variable';\r\nimport {ConstraintsWithNewVariables} from './constraints-with-new-variables';\r\nimport {Bound} from '../../../../models/glpk/bound';\r\nimport {PetriNetRegionTransformerService} from '../petri-net-region-transformer.service';\r\nimport {CombinationResult} from './combination-result';\r\nimport {Region} from './region';\r\nimport {RegionsConfiguration} from './regions-configuration';\r\nimport {arraify} from '../../../../utility/arraify';\r\n\r\nexport class RegionIlpSolver {\r\n\r\n    // k and K defined as per https://blog.adamfurmanek.pl/2015/09/12/ilp-part-4/\r\n    // for some reason k = 2^19 while not large enough to cause precision problems in either doubles or integers\r\n    // has caused the iterative algorithm to loop indefinitely, presumably because of some precision error in the implementation of the solver\r\n    private static readonly k = (1 << 10) - 1 // 2^10 - 1\r\n    private static readonly K = 2 * RegionIlpSolver.k + 1;\r\n\r\n    private readonly _constraintCounter: IncrementingCounter;\r\n    private readonly _variableCounter: IncrementingCounter;\r\n    private _allVariables: Set<string>;\r\n    private _placeVariables: Set<string>;\r\n\r\n    constructor(private _regionTransformer: PetriNetRegionTransformerService, private _solver$: Observable<GLPK>) {\r\n        this._constraintCounter = new IncrementingCounter();\r\n        this._variableCounter = new IncrementingCounter();\r\n        this._allVariables = new Set<string>();\r\n        this._placeVariables = new Set<string>();\r\n    }\r\n\r\n    public computeRegions(nets: Array<PetriNet>, config: RegionsConfiguration): Observable<Region> {\r\n\r\n        const regions$ = new ReplaySubject<Region>();\r\n\r\n        const combined = this.combineInputNets(nets);\r\n\r\n        const ilp$ = new BehaviorSubject(this.setUpInitialILP(combined, config));\r\n        ilp$.pipe(switchMap(ilp => this.solveILP(ilp))).subscribe((ps: ProblemSolution) => {\r\n            if (ps.solution.result.status === Solution.OPTIMAL) {\r\n                const region = this._regionTransformer.displayRegionInNet(ps.solution, combined.net);\r\n\r\n                // TODO check if the region is new and we are not trapped in a loop\r\n\r\n                const nonEmptyInputSet = combined.inputs.find(inputs => inputs.size > 0) ?? [];\r\n\r\n                regions$.next({net: region, inputs: Array.from(nonEmptyInputSet)});\r\n                ilp$.next(this.addConstraintsToILP(ps));\r\n            } else {\r\n                // we are done, there are no more regions\r\n                console.debug('final non-optimal result', ps.solution);\r\n                regions$.complete();\r\n                ilp$.complete();\r\n            }\r\n        });\r\n\r\n        return regions$.asObservable();\r\n    }\r\n\r\n    private combineInputNets(nets: Array<PetriNet>): CombinationResult {\r\n        if (nets.length === 0) {\r\n            throw new Error('Synthesis must be performed on at least one input net!');\r\n        }\r\n\r\n        let result = nets[0];\r\n        const inputs: Array<Set<string>> = [result.inputPlaces];\r\n        const outputs: Array<Set<string>> = [result.outputPlaces];\r\n\r\n        for (let i = 1; i < nets.length; i++) {\r\n            const union = PetriNet.netUnion(result, nets[i]);\r\n            result = union.net;\r\n            inputs.push(union.inputPlacesB);\r\n            outputs.push(union.outputPlacesB);\r\n        }\r\n\r\n        return {net: result, inputs, outputs};\r\n    }\r\n\r\n    private setUpInitialILP(combined: CombinationResult, config: RegionsConfiguration): LP {\r\n        const net = combined.net;\r\n\r\n        this._placeVariables = new Set(net.getPlaces().map(p => p.getId()));\r\n        this._allVariables = new Set<string>(this._placeVariables);\r\n\r\n        const initial: LP = {\r\n            name: 'ilp',\r\n            objective: {\r\n                name: 'region',\r\n                direction: Goal.MINIMUM,\r\n                vars: net.getPlaces().map(p => this.variable(p.getId())),\r\n            },\r\n            subjectTo: [],\r\n        };\r\n        initial[config.oneBoundRegions ? 'binaries' : 'generals'] = Array.from(this._placeVariables);\r\n        this.applyConstraints(initial, this.createInitialConstraints(combined, config));\r\n\r\n        return initial;\r\n    }\r\n\r\n    private applyConstraints(ilp: LP, constraints: ConstraintsWithNewVariables) {\r\n        if (ilp.subjectTo === undefined) {\r\n            ilp.subjectTo = [];\r\n        }\r\n        ilp.subjectTo.push(...constraints.constraints);\r\n\r\n        if (ilp.binaries === undefined) {\r\n            ilp.binaries = [];\r\n        }\r\n        ilp.binaries.push(...constraints.binaryVariables);\r\n\r\n        if (ilp.generals === undefined) {\r\n            ilp.generals = [];\r\n        }\r\n        ilp.generals.push(...constraints.integerVariables);\r\n    }\r\n\r\n    private createInitialConstraints(combined: CombinationResult, config: RegionsConfiguration): ConstraintsWithNewVariables {\r\n        const net = combined.net;\r\n        const result: Array<ConstraintsWithNewVariables> = [];\r\n\r\n        // only non-negative solutions\r\n        result.push(...net.getPlaces().map(p => this.greaterEqualThan(this.variable(p.getId()), 0)));\r\n\r\n        // non-zero solutions\r\n        result.push(this.greaterEqualThan(net.getPlaces().map(p => this.variable(p.getId())), 1));\r\n\r\n        // initial markings must be the same\r\n        if (combined.inputs.length > 1) {\r\n            const nonemptyInputs = combined.inputs.filter(inputs => inputs.size !== 0);\r\n            const inputsA = Array.from(nonemptyInputs[0]);\r\n            for (let i = 1; i < nonemptyInputs.length; i++) {\r\n                const inputsB = Array.from(nonemptyInputs[i]);\r\n                result.push(this.sumEqualsZero(...inputsA.map(id => this.variable(id, 1)), ...inputsB.map(id => this.variable(id, -1))));\r\n            }\r\n        }\r\n\r\n        // places with no post-set should be empty\r\n        if (config.noOutputPlaces) {\r\n            result.push(...net.getPlaces().filter(p => p.outgoingArcs.length === 0).map(p => this.lessEqualThan(this.variable(p.getId()), 0)));\r\n        }\r\n\r\n        // gradient constraints\r\n        const labels = this.collectTransitionByLabel(net);\r\n        const riseSumVariables: Array<Variable> = [];\r\n        const absoluteRiseSumVariables: Array<string> = [];\r\n\r\n        for (const [key, transitions] of labels.entries()) {\r\n            const transitionsWithSameLabel = transitions.length;\r\n            const t1 = transitions.splice(0, 1)[0];\r\n\r\n            if (config.obtainPartialOrders) {\r\n                // t1 post-set\r\n                riseSumVariables.push(...this.createVariablesFromPlaceIds(t1.outgoingArcs.map((a: Arc) => a.destinationId), 1));\r\n                // t1 pre-set\r\n                riseSumVariables.push(...this.createVariablesFromPlaceIds(t1.ingoingArcs.map((a: Arc) => a.sourceId), -1));\r\n\r\n                const singleRiseVariables = this.createVariablesFromPlaceIds(t1.outgoingArcs.map((a: Arc) => a.destinationId), 1);\r\n                singleRiseVariables.push(...this.createVariablesFromPlaceIds(t1.ingoingArcs.map((a: Arc) => a.sourceId), -1));\r\n\r\n                const singleRise = this.combineCoefficients(singleRiseVariables);\r\n                const abs = this.helperVariableName('abs');\r\n                const absoluteRise = this.xAbsoluteOfSum(abs, singleRise);\r\n\r\n                absoluteRiseSumVariables.push(abs);\r\n                result.push(ConstraintsWithNewVariables.combineAndIntroduceVariables(\r\n                    undefined, abs,\r\n                    absoluteRise)\r\n                );\r\n            }\r\n\r\n            if (transitionsWithSameLabel === 1) {\r\n                continue;\r\n            }\r\n\r\n            for (const t2 of transitions) {\r\n                // t1 post-set\r\n                let variables = this.createVariablesFromPlaceIds(t1.outgoingArcs.map((a: Arc) => a.destinationId), 1);\r\n                // t1 pre-set\r\n                variables.push(...this.createVariablesFromPlaceIds(t1.ingoingArcs.map((a: Arc) => a.sourceId), -1));\r\n                // t2 post-set\r\n                variables.push(...this.createVariablesFromPlaceIds(t2.outgoingArcs.map((a: Arc) => a.destinationId), -1));\r\n                // t2 pre-set\r\n                variables.push(...this.createVariablesFromPlaceIds(t2.ingoingArcs.map((a: Arc) => a.sourceId), 1));\r\n\r\n                variables = this.combineCoefficients(variables);\r\n\r\n                result.push(this.sumEqualsZero(...variables));\r\n            }\r\n        }\r\n\r\n        if (config.obtainPartialOrders) {\r\n            /*\r\n                Sum of rises should be 0 AND Sum of absolute rises should be 2 (internal places)\r\n                OR\r\n                Sum of absolute rises should be 1 (initial and final places)\r\n             */\r\n\r\n            // sum of rises is 0\r\n            const riseSumIsZero = this.helperVariableName('riseEqualZero');\r\n            result.push(this.xWhenAEqualsB(riseSumIsZero, this.combineCoefficients(riseSumVariables), 0));\r\n            // sum of absolute values of rises is 2\r\n            const absRiseSumIsTwo = this.helperVariableName('absRiseSumTwo');\r\n            result.push(this.xWhenAEqualsB(absRiseSumIsTwo, absoluteRiseSumVariables, 2));\r\n            // sum is 0 AND sum absolute is 2\r\n            const internalPlace = this.helperVariableName('placeIsInternal');\r\n            result.push(ConstraintsWithNewVariables.combineAndIntroduceVariables(\r\n                [riseSumIsZero, absRiseSumIsTwo], undefined,\r\n                this.xAandB(internalPlace, riseSumIsZero, absRiseSumIsTwo)\r\n            ));\r\n\r\n            // sum of absolute values of rise is 1\r\n            const absRiseSumIsOne = this.helperVariableName('absRiseSumOne');\r\n            result.push(this.xWhenAEqualsB(absRiseSumIsOne, absoluteRiseSumVariables, 1));\r\n\r\n            // place is internal OR place is initial/final\r\n            const internalOrFinal = this.helperVariableName('internalOrFinal');\r\n            result.push(ConstraintsWithNewVariables.combineAndIntroduceVariables(\r\n                [internalPlace, absRiseSumIsOne, internalOrFinal], undefined,\r\n                this.xAorB(internalOrFinal, internalPlace, absRiseSumIsOne)\r\n            ));\r\n\r\n            // place is internal OR place is initial/final must be true\r\n            result.push(this.equal(this.variable(internalOrFinal), 1));\r\n        }\r\n\r\n        return ConstraintsWithNewVariables.combine(...result);\r\n    }\r\n\r\n    private addConstraintsToILP(ps: ProblemSolution): LP {\r\n        const ilp = ps.ilp;\r\n\r\n        // no region that contains the new solution as subset\r\n        const region = ps.solution.result.vars;\r\n        const regionPlaces = Object.entries(region).filter(([k, v]) => v != 0 && this._placeVariables.has(k));\r\n        const additionalConstraints = regionPlaces.map(([k, v]) => this.yWhenAGreaterEqualB(k, v));\r\n\r\n        const yVariables =\r\n            additionalConstraints\r\n                .reduce(\r\n                    (arr, constraint) => {\r\n                        arr.push(...constraint.binaryVariables);\r\n                        return arr;\r\n                    }, [] as Array<string>)\r\n                .map(\r\n                    y => this.variable(y)\r\n                );\r\n        /*\r\n            Sum of x-es should be less than their number\r\n            x = 1 - y\r\n            Therefore sum of y should be greater than 0\r\n         */\r\n        additionalConstraints.push(this.sumGreaterThan(yVariables, 0));\r\n        this.applyConstraints(ilp, ConstraintsWithNewVariables.combine(...additionalConstraints));\r\n\r\n        console.debug('solution', ps.solution.result.vars);\r\n        console.debug('non-zero', regionPlaces);\r\n        console.debug('additional constraint', ilp.subjectTo[ilp.subjectTo.length - 1]);\r\n\r\n        return ilp;\r\n    }\r\n\r\n    private collectTransitionByLabel(net: PetriNet): Map<string, Array<Transition>> {\r\n        const result = new Map<string, Array<Transition>>();\r\n        for (const t of net.getTransitions()) {\r\n            if (t.label === undefined) {\r\n                throw new Error(`Transition with id '${t.id}' has no label! All transitions must be labeled in the input net!`);\r\n            }\r\n            const array = result.get(t.label);\r\n            if (array === undefined) {\r\n                result.set(t.label, [t]);\r\n            } else {\r\n                array.push(t);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private createVariablesFromPlaceIds(placeIds: Array<string>, coefficient: number): Array<Variable> {\r\n        return placeIds.map(id => this.variable(id, coefficient));\r\n    }\r\n\r\n    private combineCoefficients(variables: Array<Variable>): Array<Variable> {\r\n        const map = new Map<string, number>();\r\n        for (const variable of variables) {\r\n            const coef = map.get(variable.name);\r\n            if (coef !== undefined) {\r\n                map.set(variable.name, coef + variable.coef);\r\n            } else {\r\n                map.set(variable.name, variable.coef);\r\n            }\r\n        }\r\n\r\n        const result: Array<Variable> = [];\r\n        for (const [name, coef] of map) {\r\n            if (coef === 0) {\r\n                continue;\r\n            }\r\n            result.push(this.variable(name, coef));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private helperVariableName(prefix = 'y'): string {\r\n        let helpVariableName;\r\n        do {\r\n            helpVariableName = `${prefix}${this._variableCounter.next()}`;\r\n        } while (this._allVariables.has(helpVariableName));\r\n        this._allVariables.add(helpVariableName);\r\n        return helpVariableName;\r\n    }\r\n\r\n    private xAbsoluteOfSum(x: string, sum: Array<Variable>): ConstraintsWithNewVariables {\r\n        /*\r\n         * As per https://blog.adamfurmanek.pl/2015/09/19/ilp-part-5/\r\n         *\r\n         * x >= 0\r\n         * (x + sum is 0) or (x - sum is 0) = 1\r\n         *\r\n         */\r\n\r\n        const y = this.helperVariableName('yAbsSum'); // x + sum is 0\r\n        const z = this.helperVariableName('zAbsSum'); // x - sym is 0\r\n        const w = this.helperVariableName('wAbsSum'); // y or z\r\n\r\n        return ConstraintsWithNewVariables.combineAndIntroduceVariables(\r\n            w, undefined,\r\n            // x >= 0\r\n            this.greaterEqualThan(this.variable(x), 0),\r\n            // w is y or z\r\n            this.xAorB(w, y, z),\r\n            // w is true\r\n            this.equal(this.variable(w), 1),\r\n            // x + sum is 0\r\n            this.xWhenAEqualsB(y, [this.variable(x), ...sum.map(a => this.createOrCopyVariable(a))], 0),\r\n            // x - sum is 0\r\n            this.xWhenAEqualsB(z, [this.variable(x), ...sum.map(a => this.createOrCopyVariable(a, -1))], 0)\r\n        );\r\n    }\r\n\r\n    private xWhenAEqualsB(x: string,\r\n                          a: string | Array<string> | Array<Variable>,\r\n                          b: string | number): ConstraintsWithNewVariables {\r\n        /*\r\n             As per https://blog.adamfurmanek.pl/2015/09/12/ilp-part-4/\r\n\r\n             x is a equals b <=> a greater equal than b and a less equal than b\r\n         */\r\n\r\n        const y = this.helperVariableName('yWhenEquals');\r\n        const z = this.helperVariableName('zWhenEquals');\r\n\r\n        const aGreaterEqualB = this.xWhenAGreaterEqualB(y, a, b);\r\n        const aLessEqualB = this.xWhenALessEqualB(z, a, b);\r\n\r\n        return ConstraintsWithNewVariables.combineAndIntroduceVariables(\r\n            [x, y], undefined,\r\n            aGreaterEqualB,\r\n            aLessEqualB,\r\n            this.xAandB(x, y, z),\r\n        );\r\n    }\r\n\r\n    private yWhenAGreaterEqualB(a: string, b: number): ConstraintsWithNewVariables {\r\n        /*\r\n            As per https://blog.adamfurmanek.pl/2015/09/12/ilp-part-4/ and https://blog.adamfurmanek.pl/2015/08/22/ilp-part-1/\r\n            x = a >= b can be defined as !(b > a)\r\n            the negation for binary variables can be expressed as (for x = !y both binary) x = 1 - y\r\n            the 1 - y form can be extracted and added to the constraint that puts all help variables together, therefore we only need to express y = b > a\r\n            for |a|,|b| <= k and K = 2k + 1\r\n            y = b > a can be expressed as:\r\n            a - b + Ky >= 0\r\n            a - b + Ky <= K-1\r\n\r\n            in our case b is always a constant given by the solution (region)\r\n            therefore we only have a and y as our variables which gives:\r\n            a + Ky >= b\r\n            a + Ky <= K-1 + b\r\n         */\r\n        const y = this.helperVariableName();\r\n\r\n        if (b > RegionIlpSolver.k) {\r\n            console.debug(\"b\", b);\r\n            console.debug(\"k\", RegionIlpSolver.k);\r\n            throw new Error(\"b > k. This implementation can only handle solutions that are at most k\");\r\n        }\r\n\r\n        return ConstraintsWithNewVariables.combineAndIntroduceVariables(\r\n            [y], undefined,\r\n            this.greaterEqualThan([this.variable(a), this.variable(y, RegionIlpSolver.K)], b),\r\n            this.lessEqualThan([this.variable(a), this.variable(y, RegionIlpSolver.K)], RegionIlpSolver.K - 1 + b)\r\n        );\r\n    }\r\n\r\n    private xWhenAGreaterEqualB(x: string,\r\n                                a: string | Array<string> | Array<Variable>,\r\n                                b: string | number): ConstraintsWithNewVariables {\r\n        /*\r\n            As per https://blog.adamfurmanek.pl/2015/09/12/ilp-part-4/\r\n\r\n            a is greater equal b <=> not a less than b\r\n         */\r\n\r\n        const z = this.helperVariableName('zALessB');\r\n\r\n        return ConstraintsWithNewVariables.combineAndIntroduceVariables(z, undefined,\r\n            // z when a less than b\r\n            this.xWhenALessB(z, a, b),\r\n            // x not z\r\n            this.xNotA(x, z)\r\n        );\r\n    }\r\n\r\n    private xWhenALessEqualB(x: string,\r\n                             a: string | Array<string> | Array<Variable>,\r\n                             b: string | number): ConstraintsWithNewVariables {\r\n        /*\r\n            As per https://blog.adamfurmanek.pl/2015/09/12/ilp-part-4/\r\n\r\n            a is less equal b <=> not a greater than b\r\n         */\r\n\r\n        const z = this.helperVariableName('zAGreaterB');\r\n\r\n        return ConstraintsWithNewVariables.combineAndIntroduceVariables(z, undefined,\r\n            // z when a greater than b\r\n            this.xWhenAGreaterB(z, a, b),\r\n            // x not z\r\n            this.xNotA(x, z)\r\n        );\r\n    }\r\n\r\n    private xWhenAGreaterB(x: string,\r\n                           a: string | Array<string> | Array<Variable> | number,\r\n                           b: string | Array<string> | Array<Variable> | number): ConstraintsWithNewVariables {\r\n        /*\r\n            As per https://blog.adamfurmanek.pl/2015/09/12/ilp-part-4/\r\n            a,b integer\r\n            |a|,|b| <= k\r\n            k = 2^n - 1, n natural\r\n            K = 2k + 1\r\n            x binary\r\n\r\n            0 <= b - a + Kx <= K - 1\r\n         */\r\n\r\n        let aIsVariable = false;\r\n        let bIsVariable = false;\r\n        if (typeof a === 'string' || Array.isArray(a)) {\r\n            aIsVariable = true;\r\n            if (typeof a === 'string') {\r\n                a = arraify(a);\r\n            }\r\n        }\r\n        if (typeof b === 'string' || Array.isArray(b)) {\r\n            bIsVariable = true;\r\n            if (typeof b === 'string') {\r\n                b = arraify(b);\r\n            }\r\n        }\r\n\r\n        if (aIsVariable && bIsVariable) {\r\n            return ConstraintsWithNewVariables.combine(\r\n                // b - a + Kx >= 0\r\n                this.greaterEqualThan([\r\n                    ...(b as Array<string> | Array<Variable>).map(b => this.createOrCopyVariable(b)),\r\n                    ...(a as Array<string> | Array<Variable>).map(a => this.createOrCopyVariable(a, -1)),\r\n                    this.variable(x, RegionIlpSolver.K)\r\n                ], 0),\r\n                // b - a + Kx <= K - 1\r\n                this.lessEqualThan([\r\n                    ...(b as Array<string> | Array<Variable>).map(b => this.createOrCopyVariable(b)),\r\n                    ...(a as Array<string> | Array<Variable>).map(a => this.createOrCopyVariable(a, -1)),\r\n                    this.variable(x, RegionIlpSolver.K)\r\n                ], RegionIlpSolver.K - 1),\r\n            );\r\n        } else if (aIsVariable && !bIsVariable) {\r\n            return ConstraintsWithNewVariables.combine(\r\n                // -a + Kx >= -b\r\n                this.greaterEqualThan([\r\n                    ...(a as Array<string> | Array<Variable>).map(a => this.createOrCopyVariable(a, -1)),\r\n                    this.variable(x, RegionIlpSolver.K)\r\n                ], -b),\r\n                // -a + Kx <= K - b - 1\r\n                this.lessEqualThan([\r\n                    ...(a as Array<string> | Array<Variable>).map(a => this.createOrCopyVariable(a, -1)),\r\n                    this.variable(x, RegionIlpSolver.K)\r\n                ], RegionIlpSolver.K - (b as number) - 1),\r\n            );\r\n        } else if (!aIsVariable && bIsVariable) {\r\n            return ConstraintsWithNewVariables.combine(\r\n                // b + Kx >= a\r\n                this.greaterEqualThan([\r\n                    ...(b as Array<string> | Array<Variable>).map(b => this.createOrCopyVariable(b)),\r\n                    this.variable(x, RegionIlpSolver.K)\r\n                ], a as number),\r\n                // b + Kx <= K + a - 1\r\n                this.lessEqualThan([\r\n                    ...(b as Array<string> | Array<Variable>).map(b => this.createOrCopyVariable(b)),\r\n                    this.variable(x, RegionIlpSolver.K)\r\n                ], RegionIlpSolver.K + (a as number) - 1),\r\n            );\r\n        } else {\r\n            throw new Error(`unsupported comparison! x when ${a} > ${b}`);\r\n        }\r\n    }\r\n\r\n    private xWhenALessB(x: string,\r\n                        a: string | Array<string> | Array<Variable>,\r\n                        b: string | number): ConstraintsWithNewVariables {\r\n        /*\r\n            As per https://blog.adamfurmanek.pl/2015/09/12/ilp-part-4/\r\n\r\n            a is less than b <=> b is greater than a\r\n         */\r\n        return this.xWhenAGreaterB(x, b, a);\r\n    }\r\n\r\n    private xAandB(x: string, a: string, b: string): ConstraintsWithNewVariables {\r\n        /*\r\n            As per http://blog.adamfurmanek.pl/2015/08/22/ilp-part-1/\r\n            a,b,x binary\r\n\r\n            0 <= a + b - 2x <= 1\r\n         */\r\n        return ConstraintsWithNewVariables.combine(\r\n            // a + b -2x >= 0\r\n            this.greaterEqualThan([this.variable(a), this.variable(b), this.variable(x, -2)], 0),\r\n            // a + b -2x <= 1\r\n            this.lessEqualThan([this.variable(a), this.variable(b), this.variable(x, -2)], 1)\r\n        );\r\n    }\r\n\r\n    private xAorB(x: string, a: string, b: string): ConstraintsWithNewVariables {\r\n        /*\r\n            As per http://blog.adamfurmanek.pl/2015/08/22/ilp-part-1/\r\n            a,b,x binary\r\n\r\n            -1 <= a + b - 2x <= 0\r\n         */\r\n        return ConstraintsWithNewVariables.combine(\r\n            // a + b -2x >= -1\r\n            this.greaterEqualThan([this.variable(a), this.variable(b), this.variable(x, -2)], -1),\r\n            // a + b -2x <= 0\r\n            this.lessEqualThan([this.variable(a), this.variable(b), this.variable(x, -2)], 0)\r\n        );\r\n    }\r\n\r\n    private xNotA(x: string, a: string): ConstraintsWithNewVariables {\r\n        /*\r\n            As per http://blog.adamfurmanek.pl/2015/08/22/ilp-part-1/\r\n            a,x binary\r\n\r\n            x = 1 - a\r\n         */\r\n        // x + a = 1\r\n        return this.equal([this.variable(x), this.variable(a)], 1);\r\n    }\r\n\r\n    private createOrCopyVariable(original: string | Variable, coefficient: number = 1): Variable {\r\n        if (typeof original === 'string') {\r\n            return this.variable(original, coefficient);\r\n        } else {\r\n            return this.variable(original.name, original.coef * coefficient);\r\n        }\r\n    }\r\n\r\n    private variable(name: string, coefficient: number = 1): Variable {\r\n        return {name, coef: coefficient};\r\n    }\r\n\r\n    private equal(variables: Variable | Array<Variable>, value: number): ConstraintsWithNewVariables {\r\n        console.debug(`${this.formatVariableList(variables)} = ${value}`);\r\n        return new ConstraintsWithNewVariables(this.constrain(\r\n            arraify(variables),\r\n            {type: Constraint.FIXED_VARIABLE, ub: value, lb: value}\r\n        ));\r\n    }\r\n\r\n    private greaterEqualThan(variables: Variable | Array<Variable>, lowerBound: number): ConstraintsWithNewVariables {\r\n        console.debug(`${this.formatVariableList(variables)} >= ${lowerBound}`);\r\n        return new ConstraintsWithNewVariables(this.constrain(\r\n            arraify(variables),\r\n            {type: Constraint.LOWER_BOUND, ub: 0, lb: lowerBound}\r\n        ));\r\n    }\r\n\r\n    private lessEqualThan(variables: Variable | Array<Variable>, upperBound: number): ConstraintsWithNewVariables {\r\n        console.debug(`${this.formatVariableList(variables)} <= ${upperBound}`);\r\n        return new ConstraintsWithNewVariables(this.constrain(\r\n            arraify(variables),\r\n            {type: Constraint.UPPER_BOUND, ub: upperBound, lb: 0}\r\n        ));\r\n    }\r\n\r\n    private sumEqualsZero(...variables: Array<Variable>): ConstraintsWithNewVariables {\r\n        return this.equal(variables, 0);\r\n    }\r\n\r\n    private sumGreaterThan(variables: Array<Variable>, lowerBound: number): ConstraintsWithNewVariables {\r\n        return this.greaterEqualThan(variables, lowerBound + 1);\r\n    }\r\n\r\n    private constrain(vars: Array<Variable>, bnds: Bound): SubjectTo {\r\n        return {\r\n            name: this.constraintName(),\r\n            vars,\r\n            bnds\r\n        };\r\n    }\r\n\r\n    private constraintName(): string {\r\n        return 'c' + this._constraintCounter.next();\r\n    }\r\n\r\n    private solveILP(ilp: LP): Observable<ProblemSolution> {\r\n        const result$ = new ReplaySubject<ProblemSolution>();\r\n\r\n        this._solver$.pipe(take(1)).subscribe(glpk => {\r\n            const res = glpk.solve(ilp, {\r\n                msglev: MessageLevel.ERROR,\r\n            }) as unknown as Promise<Result>;\r\n            res.then((solution: Result) => {\r\n                result$.next({ilp, solution});\r\n                result$.complete();\r\n            })\r\n        });\r\n\r\n        return result$.asObservable();\r\n    }\r\n\r\n    private formatVariableList(variables: Variable | Array<Variable>): string {\r\n        return arraify(variables).map(v => `${v.coef > 0 ? '+' : ''}${v.coef === -1 ? '-' : (v.coef === 1 ? '' : v.coef)}${v.name}`).join(' ');\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Result} from 'glpk.js';\r\nimport {PetriNet} from '../../../models/pn/model/petri-net';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PetriNetRegionTransformerService {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public displayRegionInNet(solution: Result, net: PetriNet): PetriNet {\r\n        const result = net.clone();\r\n\r\n        Object.entries(solution.result.vars).forEach(([id, marking]) => {\r\n            const place = result.getPlace(id);\r\n            if (place === undefined) {\r\n                return; // continue\r\n            }\r\n            place.marking = marking;\r\n        })\r\n\r\n        return result;\r\n    }\r\n}\r\n","import {Injectable, OnDestroy} from '@angular/core';\r\nimport {PetriNet} from '../../../models/pn/model/petri-net';\r\nimport {RegionsConfiguration} from './classes/regions-configuration';\r\nimport {Observable, ReplaySubject} from 'rxjs';\r\nimport {Region} from './classes/region';\r\nimport {RegionIlpSolver} from './classes/region-ilp-solver';\r\nimport {PetriNetRegionTransformerService} from './petri-net-region-transformer.service';\r\nimport {GLPK} from 'glpk.js';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PetriNetRegionsService implements OnDestroy {\r\n\r\n    private readonly _solver$: ReplaySubject<GLPK>;\r\n\r\n    constructor(private _regionTransformer: PetriNetRegionTransformerService) {\r\n        this._solver$ = new ReplaySubject<GLPK>(1);\r\n\r\n        // get the solver object\r\n        const promise = import('glpk.js');\r\n        promise.then(result => {\r\n            // @ts-ignore\r\n            result.default().then(glpk => {\r\n                this._solver$.next(glpk);\r\n            });\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._solver$.complete();\r\n    }\r\n\r\n    public computeRegions(nets: Array<PetriNet>, config: RegionsConfiguration): Observable<Region> {\r\n        return new RegionIlpSolver(this._regionTransformer, this._solver$.asObservable()).computeRegions(nets, config);\r\n    }\r\n}\r\n","import {PetriNet} from '../../../../models/pn/model/petri-net';\r\n\r\nexport class SynthesisResult {\r\n    constructor(public input: Array<PetriNet>, public result: PetriNet, public fileName: string) {\r\n    }\r\n}\r\n","import {PetriNet} from '../../../../models/pn/model/petri-net';\r\nimport {IncrementingCounter} from '../../../../utility/incrementing-counter';\r\nimport {Transition} from '../../../../models/pn/model/transition';\r\nimport {Place} from '../../../../models/pn/model/place';\r\nimport {Region} from './region';\r\n\r\nexport class RegionSynthesiser {\r\n\r\n    private _regions: Array<Region> = [];\r\n    private _counter = new IncrementingCounter();\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public addRegion(region: Region) {\r\n        this._regions.push(region);\r\n    }\r\n\r\n    public synthesise(): PetriNet {\r\n        if (this._regions.length === 0) {\r\n            throw new Error(`You must provide regions via the 'addRegion' method before you can run the synthesis!`);\r\n        }\r\n\r\n        const region = this._regions[0].net;\r\n        const uniqueTransitionLabels = new Set<string>();\r\n        for (const t of region.getTransitions()) {\r\n            const label = t.label;\r\n            if (label === undefined) {\r\n                throw new Error('All transitions in Petri net regions must be labeled!');\r\n            }\r\n            uniqueTransitionLabels.add(label);\r\n        }\r\n\r\n        // extract transitions from regions\r\n        const result = new PetriNet();\r\n        for (const label of uniqueTransitionLabels) {\r\n            result.addTransition(this.transition(label));\r\n        }\r\n\r\n        // extract places and arcs from regions\r\n        for (const region of this._regions) {\r\n            const place = new Place(region.inputs.reduce((sum, id) => sum + region.net.getPlace(id)!.marking, 0))\r\n\r\n            const gradients = new Map<string, number>();\r\n            for (const t of region.net.getTransitions()) {\r\n                const gradient = this.computeGradient(t);\r\n                const label = <string>t.label;\r\n                const existingGradient = gradients.get(label);\r\n                if (existingGradient !== undefined && gradient !== existingGradient) {\r\n                    console.debug(region);\r\n                    throw new Error(`The provided Petri net is not a valid region! The gradient of label '${label}' of transition with id '${t.id}' is ${gradient}, but a different transition with the same label has a gradient of ${existingGradient}!`);\r\n                } else {\r\n                    gradients.set(<string>t.label, gradient);\r\n                }\r\n            }\r\n\r\n            if (!this.isEquivalentPlaceInNet(gradients, result)) {\r\n                result.addPlace(place);\r\n                for (const [label, gradient] of gradients) {\r\n                    this.addArc(label, place, gradient, result);\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private transition(label: string): Transition {\r\n        return new Transition(label, 0, 0, label);\r\n    }\r\n\r\n    private computeGradient(transition: Transition): number {\r\n        let gradient = 0;\r\n        for (const a of transition.outgoingArcs) {\r\n            gradient += (a.destination as Place).marking;\r\n        }\r\n        for (const a of transition.ingoingArcs) {\r\n            gradient -= (a.source as Place).marking;\r\n        }\r\n        return gradient;\r\n    }\r\n\r\n    private addArc(label: string, place: Place, gradient: number, net: PetriNet) {\r\n        if (gradient === 0) {\r\n            return;\r\n        }\r\n\r\n        const transition = <Transition>net.getTransition(label);\r\n\r\n        if (gradient > 0) {\r\n            net.addArc(transition, place, gradient);\r\n        } else {\r\n            net.addArc(place, transition, -gradient);\r\n        }\r\n    }\r\n\r\n    // TODO improve this\r\n    private isEquivalentPlaceInNet(gradients: Map<string, number>, net: PetriNet): boolean {\r\n        if (net.getPlaces().length === 0) {\r\n            return false;\r\n        }\r\n        return net.getPlaces().some(existingPlace => {\r\n            for (const [label, gradient] of gradients) {\r\n                if (gradient === 0) {\r\n                    continue;\r\n                }\r\n                if (gradient < 0) {\r\n                    if ((existingPlace as Place).outgoingArcWeights.get(label) !== -gradient) {\r\n                        return false;\r\n                    }\r\n                } else if ((existingPlace as Place).ingoingArcWeights.get(label) !== gradient) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {PetriNet} from '../../../models/pn/model/petri-net';\r\nimport {Observable, ReplaySubject} from 'rxjs';\r\nimport {SynthesisResult} from './classes/synthesis-result';\r\nimport {RegionSynthesiser} from './classes/region-synthesiser';\r\nimport {RegionsConfiguration} from './classes/regions-configuration';\r\nimport {PetriNetRegionsService} from './petri-net-regions.service';\r\nimport {PetriNetSerialisationService} from '../../../models/pn/parser/petri-net-serialisation.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PetriNetRegionSynthesisService {\r\n\r\n    constructor(private _regionService: PetriNetRegionsService, private _serializer: PetriNetSerialisationService) {\r\n    }\r\n\r\n    public synthesise(input: PetriNet | Array<PetriNet>, config: RegionsConfiguration = {}, fileName: string = 'result'): Observable<SynthesisResult> {\r\n        const result$ = new ReplaySubject<SynthesisResult>(1);\r\n        const synthesiser = new RegionSynthesiser();\r\n\r\n        const arrayInput = Array.isArray(input) ? input : [input];\r\n\r\n        this._regionService.computeRegions(arrayInput, config).subscribe({\r\n            next: region => {\r\n                synthesiser.addRegion(region);\r\n                console.debug(this._serializer.serialise(region.net));\r\n            },\r\n            complete: () => {\r\n                result$.next(new SynthesisResult(arrayInput, synthesiser.synthesise(), fileName));\r\n                result$.complete();\r\n            }\r\n        });\r\n\r\n        return result$.asObservable();\r\n    }\r\n}\r\n","export class MaxFlowPreflowN3 {\r\n    private readonly n: number;\r\n    private readonly cap: Array<Array<number>>;\r\n\r\n    constructor(n: number) {\r\n        this.n = n;\r\n        this.cap = [];\r\n        for (let i = 0; i < n; i++) {\r\n            this.cap.push(new Array<number>(n).fill(0));\r\n        }\r\n    }\r\n\r\n    public setCap(i: number, j: number, cap: number) {\r\n        this.cap[i][j] = cap;\r\n    }\r\n\r\n    public setUnbounded(i: number, j: number) {\r\n        this.setCap(i, j, 20000);\r\n    }\r\n\r\n    public getCap(i: number, j: number): number {\r\n        return this.cap[i][j];\r\n    }\r\n\r\n    public maxFlow(s: number, t: number): number {\r\n        const h = new Array<number>(this.n).fill(0);\r\n        h[s] = this.n - 1;\r\n\r\n        const maxh = new Array<number>(this.n).fill(0);\r\n        const f: Array<Array<number>> = [];\r\n        for (let i = 0; i < this.n; i++) {\r\n            f.push(new Array<number>(this.n).fill(0));\r\n        }\r\n        const e = new Array<number>(this.n).fill(0);\r\n\r\n        for (let i = 0; i < this.n; i++) {\r\n            f[s][i] = this.cap[s][i];\r\n            f[i][s] = -f[s][i];\r\n            e[i] = this.cap[s][i];\r\n        }\r\n\r\n        for (let sz = 0; ;) {\r\n            if (sz === 0) {\r\n                for (let i = 0; i < this.n; i++) {\r\n                    if (i !== s && i !== t && e[i] > 0) {\r\n                        if (sz !== 0 && h[i] > h[maxh[0]]) {\r\n                            sz = 0;\r\n                        }\r\n                        maxh[sz++] = i;\r\n                    }\r\n                }\r\n            }\r\n            if (sz === 0) {\r\n                break;\r\n            }\r\n            while (sz !== 0) {\r\n                let i = maxh[sz - 1];\r\n                let pushed = false;\r\n                for (let j = 0; j < this.n && e[i] !== 0; j++) {\r\n                    if (h[i] === h[j] + 1 && this.cap[i][j] - f[i][j] > 0) {\r\n                        const df = Math.min(this.cap[i][j] - f[i][j], e[i]);\r\n                        f[i][j] += df;\r\n                        f[j][i] -= df;\r\n                        e[i] -= df;\r\n                        e[j] += df;\r\n                        if (e[i] === 0) {\r\n                            sz--;\r\n                        }\r\n                        pushed = true;\r\n                    }\r\n                }\r\n                if (!pushed) {\r\n                    h[i] = 20000;\r\n                    for (let j = 0; j < this.n; j++) {\r\n                        if (h[i] > h[j] + 1 && this.cap[i][j] - f[i][j] > 0) {\r\n                            h[i] = h[j] + 1;\r\n                        }\r\n                    }\r\n                    if (h[i] > h[maxh[0]]) {\r\n                        sz = 0;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let flow = 0;\r\n        for (let i = 0; i < this.n; i++) {\r\n            flow += f[s][i];\r\n        }\r\n\r\n        return flow;\r\n    }\r\n}\r\n","import {PetriNet} from '../../../../models/pn/model/petri-net';\r\nimport {PartialOrder} from '../../../../models/po/model/partial-order';\r\nimport {Event} from '../../../../models/po/model/event';\r\nimport {ValidationResult} from './validation-result';\r\n\r\nexport abstract class LpoValidator {\r\n\r\n    protected readonly _petriNet: PetriNet;\r\n    protected readonly _lpo: PartialOrder;\r\n\r\n    protected constructor(petriNet: PetriNet, lpo: PartialOrder) {\r\n        this._petriNet = petriNet;\r\n        this._lpo = lpo.clone();\r\n        this.modifyLPO();\r\n    }\r\n\r\n    protected modifyLPO() {\r\n        for (const e of this._lpo.events) {\r\n            for (const t of this._petriNet.getTransitions()) {\r\n                if (e.label === t.label) {\r\n                    if (e.transition !== undefined) {\r\n                        throw new Error(`The algorithm does not support label-splitted nets`);\r\n                    }\r\n                    e.transition = t;\r\n                }\r\n            }\r\n            if (e.transition === undefined) {\r\n                throw new Error(`The net does not contain a transition with the label '${e.label}' of the event '${e.id}'`);\r\n            }\r\n        }\r\n\r\n        const initial = new Event('initial marking', undefined);\r\n        const final = new Event('final marking', undefined);\r\n        for (const e of this._lpo.initialEvents) {\r\n            initial.addNextEvent(e);\r\n        }\r\n        for (const e of this._lpo.finalEvents) {\r\n            e.addNextEvent(final);\r\n        }\r\n        this._lpo.addEvent(initial);\r\n        this._lpo.addEvent(final);\r\n    }\r\n\r\n    public abstract validate(): Array<ValidationResult>;\r\n\r\n}\r\n","export class ValidationResult {\r\n    public valid: boolean;\r\n    public phase: ValidationPhase;\r\n\r\n    constructor(valid: boolean, phase: ValidationPhase) {\r\n        this.valid = valid;\r\n        this.phase = phase;\r\n    }\r\n}\r\n\r\nexport enum ValidationPhase {\r\n    FLOW = 'flow',\r\n    FORWARDS = 'forwards',\r\n    BACKWARDS = 'backwards'\r\n}\r\n","import {PetriNet} from '../../../models/pn/model/petri-net';\r\nimport {PartialOrder} from '../../../models/po/model/partial-order';\r\nimport {MaxFlowPreflowN3} from '../../flow-network/max-flow-preflow-n3';\r\nimport {Transition} from '../../../models/pn/model/transition';\r\nimport {Place} from '../../../models/pn/model/place';\r\nimport {LpoValidator} from './classes/lpo-validator';\r\nimport {ValidationPhase, ValidationResult} from './classes/validation-result';\r\nimport {Event} from '../../../models/po/model/event';\r\n\r\nexport class LpoFlowValidator extends LpoValidator {\r\n\r\n    constructor(petriNet: PetriNet, lpo: PartialOrder) {\r\n        super(petriNet, lpo);\r\n    }\r\n\r\n    validate(): Array<ValidationResult> {\r\n        const flow: Array<ValidationResult> = [];\r\n\r\n        const places = this._petriNet.getPlaces();\r\n        const events = this._lpo.events;\r\n\r\n        for (let i = 0; i < places.length; i++) {\r\n            const place = places[i];\r\n            flow[i] = new ValidationResult(this.checkFlowForPlace(place, events), ValidationPhase.FLOW);\r\n        }\r\n\r\n        return flow;\r\n    }\r\n\r\n    protected checkFlowForPlace(place: Place, events: Array<Event>): boolean {\r\n        const n = events.length * 2 + 2;\r\n        const SOURCE = 0;\r\n        const SINK = n - 1;\r\n\r\n        const network = new MaxFlowPreflowN3(n);\r\n\r\n        for (let eIndex = 0; eIndex < events.length; eIndex++) {\r\n            network.setUnbounded(this.eventStart(eIndex), this.eventEnd(eIndex));\r\n\r\n            const event = events[eIndex];\r\n            if (event.transition === undefined) {\r\n                if (place.marking > 0) {\r\n                    network.setCap(SOURCE, this.eventEnd(eIndex), place.marking);\r\n                }\r\n            } else {\r\n                for (const outArc of (event.transition as unknown as Transition).outgoingArcs) {\r\n                    const postPlace = outArc.destination as Place;\r\n                    if (postPlace === place) {\r\n                        network.setCap(SOURCE, this.eventEnd(eIndex), outArc.weight);\r\n                    }\r\n                }\r\n                for (const inArc of (event.transition as unknown as Transition).ingoingArcs) {\r\n                    const prePlace = inArc.source as Place;\r\n                    if (prePlace === place) {\r\n                        network.setCap(this.eventStart(eIndex), SINK, inArc.weight);\r\n                    }\r\n                }\r\n            }\r\n            for (const postEvent of event.nextEvents) {\r\n                network.setUnbounded(this.eventEnd(eIndex), this.eventStart(events.findIndex(e => e === postEvent)));\r\n            }\r\n        }\r\n\r\n        let need = 0;\r\n        for (let ii = 0; ii < n; ii++) {\r\n            need += network.getCap(ii, SINK);\r\n        }\r\n        const f = network.maxFlow(SOURCE, SINK);\r\n        console.debug(`flow ${place.id} ${f}`);\r\n        console.debug(`need ${place.id} ${need}`);\r\n        return need === f;\r\n    }\r\n\r\n    private eventStart(eventIndex: number): number {\r\n        return eventIndex * 2 + 1;\r\n    }\r\n\r\n    private eventEnd(eventIndex: number): number {\r\n        return eventIndex * 2 + 2;\r\n    }\r\n\r\n}\r\n","import {PetriNet} from '../../../models/pn/model/petri-net';\r\nimport {PartialOrder} from '../../../models/po/model/partial-order';\r\nimport {Event} from '../../../models/po/model/event';\r\nimport {Place} from '../../../models/pn/model/place';\r\nimport {ValidationPhase, ValidationResult} from './classes/validation-result';\r\nimport {Arc} from '../../../models/pn/model/arc';\r\nimport {Transition} from '../../../models/pn/model/transition';\r\nimport {LpoFlowValidator} from './lpo-flow-validator';\r\n\r\nexport class LpoFireValidator extends LpoFlowValidator {\r\n\r\n    private readonly _places: Array<Place>;\r\n\r\n    constructor(petriNet: PetriNet, lpo: PartialOrder) {\r\n        super(petriNet, lpo);\r\n        this._places = this._petriNet.getPlaces();\r\n    }\r\n\r\n    protected override modifyLPO() {\r\n        super.modifyLPO();\r\n        this._lpo.determineInitialAndFinalEvents();\r\n    }\r\n\r\n    override validate(): Array<ValidationResult> {\r\n        const totalOrder = this.buildTotalOrdering();\r\n        totalOrder.forEach(e => e.initializeLocalMarking(this._places.length));\r\n\r\n        // build start event\r\n        const initialEvent = totalOrder[0];\r\n        for (let i = 0; i < this._places.length; i++) {\r\n            initialEvent.localMarking![i] = this._places[i].marking;\r\n        }\r\n\r\n        const validPlaces = this.newBoolArray(true);\r\n        const complexPlaces = this.newBoolArray(false);\r\n        const notValidPlaces = this.newBoolArray(false);\r\n\r\n        // TODO timing\r\n\r\n        let queue = [...totalOrder];\r\n        this.fireForwards(queue, validPlaces, complexPlaces);\r\n\r\n        // not valid places\r\n        const finalEvent = [...this._lpo.finalEvents][0];\r\n        for (let i = 0; i < this._places.length; i++) {\r\n            notValidPlaces[i] = finalEvent.localMarking![i] < 0;\r\n        }\r\n\r\n        // Don't fire all backwards!\r\n        queue = [finalEvent];\r\n        for (let i = totalOrder.length - 2; i >= 0; i--) {\r\n            totalOrder[i].initializeLocalMarking(this._places.length);\r\n            queue.push(totalOrder[i]);\r\n        }\r\n\r\n        const backwardsValidPlaces = this.newBoolArray(true);\r\n        const backwardsComplexPlaces = this.newBoolArray(false);\r\n\r\n        // TODO timing 2\r\n\r\n        // Is the final marking > 0 ?\r\n        for (let i = 0; i < this._places.length; i++) {\r\n            if (finalEvent.localMarking![i] < 0) {\r\n                backwardsValidPlaces[i] = false;\r\n            }\r\n        }\r\n\r\n        this.fireBackwards(queue, backwardsValidPlaces, backwardsComplexPlaces);\r\n\r\n        // Rest with flow\r\n        const flow = this.newBoolArray(false);\r\n        for (let i = 0; i < this._places.length; i++) {\r\n            if (!validPlaces[i] && complexPlaces[i] && !notValidPlaces[i] && !backwardsValidPlaces[i]) {\r\n                flow[i] = this.checkFlowForPlace(this._places[i], this._lpo.events);\r\n            }\r\n        }\r\n\r\n        // TODO timing 3\r\n\r\n        // TODO stats?\r\n        return this._places.map((p, i) => {\r\n            if (validPlaces[i]) {\r\n                return new ValidationResult(true, ValidationPhase.FORWARDS);\r\n            } else if (backwardsValidPlaces[i]) {\r\n                return new ValidationResult(true, ValidationPhase.BACKWARDS);\r\n            } else if (flow[i]) {\r\n                return new ValidationResult(true, ValidationPhase.FLOW);\r\n            } else if (notValidPlaces[i]) {\r\n                return new ValidationResult(false, ValidationPhase.FORWARDS);\r\n            } else {\r\n                return new ValidationResult(false, ValidationPhase.FLOW);\r\n            }\r\n        });\r\n    }\r\n\r\n    private buildTotalOrdering(): Array<Event> {\r\n        const ordering: Array<Event> = [...this._lpo.initialEvents];\r\n        const contained: Set<Event> = new Set<Event>(this._lpo.initialEvents);\r\n\r\n        const examineLater: Array<Event> = [...this._lpo.events];\r\n        while (examineLater.length > 0) {\r\n            const e = examineLater.shift() as Event;\r\n            if (contained.has(e)) {\r\n                continue;\r\n            }\r\n\r\n            let add = true;\r\n            for (const pre of e.previousEvents) {\r\n                if (!contained.has(pre)) {\r\n                    add = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (add) {\r\n                ordering.push(e);\r\n                contained.add(e);\r\n            } else {\r\n                examineLater.push(e);\r\n            }\r\n        }\r\n\r\n        return ordering;\r\n    }\r\n\r\n    private fireForwards(queue: Array<Event>, validPlaces: Array<boolean>, complexPlaces: Array<boolean>) {\r\n        this.fire(queue, validPlaces, complexPlaces,\r\n            (t) => t.ingoingArcs,\r\n            (a) => a.source as Place,\r\n            (t) => t.outgoingArcs,\r\n            (a) => a.destination as Place,\r\n            (e) => e.nextEvents\r\n        );\r\n    }\r\n\r\n    private fireBackwards(queue: Array<Event>, validPlaces: Array<boolean>, complexPlaces: Array<boolean>) {\r\n        this.fire(queue, validPlaces, complexPlaces,\r\n            (t) => t.outgoingArcs,\r\n            (a) => a.destination as Place,\r\n            (t) => t.ingoingArcs,\r\n            (a) => a.source as Place,\r\n            (e) => e.previousEvents\r\n        );\r\n    }\r\n\r\n    private fire(firingOrder: Array<Event>, validPlaces: Array<boolean>, complexPlaces: Array<boolean>,\r\n                 preArcs: (t: Transition) => Array<Arc>, prePlace: (a: Arc) => Place,\r\n                 postArcs: (t: Transition) => Array<Arc>, postPlace: (a: Arc) => Place,\r\n                 nextEvents: (e: Event) => Set<Event>) {\r\n        while (firingOrder.length > 0) {\r\n            const e = firingOrder.shift() as Event;\r\n\r\n            // can fire?\r\n            if (e.transition !== undefined) {\r\n                // fire\r\n                for (const arc of preArcs(e.transition)) {\r\n                    const pIndex = this.getPIndex(prePlace(arc));\r\n                    e.localMarking![pIndex] = e.localMarking![pIndex] - arc.weight;\r\n                    if (e.localMarking![pIndex] < 0) {\r\n                        validPlaces[pIndex] = false;\r\n                    }\r\n                }\r\n\r\n                for (const arc of postArcs(e.transition)) {\r\n                    const pIndex = this.getPIndex(postPlace(arc));\r\n                    e.localMarking![pIndex] = e.localMarking![pIndex] + arc.weight;\r\n                }\r\n            }\r\n\r\n            // push to first later and check for complex places\r\n            if (nextEvents(e).size > 0) {\r\n                for (let i = 0; i < this._places.length; i++) {\r\n                    if (nextEvents(e).size > 1 && e.localMarking![i] > 0) {\r\n                        complexPlaces[i] = true;\r\n                    }\r\n                    const firstLater = [...nextEvents(e)][0];\r\n                    firstLater.localMarking![i] = firstLater.localMarking![i] + e.localMarking![i];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getPIndex(p: Place) {\r\n        return this._places.findIndex(pp => pp === p);\r\n    }\r\n\r\n    private newBoolArray(fill: boolean): Array<boolean> {\r\n        return new Array<boolean>(this._places.length).fill(fill);\r\n    }\r\n}\r\n","import {PetriNet} from '../../../models/pn/model/petri-net';\r\nimport {Trace} from '../../../models/log/model/trace';\r\n\r\n/**\r\n * A single net in the Prime miner result sequence.\r\n */\r\nexport class PrimeMinerResult {\r\n    /**\r\n     * The synthesised model\r\n     */\r\n    public net: PetriNet;\r\n    /**\r\n     * List of one based indices of the partial orders included in the model. The indices index the SORTED PO order.\r\n     */\r\n    public supportedPoIndices: Array<number>;\r\n    /**\r\n     * List of traces contained in the model\r\n     */\r\n    public containedTraces: Array<Trace>;\r\n\r\n    constructor(net: PetriNet, supportedPoIndices: Array<number>, containedTraces: Array<Trace>) {\r\n        this.net = net;\r\n        this.supportedPoIndices = supportedPoIndices;\r\n        this.containedTraces = containedTraces;\r\n    }\r\n}\r\n","export class MappingCounter {\r\n\r\n    public mappedId: string;\r\n    private _currentChoice: number;\r\n    private readonly _maximum: number;\r\n\r\n    constructor(mappedId: string, maximum: number) {\r\n        this.mappedId = mappedId;\r\n        this._maximum = maximum;\r\n        this._currentChoice = 0;\r\n    }\r\n\r\n    public current(): number {\r\n        return this._currentChoice;\r\n    }\r\n\r\n    public next(): number {\r\n        this._currentChoice += 1;\r\n        if (this._currentChoice > this._maximum) {\r\n            this._currentChoice = 0;\r\n        }\r\n        return this._currentChoice;\r\n    }\r\n\r\n    public isLastOption(): boolean {\r\n        return this._currentChoice === this._maximum;\r\n    }\r\n}\r\n","import {MapSet} from '../../../../utility/map-set';\r\nimport {MappingCounter} from './mapping-counter';\r\n\r\nexport class MappingManager {\r\n\r\n    private readonly _mappingCounters: Array<MappingCounter>;\r\n    private readonly _mappingOrder: Map<string, Array<string>>;\r\n\r\n    constructor(possibleMappings: MapSet<string, string>) {\r\n        this._mappingCounters = [];\r\n        for (const [id, mappableIds] of possibleMappings.entries()) {\r\n            this._mappingCounters.push(new MappingCounter(id, mappableIds.size - 1))\r\n        }\r\n\r\n        this._mappingOrder = new Map<string, Array<string>>(this._mappingCounters.map(choice => [choice.mappedId, Array.from(possibleMappings.get(choice.mappedId))]));\r\n    }\r\n\r\n    public getCurrentMapping(): Map<string, string> {\r\n        return new Map<string, string>(this._mappingCounters.map(choice => [choice.mappedId, this._mappingOrder.get(choice.mappedId)![choice.current()]]));\r\n    }\r\n\r\n    /**\r\n     * Increments the current mapping to the next possibility.\r\n     *\r\n     * @returns `true` if the final mapping was passed. `false` otherwise.\r\n     */\r\n    public moveToNextMapping(): boolean {\r\n        let incrementedIndex = 0;\r\n        while (incrementedIndex < this._mappingCounters.length) {\r\n            const carry = this._mappingCounters[incrementedIndex].isLastOption();\r\n            this._mappingCounters[incrementedIndex].next();\r\n            if (carry) {\r\n                incrementedIndex++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return incrementedIndex === this._mappingCounters.length;\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {PetriNet} from '../../../models/pn/model/petri-net';\r\nimport {PartialOrder} from '../../../models/po/model/partial-order';\r\nimport {Event} from '../../../models/po/model/event';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PetriNetToPartialOrderTransformerService {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public transform(net: PetriNet): PartialOrder {\r\n        const badPlace = net.getPlaces().find(p => p.ingoingArcs.length > 1 || p.outgoingArcs.length > 1 || (p.ingoingArcs.length === 1 && p.outgoingArcs.length === 1 && p.ingoingArcs[0].sourceId === p.outgoingArcs[0].destinationId));\r\n        if (badPlace !== undefined) {\r\n            throw new Error(`The given Petri net is not a partial order! The place with id '${badPlace.id}' has too many in-/outgoing arcs or is part of a self-loop.`);\r\n        }\r\n        const badTransition = net.getTransitions().find(t => t.ingoingArcs.length === 0 || t.outgoingArcs.length === 0 || t.label === undefined);\r\n        if (badTransition !== undefined) {\r\n            throw new Error(`The given Petri net is not a partial order! The transition with id '${badTransition.id}' has an empty pre-/post-set or is unlabeled`);\r\n        }\r\n\r\n        const result = new PartialOrder();\r\n        for (const t of net.getTransitions()) {\r\n            result.addEvent(new Event(t.id!, t.label));\r\n        }\r\n        for (const t of net.getTransitions()) {\r\n            const event = result.getEvent(t.id!)!;\r\n            for (const arc of t.outgoingArcs) {\r\n                const nextTransitionId = arc.destination.outgoingArcs[0]?.destinationId;\r\n                if (nextTransitionId !== undefined) {\r\n                    event.addNextEvent(result.getEvent(nextTransitionId)!);\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n}\r\n","import {Event} from '../../../../models/po/model/event';\r\n\r\nexport class IsomorphismCandidate {\r\n    constructor(public target: Event, public candidates: Array<Event>) {\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {PartialOrder} from '../../../models/po/model/partial-order';\r\nimport {Event} from '../../../models/po/model/event';\r\nimport {IsomorphismCandidate} from './model/isomorphism-candidate';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PartialOrderIsomorphismService {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public arePartialOrdersIsomorphic(partialOrderA: PartialOrder, partialOrderB: PartialOrder): boolean {\r\n        partialOrderA.determineInitialAndFinalEvents();\r\n        partialOrderB.determineInitialAndFinalEvents();\r\n\r\n        const unsolved: Array<IsomorphismCandidate> = [];\r\n        for (const initialEvent of partialOrderA.initialEvents) {\r\n            unsolved.push(new IsomorphismCandidate(initialEvent, Array.from(partialOrderB.initialEvents)));\r\n        }\r\n\r\n        const mappingAB = new Map<string, Event>();\r\n        const mappingBA = new Map<string, Event>();\r\n        const pushedToBack = new Set<IsomorphismCandidate>();\r\n        while (unsolved.length > 0) {\r\n            const problem = unsolved.shift()!;\r\n            const previous: Array<Event> = Array.from(problem.target.previousEvents);\r\n            if (previous.some(p => !mappingAB.has(p.id))) {\r\n                // pre-set was not yet determined, we have to wait\r\n                if (pushedToBack.has(problem)) {\r\n                    return false;\r\n                }\r\n                pushedToBack.add(problem);\r\n                unsolved.push(problem);\r\n                continue;\r\n            }\r\n            problem.candidates = problem.candidates.filter(c => !mappingBA.has(c.id));\r\n\r\n            const match = problem.candidates.find(c => {\r\n                const sameLabel = c.label === problem.target.label;\r\n                if (!sameLabel) {\r\n                    return false;\r\n                }\r\n                if (c.previousEvents.size !== problem.target.previousEvents.size) {\r\n                    return false;\r\n                }\r\n                if (c.nextEvents.size !== problem.target.nextEvents.size) {\r\n                    return false;\r\n                }\r\n                const previousLabels = new Set(Array.from(c.previousEvents).map(p => p.label!));\r\n                for (const p of problem.target.previousEvents) {\r\n                    if (!previousLabels.has(p.label!)) {\r\n                        return false;\r\n                    }\r\n                    previousLabels.delete(p.label!);\r\n                }\r\n                return true;\r\n            });\r\n            if (match === undefined) {\r\n                return false;\r\n            }\r\n\r\n            pushedToBack.clear();\r\n\r\n            mappingAB.set(problem.target.id, match);\r\n            mappingBA.set(match.id, problem.target);\r\n\r\n            for(const next of problem.target.nextEvents) {\r\n                unsolved.push(new IsomorphismCandidate(next, Array.from(match.nextEvents)));\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {PetriNet} from '../../../models/pn/model/petri-net';\r\nimport {MapSet} from '../../../utility/map-set';\r\nimport {MappingManager} from './classes/mapping-manager';\r\nimport {Transition} from '../../../models/pn/model/transition';\r\nimport {\r\n    PetriNetToPartialOrderTransformerService\r\n} from '../transformation/petri-net-to-partial-order-transformer.service';\r\nimport {PartialOrderIsomorphismService} from '../../po/isomorphism/partial-order-isomorphism.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PetriNetIsomorphismService {\r\n\r\n    constructor(protected _pnToPoTransformer: PetriNetToPartialOrderTransformerService,\r\n                protected _poIsomorphism: PartialOrderIsomorphismService) {\r\n    }\r\n\r\n    public arePartialOrderPetriNetsIsomorphic(partialOrderA: PetriNet, partialOrderB: PetriNet): boolean {\r\n        if (!this.compareBasicNetProperties(partialOrderA, partialOrderB)) {\r\n            return false;\r\n        }\r\n\r\n        return this._poIsomorphism.arePartialOrdersIsomorphic(\r\n            this._pnToPoTransformer.transform(partialOrderA),\r\n            this._pnToPoTransformer.transform(partialOrderB)\r\n        );\r\n    }\r\n\r\n    public arePetriNetsIsomorphic(netA: PetriNet, netB: PetriNet): boolean {\r\n        if (!this.compareBasicNetProperties(netA, netB)) {\r\n            return false;\r\n        }\r\n\r\n        const transitionMapping = this.determinePossibleTransitionMappings(netA, netB);\r\n        if (transitionMapping === undefined) {\r\n            return false;\r\n        }\r\n\r\n        const placeMapping = this.determinePossiblePlaceMappings(netA, netB);\r\n        if (placeMapping === undefined) {\r\n            return false;\r\n        }\r\n\r\n        const transitionMappingManager = new MappingManager(transitionMapping);\r\n        const placeMappingManager = new MappingManager(placeMapping);\r\n\r\n        let done = false;\r\n        do {\r\n            const transitionMapping = transitionMappingManager.getCurrentMapping();\r\n            const uniqueTransitionsMapped = new Set<string>(transitionMapping.values());\r\n            if (transitionMapping.size === uniqueTransitionsMapped.size) { // bijective transition mapping\r\n                const placeMapping = placeMappingManager.getCurrentMapping();\r\n                const uniquePlacesMapped = new Set<string>(placeMapping.values());\r\n                if (placeMapping.size === uniquePlacesMapped.size // bijective place mapping\r\n                    && this.isMappingAPetriNetIsomorphism(netA, netB, transitionMapping, placeMapping)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            const carry = transitionMappingManager.moveToNextMapping();\r\n            if (carry) {\r\n                done = placeMappingManager.moveToNextMapping();\r\n            }\r\n        } while (!done);\r\n\r\n        return false;\r\n    }\r\n\r\n    private compareBasicNetProperties(netA: PetriNet, netB: PetriNet): boolean {\r\n        return netA.getTransitionCount() === netB.getTransitionCount()\r\n            && netA.getPlaceCount() === netB.getPlaceCount()\r\n            && netA.getArcCount() === netB.getArcCount()\r\n            && netA.inputPlaces.size === netB.inputPlaces.size\r\n            && netA.outputPlaces.size === netB.outputPlaces.size;\r\n    }\r\n\r\n    private determinePossibleTransitionMappings(netA: PetriNet, netB: PetriNet): MapSet<string, string> | undefined {\r\n        const transitionMapping = new MapSet<string, string>();\r\n        for (const tA of netA.getTransitions()) {\r\n            let wasMapped = false;\r\n            for (const tB of netB.getTransitions()) {\r\n                if (tA.label === tB.label\r\n                    && tA.ingoingArcs.length === tB.ingoingArcs.length\r\n                    && tA.outgoingArcs.length === tB.outgoingArcs.length) {\r\n                    wasMapped = true;\r\n                    transitionMapping.add(tA.getId(), tB.getId());\r\n                }\r\n            }\r\n            if (!wasMapped) {\r\n                return undefined;\r\n            }\r\n        }\r\n        return transitionMapping;\r\n    }\r\n\r\n    private determinePossiblePlaceMappings(netA: PetriNet, netB: PetriNet): MapSet<string, string> | undefined {\r\n        const placeMapping = new MapSet<string, string>();\r\n        for (const pA of netA.getPlaces()) {\r\n            let wasMapped = false;\r\n            for (const pB of netB.getPlaces()) {\r\n                if (pA.marking === pB.marking\r\n                    && pA.ingoingArcs.length === pB.ingoingArcs.length\r\n                    && pA.outgoingArcs.length === pB.outgoingArcs.length) {\r\n                    wasMapped = true;\r\n                    placeMapping.add(pA.getId(), pB.getId());\r\n                }\r\n            }\r\n            if (!wasMapped) {\r\n                return undefined;\r\n            }\r\n        }\r\n        return placeMapping;\r\n    }\r\n\r\n    private isMappingAPartialOrderIsomorphism(partialOrderA: PetriNet, partialOrderB: PetriNet, transitionMapping: Map<string, string>): boolean {\r\n        const unmappedArcs = partialOrderB.getPlaces().filter(p => p.ingoingArcs.length !== 0 && p.outgoingArcs.length !== 0);\r\n\r\n        for (const arc of partialOrderA.getPlaces()) {\r\n            if (arc.ingoingArcs.length === 0 || arc.outgoingArcs.length === 0) {\r\n                continue;\r\n            }\r\n            const preTransitionB = transitionMapping.get(arc.ingoingArcs[0].sourceId)!;\r\n            const postTransitionB = transitionMapping.get(arc.outgoingArcs[0].destinationId);\r\n\r\n            const fittingArcIndex = unmappedArcs.findIndex(unmapped => unmapped.ingoingArcs[0].sourceId === preTransitionB && unmapped.outgoingArcs[0].destinationId === postTransitionB);\r\n            if (fittingArcIndex === -1) {\r\n                return false;\r\n            }\r\n            unmappedArcs.splice(fittingArcIndex, 1);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private isMappingAPetriNetIsomorphism(netA: PetriNet, netB: PetriNet, transitionMapping: Map<string, string>, placeMapping: Map<string, string>): boolean {\r\n        const unmappedArcs = netB.getArcs();\r\n\r\n        for (const arc of netA.getArcs()) {\r\n            let arcSourceId: string;\r\n            let arcDestinationId: string;\r\n            if (arc.source instanceof Transition) {\r\n                arcSourceId = transitionMapping.get(arc.sourceId)!;\r\n                arcDestinationId = placeMapping.get(arc.destinationId)!;\r\n            } else {\r\n                arcSourceId = placeMapping.get(arc.sourceId)!;\r\n                arcDestinationId = transitionMapping.get(arc.destinationId)!;\r\n            }\r\n\r\n            // TODO arc weight is not considered when creating possible mappings. Inclusion of this property might make the algorithm more efficient\r\n            const fittingArcIndex = unmappedArcs.findIndex(unmapped => unmapped.sourceId === arcSourceId && unmapped.destinationId === arcDestinationId && unmapped.weight === arc.weight);\r\n            if (fittingArcIndex === -1) {\r\n                return false;\r\n            }\r\n            unmappedArcs.splice(fittingArcIndex, 1);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","import {Trace} from '../../models/log/model/trace';\r\nimport {Lifecycle} from '../../models/log/model/lifecycle';\r\n\r\nexport abstract class LogCleaner {\r\n    protected cleanLog(log: Array<Trace>): Array<Trace> {\r\n        return log.map(t => this.cleanTrace(t));\r\n    }\r\n\r\n    protected cleanTrace(trace: Trace): Trace {\r\n        const result = new Trace();\r\n        result.name = trace.name;\r\n        result.description = trace.description;\r\n        result.events = trace.events.filter(e => e.lifecycle === undefined || e.lifecycle === Lifecycle.COMPLETE);\r\n        return result;\r\n    }\r\n}\r\n","import {Marking} from '../../../../models/pn/model/marking';\r\n\r\nexport class CoverabilityTree {\r\n    private readonly _omegaMarking: Marking;\r\n    private readonly _ancestors: Array<CoverabilityTree>;\r\n    private readonly _children: Map<string, CoverabilityTree>;\r\n\r\n    constructor(omegaMarking: Marking, ancestors: Array<CoverabilityTree> = []) {\r\n        this._omegaMarking = omegaMarking;\r\n        this._ancestors = ancestors;\r\n        this._children = new Map<string, CoverabilityTree>();\r\n    }\r\n\r\n    get omegaMarking(): Marking {\r\n        return this._omegaMarking;\r\n    }\r\n\r\n    get ancestors(): Array<CoverabilityTree> {\r\n        return this._ancestors;\r\n    }\r\n\r\n    public getChildren(): Array<CoverabilityTree> {\r\n        return Array.from(this._children.values());\r\n    }\r\n\r\n    public getChildrenMap(): Map<string, CoverabilityTree> {\r\n        return new Map<string, CoverabilityTree>(this._children);\r\n    }\r\n\r\n    public addChild(label: string, marking: Marking): CoverabilityTree {\r\n        const child = new CoverabilityTree(marking, [...this._ancestors, this]);\r\n        this._children.set(label, child);\r\n        return child;\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {PetriNet} from '../../../models/pn/model/petri-net';\r\nimport {CoverabilityTree} from './model/coverability-tree';\r\nimport {Marking} from '../../../models/pn/model/marking';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PetriNetCoverabilityService {\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public getCoverabilityTree(net: PetriNet): CoverabilityTree {\r\n        const tree = new CoverabilityTree(net.getInitialMarking());\r\n        const statesToExplore = [tree];\r\n\r\n        whileLoop:\r\n        while (statesToExplore.length !== 0) {\r\n            const state = statesToExplore.shift()!;\r\n            const ancestors = state.ancestors;\r\n\r\n            for (const a of ancestors) {\r\n                if (a.omegaMarking.equals(state.omegaMarking)) {\r\n                    continue whileLoop;\r\n                }\r\n            }\r\n\r\n            const enabledTransitions = PetriNet.getAllEnabledTransitions(net, state.omegaMarking);\r\n            for (const t of enabledTransitions) {\r\n                const nextMarking = PetriNet.fireTransitionInMarking(net, t.id!, state.omegaMarking);\r\n                const nextOmegaMarking = this.computeNextOmegaMarking(nextMarking, ancestors);\r\n                const newState = state.addChild(t.label!, nextOmegaMarking);\r\n                statesToExplore.push(newState);\r\n            }\r\n        }\r\n\r\n        return tree;\r\n    }\r\n\r\n    protected computeNextOmegaMarking(nextMarking: Marking, ancestors: Array<CoverabilityTree>): Marking {\r\n        const runningOmega = new Marking(nextMarking);\r\n        for (const a of ancestors) {\r\n            runningOmega.introduceOmegas(a.omegaMarking);\r\n        }\r\n        return runningOmega;\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {PetriNet} from '../../../models/pn/model/petri-net';\r\nimport {LogCleaner} from '../../log/log-cleaner';\r\nimport {Marking} from '../../../models/pn/model/marking';\r\nimport {PetriNetCoverabilityService} from '../reachability/petri-net-coverability.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class ImplicitPlaceRemoverService extends LogCleaner {\r\n\r\n    constructor(protected _coverabilityTreeService: PetriNetCoverabilityService) {\r\n        super();\r\n    }\r\n\r\n    /**\r\n     * @param net a labeled Petri Net containing implicit places with no label-splitting\r\n     * @returns a copy of the input Petri net without the implicit places\r\n     */\r\n    public removeImplicitPlaces(net: PetriNet): PetriNet {\r\n        const reachableMarkings = this.generateReachableMarkings(net);\r\n\r\n        const placeOrdering = net.getPlaces().map(p => p.id!);\r\n        const removedPlaceIds = new Set<string>();\r\n        const result = net.clone();\r\n\r\n        p1For:\r\n        for (const p1 of placeOrdering) {\r\n            if (removedPlaceIds.has(p1)) {\r\n                continue;\r\n            }\r\n\r\n            p2For:\r\n            for (const p2 of placeOrdering) {\r\n                if (removedPlaceIds.has(p2)) {\r\n                    continue;\r\n                }\r\n                if (p1 === p2) {\r\n                    continue;\r\n                }\r\n\r\n                let isGreater = false;\r\n                for (const marking of reachableMarkings.values()) {\r\n                    if (marking.get(p1)! < marking.get(p2)!) {\r\n                        continue p2For;\r\n                    } else if (marking.get(p1)! > marking.get(p2)!) {\r\n                        isGreater = true;\r\n                    }\r\n                }\r\n\r\n                if (isGreater) {\r\n                    // p1 is > than some other place p2 => p1 is an implicit place and can be removed from the net\r\n                    removedPlaceIds.add(p1);\r\n                    result.removePlace(p1);\r\n                    continue p1For;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    protected generateReachableMarkings(net: PetriNet): Map<string, Marking> {\r\n        const reachableMarkings = new Map<string, Marking>();\r\n        const toExplore = [this._coverabilityTreeService.getCoverabilityTree(net)];\r\n        const placeOrdering = toExplore[0].omegaMarking.getKeys();\r\n\r\n        while (toExplore.length > 0) {\r\n            const next = toExplore.shift()!;\r\n            toExplore.push(...next.getChildren())\r\n            const m = next.omegaMarking;\r\n            reachableMarkings.set(this.stringifyMarking(m, placeOrdering), m);\r\n        }\r\n\r\n        return reachableMarkings;\r\n    }\r\n\r\n    protected getLabelMapping(net: PetriNet): Map<string, string> {\r\n        const result = new Map<string, string>();\r\n        for (const t of net.getTransitions()) {\r\n            if (t.label === undefined) {\r\n                throw new Error(`Silent transitions are unsupported! The transition with id '${t.id}' has no label`);\r\n            }\r\n            if (result.has(t.label!)) {\r\n                throw new Error(`Label splitting is not supported! The label '${t.label}' is shared by at least two transitions`);\r\n            }\r\n            result.set(t.label, t.id!);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    protected stringifyMarking(marking: Marking, placeOrdering: Array<string>): string {\r\n        return placeOrdering.map(pid => marking.get(pid)).join(',');\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {BehaviorSubject, concatMap, EMPTY, filter, from, map, Observable} from 'rxjs';\r\nimport {PetriNet} from '../../../models/pn/model/petri-net';\r\nimport {PetriNetRegionSynthesisService} from '../regions/petri-net-region-synthesis.service';\r\nimport {RegionsConfiguration} from '../regions/classes/regions-configuration';\r\nimport {PrimeMinerResult} from './prime-miner-result';\r\nimport {PetriNetIsomorphismService} from '../isomorphism/petri-net-isomorphism.service';\r\nimport {ImplicitPlaceRemoverService} from '../transformation/implicit-place-remover.service';\r\nimport {PartialOrderNetWithContainedTraces} from '../../../models/pn/model/partial-order-net-with-contained-traces';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PrimeMinerService {\r\n\r\n    constructor(protected _synthesisService: PetriNetRegionSynthesisService,\r\n                protected _isomorphismService: PetriNetIsomorphismService,\r\n                protected _implicitPlaceRemover: ImplicitPlaceRemoverService) {\r\n    }\r\n\r\n    public mine(minerInputs: Array<PartialOrderNetWithContainedTraces>, config: RegionsConfiguration = {}): Observable<PrimeMinerResult> {\r\n        if (minerInputs.length === 0) {\r\n            console.error('Miner input must be non empty');\r\n            return EMPTY;\r\n        }\r\n\r\n        minerInputs.sort((a, b) => (b.net?.frequency ?? 0) - (a.net?.frequency ?? 0));\r\n\r\n        let bestResult = new PrimeMinerResult(new PetriNet(), [], []);\r\n        let nextInputIndex = 1;\r\n\r\n        const minerInput$ = new BehaviorSubject(minerInputs[0]);\r\n        return minerInput$.pipe(\r\n            concatMap(nextInput => {\r\n                return this._synthesisService.synthesise([bestResult.net, nextInput.net], config).pipe(map(\r\n                    result => ({result, containedTraces: [...bestResult.containedTraces, ...nextInput.containedTraces]})\r\n                ));\r\n            }),\r\n            map(result => {\r\n                console.debug(`Iteration ${nextInputIndex} completed`, result);\r\n\r\n                const synthesisedNet = result.result.result;\r\n                const r: Array<PrimeMinerResult> = [];\r\n                if (this.isConnected(synthesisedNet)) {\r\n                    let noImplicit = this._implicitPlaceRemover.removeImplicitPlaces(synthesisedNet);\r\n\r\n                    if (!this._isomorphismService.arePetriNetsIsomorphic(bestResult.net, noImplicit)\r\n                        && !bestResult.net.isEmpty()) {\r\n                        r.push(bestResult);\r\n                    }\r\n\r\n                    bestResult = new PrimeMinerResult(noImplicit, [...bestResult.supportedPoIndices, nextInputIndex], result.containedTraces);\r\n\r\n                    if (nextInputIndex === minerInputs.length) {\r\n                        r.push(bestResult);\r\n                    }\r\n                }\r\n\r\n                if (nextInputIndex < minerInputs.length) {\r\n                    minerInput$.next(minerInputs[nextInputIndex]);\r\n                    nextInputIndex++;\r\n                } else {\r\n                    minerInput$.complete();\r\n                }\r\n\r\n                console.debug('best running result', bestResult);\r\n                return r;\r\n            }),\r\n            filter(a => a.length > 0),\r\n            concatMap(a => from(a))\r\n        );\r\n    }\r\n\r\n    private isConnected(net: PetriNet): boolean {\r\n        return net.getTransitions().every(t => t.ingoingArcs.length > 0);\r\n    }\r\n}\r\n","import {Trace} from '../../../../models/log/model/trace';\r\nimport {Multiset, MultisetEquivalent} from '../../../../utility/multiset-map';\r\n\r\nexport class MultisetEquivalentTraces extends MultisetEquivalent {\r\n\r\n    public traces: Array<Trace> = [];\r\n    public count = 0;\r\n\r\n    constructor(multiset: Multiset) {\r\n        super(multiset);\r\n    }\r\n\r\n    public addTrace(trace: Trace) {\r\n        this.traces.push(trace);\r\n        this.incrementCount();\r\n    }\r\n\r\n    public incrementCount() {\r\n        this.count++;\r\n    }\r\n\r\n    merge(ms: MultisetEquivalentTraces): void {\r\n        this.traces.push(...ms.traces);\r\n    }\r\n\r\n}\r\n","import {PetriNet} from '../../../../models/pn/model/petri-net';\r\n\r\nexport class TraceConversionResult {\r\n\r\n    constructor(public nets: Array<PetriNet>, public labelMapping: Map<string, string>) {}\r\n\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Trace} from '../../../../models/log/model/trace';\r\nimport {MultisetEquivalentTraces} from './multiset-equivalent-traces';\r\nimport {Multiset, MultisetMap} from '../../../../utility/multiset-map';\r\nimport {PrefixTree} from '../../../../utility/prefix-tree';\r\nimport {PetriNetRegionSynthesisService} from '../../../pn/regions/petri-net-region-synthesis.service';\r\nimport {PetriNet} from '../../../../models/pn/model/petri-net';\r\nimport {IncrementingCounter} from '../../../../utility/incrementing-counter';\r\nimport {Place} from '../../../../models/pn/model/place';\r\nimport {Transition} from '../../../../models/pn/model/transition';\r\nimport {forkJoin, map, Observable} from 'rxjs';\r\nimport {TraceConversionResult} from './trace-conversion-result';\r\nimport {Relabeler} from '../../../../utility/relabeler';\r\nimport {LogCleaner} from '../../log-cleaner';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AbelOracleService extends LogCleaner {\r\n\r\n    constructor(private _regionSynthesisService: PetriNetRegionSynthesisService) {\r\n        super();\r\n    }\r\n\r\n    public determineConcurrency(log: Array<Trace>): Observable<Array<PetriNet>> {\r\n        const multisetEquivalentTraces = this.obtainMultisetEquivalentTraces(log);\r\n        return forkJoin(multisetEquivalentTraces.map(traces => this.computePartialOrderFromEquivalentTraces(traces)));\r\n    }\r\n\r\n    private obtainMultisetEquivalentTraces(log: Array<Trace>): Array<MultisetEquivalentTraces> {\r\n        const multisetEquivalentTraces = new MultisetMap<MultisetEquivalentTraces>();\r\n        const tracePrefixTree = new PrefixTree<MultisetEquivalentTraces>();\r\n\r\n        for (const t of log) {\r\n            const trace = this.cleanTrace(t);\r\n\r\n            const multiset: Multiset = {};\r\n            tracePrefixTree.insert(trace, () => {\r\n                let equivalence = multisetEquivalentTraces.get(multiset);\r\n                if (equivalence === undefined) {\r\n                    equivalence = this.createEquivalence(trace, multiset);\r\n                    multisetEquivalentTraces.put(equivalence);\r\n                } else {\r\n                    equivalence.addTrace(trace);\r\n                }\r\n                return equivalence;\r\n            }, equivalence => {\r\n                equivalence.incrementCount();\r\n            }, event => {\r\n                if (multiset[event] === undefined) {\r\n                    multiset[event] = 1;\r\n                } else {\r\n                    multiset[event] += 1;\r\n                }\r\n            });\r\n        }\r\n\r\n        return multisetEquivalentTraces.values();\r\n    }\r\n\r\n    private createEquivalence(trace: Trace, multiset: Multiset): MultisetEquivalentTraces {\r\n        const equivalence = new MultisetEquivalentTraces(multiset);\r\n        equivalence.addTrace(trace);\r\n        return equivalence;\r\n    }\r\n\r\n    private computePartialOrderFromEquivalentTraces(traces: MultisetEquivalentTraces): Observable<PetriNet> {\r\n        const conversionResult = this.convertTracesToPetriNets(traces.traces);\r\n\r\n        return this._regionSynthesisService.synthesise(conversionResult.nets, {obtainPartialOrders: true, oneBoundRegions: true}).pipe(\r\n            map(r => {\r\n                const net = this.relabelNet(r.result, conversionResult.labelMapping);\r\n                net.frequency = traces.count;\r\n                return net;\r\n            })\r\n        );\r\n    }\r\n\r\n    private convertTracesToPetriNets(traces: Array<Trace>): TraceConversionResult {\r\n        const relabeler = new Relabeler();\r\n\r\n        const nets: Array<PetriNet> = traces.map(trace => {\r\n            const netCounter = new IncrementingCounter();\r\n            const net = new PetriNet();\r\n\r\n            let lastPlace = new Place();\r\n            net.addPlace(lastPlace);\r\n\r\n            for (const event of trace.events) {\r\n                const t = new Transition(relabeler.getNewUniqueLabel(event.name));\r\n                net.addTransition(t);\r\n                net.addArc(lastPlace, t);\r\n                lastPlace = new Place();\r\n                net.addPlace(lastPlace);\r\n                net.addArc(t, lastPlace);\r\n            }\r\n\r\n            relabeler.restartSequence();\r\n            return net;\r\n        });\r\n\r\n        return new TraceConversionResult(nets, relabeler.getLabelMapping());\r\n    }\r\n\r\n    private relabelNet(net: PetriNet, labelMapping: Map<string, string>): PetriNet {\r\n        net.getTransitions().forEach(t => {\r\n            t.label = labelMapping.get(t.label!)!;\r\n        });\r\n        return net;\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {ConcurrencyOracle} from '../concurrency-oracle';\r\nimport {Trace} from '../../../../models/log/model/trace';\r\nimport {AlphaOracleConfiguration} from './alpha-oracle-configuration';\r\nimport {OccurenceMatrixType, OccurrenceMatrix} from '../occurrence-matrix';\r\nimport {ConcurrencyRelation} from '../../../../models/concurrency/model/concurrency-relation';\r\nimport {LogCleaner} from '../../log-cleaner';\r\nimport {Relabeler} from '../../../../utility/relabeler';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AlphaOracleService extends LogCleaner implements ConcurrencyOracle {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    determineConcurrency(log: Array<Trace>, config: AlphaOracleConfiguration = {}): ConcurrencyRelation {\r\n        if (log.length === 0) {\r\n            return ConcurrencyRelation.noConcurrency();\r\n        }\r\n\r\n        const cleanedLog = this.cleanLog(log);\r\n\r\n        const relabeler = new Relabeler();\r\n        if (!!config.distinguishSameLabels) {\r\n            relabeler.uniquelyRelabelSequences(cleanedLog);\r\n        } else {\r\n            relabeler.relabelSequencesPreserveNonUniqueIdentities(cleanedLog);\r\n        }\r\n\r\n        const matrix = this.computeOccurrenceMatrix(\r\n            cleanedLog,\r\n            config.lookAheadDistance,\r\n            config.distinguishSameLabels ? OccurenceMatrixType.UNIQUE : OccurenceMatrixType.WILDCARD\r\n        );\r\n\r\n        return ConcurrencyRelation.fromOccurrenceMatrix(matrix, relabeler);\r\n    }\r\n\r\n    public computeOccurrenceMatrix(log: Array<Trace>, lookAheadDistance: number = 1, matrixType: OccurenceMatrixType = OccurenceMatrixType.UNIQUE, cleanLog: boolean = false): OccurrenceMatrix {\r\n        const matrix = new OccurrenceMatrix(matrixType);\r\n\r\n        if (cleanLog) {\r\n            log = this.cleanLog(log);\r\n        }\r\n\r\n        for (const trace of log) {\r\n            const prefix: Array<string> = [];\r\n            for (const step of trace.eventNames) {\r\n                if (prefix.length > lookAheadDistance) {\r\n                    prefix.shift();\r\n                }\r\n                for (const e of prefix) {\r\n                    matrix.add(e, step);\r\n                }\r\n                prefix.push(step);\r\n            }\r\n        }\r\n\r\n        console.debug(matrix);\r\n\r\n        return matrix;\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {ConcurrencyOracle} from '../concurrency-oracle';\r\nimport {Trace} from '../../../../models/log/model/trace';\r\nimport {ConcurrencyRelation} from '../../../../models/concurrency/model/concurrency-relation';\r\nimport {Relabeler} from '../../../../utility/relabeler';\r\nimport {LogEvent} from '../../../../models/log/model/logEvent';\r\nimport {Lifecycle} from '../../../../models/log/model/lifecycle';\r\nimport {OccurenceMatrixType, OccurrenceMatrix} from '../occurrence-matrix';\r\nimport {TimestampOracleConfiguration} from './timestamp-oracle-configuration';\r\nimport {LogCleaner} from '../../log-cleaner';\r\n\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TimestampOracleService extends LogCleaner implements ConcurrencyOracle {\r\n\r\n    determineConcurrency(log: Array<Trace>, config: TimestampOracleConfiguration = {}): ConcurrencyRelation {\r\n        if (log.length === 0) {\r\n            return ConcurrencyRelation.noConcurrency();\r\n        }\r\n\r\n        log.forEach(t => {\r\n            this.filterTraceAndPairStartCompleteEvents(t);\r\n        })\r\n\r\n        const relabeler = new Relabeler();\r\n        if (config.distinguishSameLabels) {\r\n            this.relabelPairedLog(log, relabeler);\r\n        } else {\r\n            relabeler.relabelSequencesPreserveNonUniqueIdentities(log);\r\n        }\r\n\r\n        const matrix = this.constructOccurrenceMatrix(log, !!config.distinguishSameLabels);\r\n        return ConcurrencyRelation.fromOccurrenceMatrix(matrix, relabeler);\r\n    }\r\n\r\n    protected filterTraceAndPairStartCompleteEvents(trace: Trace) {\r\n        const startedEvents = new Map<string, LogEvent>();\r\n\r\n        for (const e of trace.events) {\r\n            switch (e.lifecycle) {\r\n                case Lifecycle.START:\r\n                    if (startedEvents.has(e.name)) {\r\n                        throw new Error('TimestampOracle does not currently support auto-concurrency in the log!');\r\n                    }\r\n                    startedEvents.set(e.name, e);\r\n                    break;\r\n                case Lifecycle.COMPLETE:\r\n                    if (startedEvents.has(e.name)) {\r\n                        const pair = startedEvents.get(e.name)!;\r\n                        e.setPairEvent(pair);\r\n                        pair.setPairEvent(e);\r\n                        startedEvents.delete(e.name);\r\n                    }\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (startedEvents.size > 0) {\r\n            // unpaired start events exist\r\n            const unpaired = Array.from(startedEvents.values());\r\n            trace.events = trace.events.filter(e => !unpaired.includes(e));\r\n        }\r\n    }\r\n\r\n    protected relabelPairedLog(log: Array<Trace>, relabeler: Relabeler) {\r\n        const filteredLog = this.cleanLog(log);\r\n        relabeler.uniquelyRelabelSequences(filteredLog);\r\n        for (const trace of filteredLog) {\r\n            for (const event of trace.events) {\r\n                const pair = event.getPairEvent();\r\n                if (pair !== undefined) {\r\n                    pair.name = event.name;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected constructOccurrenceMatrix(log: Array<Trace>, unique: boolean): OccurrenceMatrix {\r\n        const matrix = new OccurrenceMatrix(unique ? OccurenceMatrixType.UNIQUE : OccurenceMatrixType.WILDCARD);\r\n\r\n        for (const trace of log) {\r\n            const startedEvents = new Set<string>();\r\n            for (const event of trace.events) {\r\n                switch (event.lifecycle) {\r\n                    case Lifecycle.START:\r\n                        this.addAllInProgressToMatrix(event.name, startedEvents, matrix);\r\n                        startedEvents.add(event.name);\r\n                        break;\r\n                    case Lifecycle.COMPLETE:\r\n                        if (startedEvents.has(event.name)) {\r\n                            startedEvents.delete(event.name);\r\n                        } else {\r\n                            // standalone\r\n                            this.addAllInProgressToMatrix(event.name, startedEvents, matrix);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return matrix;\r\n    }\r\n\r\n    protected addAllInProgressToMatrix(started: string, inProgress: Set<string>, matrix: OccurrenceMatrix): void {\r\n        for (const progress of inProgress) {\r\n            matrix.add(started, progress);\r\n            matrix.add(progress, started);\r\n        }\r\n    }\r\n}\r\n","import {PetriNet} from '../../../../models/pn/model/petri-net';\r\nimport {Place} from '../../../../models/pn/model/place';\r\nimport {Transition} from '../../../../models/pn/model/transition';\r\nimport {Trace} from '../../../../models/log/model/trace';\r\nimport {LogEvent} from '../../../../models/log/model/logEvent';\r\n\r\nexport class PetriNetSequence {\r\n\r\n    private _net: PetriNet;\r\n    private _lastPlace: Place;\r\n    private _trace: Trace;\r\n\r\n    constructor() {\r\n        this._net = new PetriNet();\r\n        this._lastPlace = new Place();\r\n        this._net.addPlace(this._lastPlace);\r\n        this._trace = new Trace();\r\n    }\r\n\r\n    get net(): PetriNet {\r\n        return this._net;\r\n    }\r\n\r\n    get trace(): Trace {\r\n        return this._trace;\r\n    }\r\n\r\n    public clone(): PetriNetSequence {\r\n        const clone = new PetriNetSequence();\r\n        clone._net = this._net.clone();\r\n        clone._lastPlace = clone._net.getPlace(this._lastPlace.getId())!;\r\n        clone._trace = this._trace.clone();\r\n        return clone;\r\n    }\r\n\r\n    public appendEvent(label: string) {\r\n        this._trace.events.push(new LogEvent(label));\r\n        this.appendTransition(label);\r\n    }\r\n\r\n    public appendTransition(label: string) {\r\n        const t = new Transition(label);\r\n        this._net.addTransition(t);\r\n        this._net.addArc(this._lastPlace, t);\r\n        this._lastPlace = new Place();\r\n        this._net.addPlace(this._lastPlace);\r\n        this._net.addArc(t, this._lastPlace);\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Trace} from '../../models/log/model/trace';\r\nimport {ConcurrencyRelation} from '../../models/concurrency/model/concurrency-relation';\r\nimport {PetriNet} from '../../models/pn/model/petri-net';\r\nimport {PrefixTree} from '../../utility/prefix-tree';\r\nimport {PetriNetSequence} from './concurrency-oracle/alpha-oracle/petri-net-sequence';\r\nimport {LogCleaner} from './log-cleaner';\r\nimport {Place} from '../../models/pn/model/place';\r\nimport {Transition} from '../../models/pn/model/transition';\r\nimport {MapSet} from '../../utility/map-set';\r\nimport {EditableStringSequenceWrapper} from '../../utility/string-sequence';\r\nimport {PetriNetIsomorphismService} from '../pn/isomorphism/petri-net-isomorphism.service';\r\nimport {PartialOrderNetWithContainedTraces} from '../../models/pn/model/partial-order-net-with-contained-traces';\r\nimport {LogEvent} from '../../models/log/model/logEvent';\r\n\r\nexport interface LogToPartialOrderTransformerConfiguration {\r\n    cleanLog?: boolean;\r\n    addStartStopEvent?: boolean;\r\n    discardPrefixes?: boolean;\r\n}\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class LogToPartialOrderTransformerService extends LogCleaner {\r\n\r\n    public static readonly START_SYMBOL = '▶';\r\n    public static readonly STOP_SYMBOL = '■';\r\n\r\n    constructor(protected _pnIsomorphismService: PetriNetIsomorphismService) {\r\n        super();\r\n    }\r\n\r\n    public transformToPartialOrders(log: Array<Trace>, concurrencyRelation: ConcurrencyRelation, config: LogToPartialOrderTransformerConfiguration = {}): Array<PartialOrderNetWithContainedTraces> {\r\n        if (log.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        if (!!config.cleanLog) {\r\n            log = this.cleanLog(log);\r\n        } else {\r\n            console.warn(`relabeling a log with both 'start' and 'complete' events will result in unexpected label associations!`);\r\n        }\r\n\r\n        concurrencyRelation.relabeler.relabelSequencesPreserveNonUniqueIdentities(log);\r\n\r\n        const sequences = this.convertLogToPetriNetSequences(log, !!config.discardPrefixes);\r\n\r\n        // transitive reduction requires all places to be internal => always add start/stop and remove later\r\n        sequences.forEach(seq => {\r\n            this.addStartAndStopEvent(seq);\r\n        });\r\n        const partialOrders = this.convertSequencesToPartialOrders(sequences, concurrencyRelation);\r\n        this.removeTransitiveDependencies(partialOrders);\r\n        if (!config.addStartStopEvent) {\r\n            partialOrders.forEach(po => {\r\n                this.removeStartAndStopEvent(po);\r\n            });\r\n        }\r\n        const result = this.filterAndCombinePartialOrderNets(partialOrders);\r\n\r\n        concurrencyRelation.relabeler.undoSequencesLabeling(result.map(po => new EditableStringSequenceWrapper(po.net.getTransitions())));\r\n\r\n        return result;\r\n    }\r\n\r\n    private convertLogToPetriNetSequences(log: Array<Trace>, discardPrefixes: boolean): Array<PetriNetSequence> {\r\n        const netSequences = new Set<PetriNetSequence>();\r\n        const tree = new PrefixTree<PetriNetSequence>(new PetriNetSequence());\r\n\r\n        for (const trace of log) {\r\n            tree.insert(trace,\r\n                () => {\r\n                    throw new Error('should never be called');\r\n                },\r\n                (node, treeNode) => {\r\n                    if (discardPrefixes && treeNode.hasChildren()) {\r\n                        node.net.frequency = 0;\r\n                        netSequences.delete(node);\r\n                    } else {\r\n                        node.net.frequency = node.net.frequency === undefined ? 1 : node.net.frequency + 1;\r\n                        netSequences.add(node);\r\n                    }\r\n                },\r\n                discardPrefixes ? (s, node, treeNode) => {\r\n                    if (treeNode.hasChildren()) {\r\n                        node!.net.frequency = 0;\r\n                        netSequences.delete(node!);\r\n                    }\r\n                } : undefined,\r\n                (step, prefix, previousNode) => {\r\n                    const newNode = previousNode!.clone();\r\n                    newNode.appendEvent(step);\r\n                    return newNode;\r\n                }\r\n            );\r\n        }\r\n\r\n        return Array.from(netSequences);\r\n    }\r\n\r\n    private addStartAndStopEvent(sequence: PetriNetSequence) {\r\n        // add events to net\r\n        const sequenceNet = sequence.net;\r\n        const firstLast = sequenceNet.getPlaces().filter(p => p.ingoingArcs.length === 0 || p.outgoingArcs.length === 0);\r\n        if (firstLast.length !== 2) {\r\n            console.debug(sequenceNet);\r\n            throw new Error('Illegal state. A sequence must have one start and one end place.');\r\n        }\r\n        let first, last: Place;\r\n        if (firstLast[0].ingoingArcs.length === 0) {\r\n            first = firstLast[0];\r\n            last = firstLast[1];\r\n        } else {\r\n            first = firstLast[1];\r\n            last = firstLast[0];\r\n        }\r\n\r\n        const preStart = new Place();\r\n        const start = new Transition(LogToPartialOrderTransformerService.START_SYMBOL);\r\n        sequenceNet.addPlace(preStart);\r\n        sequenceNet.addTransition(start);\r\n        sequenceNet.addArc(preStart, start);\r\n        sequenceNet.addArc(start, first);\r\n\r\n        const stop = new Transition(LogToPartialOrderTransformerService.STOP_SYMBOL);\r\n        const postStop = new Place();\r\n        sequenceNet.addTransition(stop);\r\n        sequenceNet.addPlace(postStop);\r\n        sequenceNet.addArc(last, stop);\r\n        sequenceNet.addArc(stop, postStop);\r\n\r\n        // add events to trace\r\n        sequence.trace.events.unshift(new LogEvent(LogToPartialOrderTransformerService.START_SYMBOL));\r\n        sequence.trace.events.push(new LogEvent(LogToPartialOrderTransformerService.STOP_SYMBOL));\r\n    }\r\n\r\n    private removeStartAndStopEvent(partialOrder: PartialOrderNetWithContainedTraces) {\r\n        // remove from net\r\n        const partialOrderNet = partialOrder.net;\r\n        if (partialOrderNet.inputPlaces.size !== 1 || partialOrderNet.outputPlaces.size !== 1) {\r\n            console.debug(partialOrderNet);\r\n            throw new Error('illegal state');\r\n        }\r\n\r\n        let startTransition: Transition | undefined = undefined;\r\n        partialOrderNet.inputPlaces.forEach(id => {\r\n            const inPlace = partialOrderNet.getPlace(id)!;\r\n            startTransition = inPlace.outgoingArcs[0].destination as Transition;\r\n            partialOrderNet.removePlace(id);\r\n        });\r\n\r\n        if (startTransition === undefined || (startTransition as Transition).label !== LogToPartialOrderTransformerService.START_SYMBOL) {\r\n            throw new Error('illegal state');\r\n        }\r\n        partialOrderNet.removeTransition(startTransition);\r\n\r\n        let stopTransition: Transition | undefined = undefined;\r\n        partialOrderNet.outputPlaces.forEach(id => {\r\n            const outPlace = partialOrderNet.getPlace(id)!;\r\n            stopTransition = outPlace.ingoingArcs[0].source as Transition;\r\n            partialOrderNet.removePlace(id);\r\n        });\r\n\r\n        if (stopTransition === undefined || (stopTransition as Transition).label !== LogToPartialOrderTransformerService.STOP_SYMBOL) {\r\n            throw new Error('illegal state');\r\n        }\r\n        partialOrderNet.removeTransition(stopTransition);\r\n\r\n        // remove from trace\r\n        partialOrder.containedTraces[0].events.shift();\r\n        partialOrder.containedTraces[0].events.pop();\r\n    }\r\n\r\n    private convertSequencesToPartialOrders(sequences: Array<PetriNetSequence>, concurrencyRelation: ConcurrencyRelation): Array<PartialOrderNetWithContainedTraces> {\r\n        return sequences.map(seq => this.convertSequenceToPartialOrder(seq, concurrencyRelation));\r\n    }\r\n\r\n    private convertSequenceToPartialOrder(sequence: PetriNetSequence, concurrencyRelation: ConcurrencyRelation): PartialOrderNetWithContainedTraces {\r\n        const net = sequence.net;\r\n        const placeQueue = net.getPlaces();\r\n\r\n        while (placeQueue.length > 0) {\r\n            const place = placeQueue.shift() as Place;\r\n            if (place.ingoingArcs.length === 0 || place.outgoingArcs.length === 0) {\r\n                continue;\r\n            }\r\n            if (place.ingoingArcs.length > 1 || place.outgoingArcs.length > 1) {\r\n                console.debug(place);\r\n                console.debug(sequence);\r\n                throw new Error('Illegal state. The processed net is not a partial order!');\r\n            }\r\n\r\n            const preEvent = (place.ingoingArcs[0].source as Transition);\r\n            const postEvent = (place.outgoingArcs[0].destination as Transition);\r\n            if (\r\n                preEvent.label! === postEvent.label!                           // no auto-concurrency\r\n                || !concurrencyRelation.isConcurrent(preEvent.label!, postEvent.label!)\r\n                || !concurrencyRelation.isConcurrent(postEvent.label!, preEvent.label!)\r\n            ) {\r\n                continue;\r\n            }\r\n\r\n            net.removePlace(place);\r\n\r\n            for (const a of preEvent.ingoingArcs) {\r\n                const inPlace = a.source as Place;\r\n\r\n                if (inPlace.ingoingArcs.length === 0 && postEvent.ingoingArcs.some(a => a.source.ingoingArcs.length === 0)) {\r\n                    continue;\r\n                }\r\n                if (inPlace.ingoingArcs.length > 0) {\r\n                    const inTransId = inPlace.ingoingArcs[0].sourceId;\r\n                    if (postEvent.ingoingArcs.some(a => a.source.ingoingArcs[0]?.sourceId === inTransId)) {\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                const clone = new Place();\r\n                net.addPlace(clone);\r\n                placeQueue.push(clone);\r\n\r\n                if (inPlace.ingoingArcs.length > 0) {\r\n                    net.addArc(inPlace.ingoingArcs[0].source as Transition, clone);\r\n                }\r\n\r\n                net.addArc(clone, postEvent)\r\n            }\r\n\r\n            for (const a of postEvent.outgoingArcs) {\r\n                const outPlace = a.destination as Place;\r\n\r\n                if (outPlace.outgoingArcs.length === 0 && preEvent.outgoingArcs.some(a => a.destination.outgoingArcs.length === 0)) {\r\n                    continue;\r\n                }\r\n                if (outPlace.outgoingArcs.length > 0) {\r\n                    const outTransId = outPlace.outgoingArcs[0].destinationId;\r\n                    if (preEvent.outgoingArcs.some(a => a.destination.outgoingArcs[0]?.destinationId === outTransId)) {\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                const clone = new Place();\r\n                net.addPlace(clone);\r\n                placeQueue.push(clone);\r\n\r\n                if (outPlace.outgoingArcs.length > 0) {\r\n                    net.addArc(clone, outPlace.outgoingArcs[0].destination as Transition);\r\n                }\r\n\r\n                net.addArc(preEvent, clone)\r\n            }\r\n        }\r\n\r\n        return new PartialOrderNetWithContainedTraces(net, [sequence.trace]);\r\n    }\r\n\r\n    private removeTransitiveDependencies(pos: Array<PartialOrderNetWithContainedTraces>) {\r\n        pos.forEach(po => this.performTransitiveReduction(po.net));\r\n    }\r\n\r\n    private performTransitiveReduction(partialOrder: PetriNet) {\r\n        // algorithm based on \"Algorithm A\" from https://www.sciencedirect.com/science/article/pii/0304397588900321\r\n        // the paper itself offers an improvement over this Algorithm - might be useful if A proves to be too slow\r\n\r\n        const reverseTransitionOrder = this.reverseTopologicalTransitionOrdering(partialOrder);\r\n\r\n        const reverseOrder = new Map<string, number>(reverseTransitionOrder.map((t, i) => [t.getId(), i]));\r\n        const transitiveDescendants = new MapSet<string, string>();\r\n        const reducedDescendants = new MapSet<string, string>();\r\n\r\n        for (const t of reverseTransitionOrder) {\r\n            transitiveDescendants.add(t.getId(), t.getId());\r\n            const childrenIds = this.getChildIds(t).sort((id1, id2) => reverseOrder.get(id2)! - reverseOrder.get(id1)!);\r\n            for (const childId of childrenIds) {\r\n                if (!transitiveDescendants.has(t.getId(), childId)) {\r\n                    transitiveDescendants.addAll(t.getId(), transitiveDescendants.get(childId));\r\n                    reducedDescendants.add(t.getId(), childId);\r\n                }\r\n            }\r\n        }\r\n\r\n        // remove transitive connections (places)\r\n        for (const t of partialOrder.getTransitions()) {\r\n            if (t.label === LogToPartialOrderTransformerService.STOP_SYMBOL) {\r\n                continue;\r\n            }\r\n            for (const a of t.outgoingArcs) {\r\n                if (!reducedDescendants.has(t.getId(), a.destination.outgoingArcs[0].destinationId)) {\r\n                    partialOrder.removePlace(a.destinationId);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getChildIds(transition: Transition): Array<string> {\r\n        return transition.outgoingArcs.flatMap(a => a.destination.outgoingArcs.map(ta => ta.destination.getId()));\r\n    }\r\n\r\n    /**\r\n     * Returns an array containing the transitions of the given net. The result is in reverse-topological order i.e.\r\n     * transitions at the front of the Array appear later in the net.\r\n     *\r\n     * Implementation based on https://www.geeksforgeeks.org/topological-sorting/3\r\n     * @param net a Petri Net representation of a partial order\r\n     */\r\n    private reverseTopologicalTransitionOrdering(net: PetriNet): Array<Transition> {\r\n        const resultStack: Array<Transition> = [];\r\n        const visited = new Set<string>();\r\n        for (const t of net.getTransitions()) {\r\n            if (visited.has(t.getId())) {\r\n                continue;\r\n            }\r\n            this.topologicalOrderingUtil(t, visited, resultStack);\r\n        }\r\n        return resultStack;\r\n    }\r\n\r\n    private topologicalOrderingUtil(t: Transition, visited: Set<string>, resultStack: Array<Transition>) {\r\n        visited.add(t.getId());\r\n        for (const a of t.outgoingArcs) {\r\n            const nextTransition = a.destination.outgoingArcs[0]?.destination;\r\n            if (nextTransition === undefined) {\r\n                continue;\r\n            }\r\n            if (visited.has(nextTransition.getId())) {\r\n                continue;\r\n            }\r\n            this.topologicalOrderingUtil(nextTransition as Transition, visited, resultStack);\r\n        }\r\n        resultStack.push(t);\r\n    }\r\n\r\n    private filterAndCombinePartialOrderNets(partialOrders: Array<PartialOrderNetWithContainedTraces>): Array<PartialOrderNetWithContainedTraces> {\r\n        const unique: Array<PartialOrderNetWithContainedTraces> = [partialOrders.shift()!];\r\n\r\n        for (const uncheckedOrder of partialOrders) {\r\n            let discard = false;\r\n            for (const uniqueOrder of unique) {\r\n                if (this._pnIsomorphismService.arePartialOrderPetriNetsIsomorphic(uncheckedOrder.net, uniqueOrder.net)) {\r\n                    discard = true;\r\n                    uniqueOrder.net.frequency = uniqueOrder.net.frequency! + uncheckedOrder.net.frequency!;\r\n                    uniqueOrder.containedTraces.push(...uncheckedOrder.containedTraces);\r\n                    break;\r\n                }\r\n            }\r\n            if (!discard) {\r\n                unique.push(uncheckedOrder);\r\n            }\r\n        }\r\n\r\n        return unique;\r\n    }\r\n\r\n}\r\n","/*\r\n * Public API Surface of ilpn-components\r\n */\r\n\r\nexport * from './lib/components/public-api';\r\nexport * from './lib/models/public-api';\r\nexport * from './lib/utility/public-api';\r\nexport * from './lib/algorithms/public-api';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.FooterComponent","i2","i1.FileReaderService","i2.FileDisplayComponent","i3","i1.FileDisplayComponent","i1.InfoCardComponent","BlockType","i1.PetriNetRegionTransformerService","i1.PetriNetRegionsService","i2.PetriNetSerialisationService","i1.PetriNetToPartialOrderTransformerService","i2.PartialOrderIsomorphismService","i1.PetriNetCoverabilityService","i1.PetriNetRegionSynthesisService","i2.PetriNetIsomorphismService","i3.ImplicitPlaceRemoverService","i1.PetriNetIsomorphismService"],"mappings":"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"}